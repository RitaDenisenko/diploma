package GitTools.GitRepoAnalysis;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;

import org.eclipse.jgit.api.DiffCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.NoHeadException;
import org.eclipse.jgit.blame.BlameResult;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.errors.AmbiguousObjectException;
import org.eclipse.jgit.errors.IncorrectObjectTypeException;
import org.eclipse.jgit.errors.RevisionSyntaxException;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.PersonIdent;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.DepthWalk.Commit;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;

public class GitRepositoryAnalysisTools {

	static final long month = 2592000000L;
	int monthNumber;
	
	public GitRepository gr = new GitRepository();	
	public List<String> fileNames = new ArrayList<String>();
	
	
	public GitRepositoryAnalysisTools(int months)
	{
		monthNumber = months;
	}
	
	public void initListFileNames(final File folder) {	
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	        	initListFileNames(fileEntry);
	        } else {
	            fileNames.add(fileEntry.getAbsolutePath().replace("\\", "/"));
	        }
	    }
	}
	
	public static int countLinesNew(String filename) throws IOException {
        try (Stream<String> fileStream = Files.lines(Paths.get(filename))) {
        	return (int) fileStream.count();
        }
        catch (Exception e)
        {
        	//System.out.println("countLinesNew exception");
        	return 0;
        }
	}
	
	public int calculateKnownLinesPercentInFile(String fileName, File repo, int length, int peopleNumber) throws Exception
	{
    	BlameResult br = gr.getBlameResultForFile(fileName.replace(repo.getAbsolutePath().replace("\\", "/") + "/", ""));
    	int countKnownLines = 0;
     	int i = 0, j = 1;
     	Date d = new Date(System.currentTimeMillis() - month * monthNumber);
     	RevCommit commit, parentCommit;
     	
     	
     	try {
     		while (length > i)
        	{
     			List<PersonIdent> people = new LinkedList<PersonIdent>();
     			commit = br.getSourceCommit(i);
     			people.add(commit.getCommitterIdent());
     			//надо рассм случай для 1 коммита
     			if (d.before(br.getSourceCommitter(i).getWhen())) //имеет смысл смотреть дальше
     			{
     				if (peopleNumber == 1)
     				{
     					countKnownLines++;
     				}
     				else
     				{
             			while (peopleNumber > j)
             			{
             				if (commit.getParentCount() > 0)
             				{
             					parentCommit = commit.getParent(0);
             					if (d.before(parentCommit.getAuthorIdent().getWhen()))//имеет смысл смотреть дальше
             					{
             						if (!people.contains(parentCommit.getAuthorIdent()) & diffBetweenCommitsContainsLine(commit, parentCommit))
             						{
             							people.add(parentCommit.getAuthorIdent());
             							if (peopleNumber == j + 1) // мы на последней итерации
             							{
             								countKnownLines++;
             							}
             							
             							j++;
             						}
             					}
             					else
             					{
             						j = peopleNumber; // выходим, для этой строки дальше не смотрим
             					}
             				}
             			}
     				}

     			}

     			/*
        		if (d.before(br.getSourceCommitter(i).getWhen()))
        		{
        			countKnownLines++;
        		}*/
        		
        		i++;
        	}
     	}catch(Exception e)
     	{
     		//System.out.println("getSourceCommitter exception");
     		if (i == 0)
     			length = 0;
     	}
    	
    	return (length == 0) ? -1 : countKnownLines*100 / length; // пустые и автосгенерированные файлы при подсчёте не учитываем
	}
	
	public int calculateTotalUnknownLinesPercent(File repo, int peopleNumber) throws Exception
	{
		int calc;
		int calcTotal = 0;
		int linesTotal = 0;
		int linesNumber = 0;
    	gr.init(repo.getAbsolutePath());
    	initListFileNames(repo);
    	for(String fileName : fileNames)
    	{
    			linesNumber = countLinesNew(fileName);
    			calc = calculateKnownLinesPercentInFile(fileName, repo, linesNumber, peopleNumber);
    			if (calc != -1)
    			{
        			System.out.println("Percent of known lines in file " + fileName + ": " + calc);
        			
        			calcTotal = calcTotal + calc * linesNumber / 100;
        			linesTotal = linesTotal + linesNumber;
        			System.out.println("Known: "+calcTotal);
        			System.out.println("Total: "+linesTotal);
    			}
    	}
    	
    	return (linesTotal == 0)? 100 :calcTotal * 100 / linesTotal;
	}
	
	/*private List<DiffEntry> getDiffsInWorkingTree(Repository repository) throws GitAPIException {
	    Git git = new Git(repository);
	    DiffCommand diffCommand = git.diff();
	    List<DiffEntry> diffsInWorkingTree = new ArrayList<>();
	    for (DiffEntry diff : diffCommand.call()) {
	        if (pathIsExcluded(diff.getNewPath())) {
	            continue;
	        }
	        diffsInWorkingTree.add(diff);
	    }
	    return diffsInWorkingTree;
	}*/
	
	public RevCommit getHeadCommit(Repository repository) throws Exception {
		Git git = new Git(repository);
	    Iterable<RevCommit> history = git.log().setMaxCount(1).call();
	    return history.iterator().next();
	}
	
	public Boolean diffBetweenCommitsContainsLine(RevCommit commit, RevCommit parentCommit) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException
	{
		Git git = new Git(gr.jgitRepository);
		
		ObjectReader reader = git.getRepository().newObjectReader();
		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
		ObjectId oldTree = git.getRepository().resolve( "HEAD^{tree}" ); // equals newCommit.getTree()
		oldTreeIter.reset( reader, oldTree );
		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
		ObjectId newTree = git.getRepository().resolve( "HEAD~1^{tree}" ); // equals oldCommit.getTree()
		newTreeIter.reset( reader, newTree );

		DiffFormatter df = new DiffFormatter( new ByteArrayOutputStream() ); // use NullOutputStream.INSTANCE if you don't need the diff output
		df.setRepository( git.getRepository() );
		//List<DiffEntry> entries = df.scan( oldTreeIter, newTreeIter );
        //diffFormatter.setRepository(gr.jgitRepository);
        for (DiffEntry entry : df.scan(parentCommit, commit)) {
        	//diffFormatter.format(diffFormatter.setDiffComparator(null);
        	//df.format(df.toFileHeader(entry));
        	System.out.println( entry );
        }
        /*
		for( DiffEntry entry : entries ) {
		  //System.out.println( entry );
		}*/		
				
		return true;
	}
	
	public void DifferenceBetweenThisCommitAndTheNext(RevCommit commit) throws Exception
	{
		//Repository repository = new FileRepositoryBuilder()
	    //        .setGitDir(new File("c:/temp/jgit-test/.git")).build();
	    // Here we get the head commit and it's first parent.
	    // Adjust to your needs to locate the proper commits.
	    //RevCommit headCommit = getHeadCommit(repository);
	    RevCommit diffWith = commit.getParent(0);
	    FileOutputStream stdout = new FileOutputStream(FileDescriptor.out);
	    DiffFormatter diffFormatter = new DiffFormatter(stdout);
	    try {
	        diffFormatter.setRepository(gr.jgitRepository);
	        for (DiffEntry entry : diffFormatter.scan(diffWith, commit)) {
	        	//diffFormatter.format(diffFormatter.setDiffComparator(null);
	        	diffFormatter.format(diffFormatter.toFileHeader(entry));
	        }
	    }
	    finally
	    {
	    	
	    }
	}
	
	public void GetDifferenceBetweenTwoCommits(RevCommit newCommit, RevCommit oldCommit, Git git) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException
	{
		/*File file = new File( git.getRepository().getWorkTree(), "file.txt" );
		writeFile( file, "first version" );
		RevCommit newCommit = commitChanges();
		writeFile( file, "second version" );
		RevCommit oldCommit = commitChanges();
		*/
		
		//Git git = new Git(gr.jgitRepository);
		System.out.println("GetDifferenceBetweenTwoCommits");
		
		ObjectReader reader = git.getRepository().newObjectReader();
		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
		ObjectId oldTree = git.getRepository().resolve( "HEAD^{tree}" ); // equals newCommit.getTree()
		oldTreeIter.reset( reader, oldTree );
		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
		ObjectId newTree = git.getRepository().resolve( "HEAD~1^{tree}" ); // equals oldCommit.getTree()
		newTreeIter.reset( reader, newTree );

		DiffFormatter df = new DiffFormatter( new ByteArrayOutputStream() ); // use NullOutputStream.INSTANCE if you don't need the diff output
		df.setRepository( git.getRepository() );
		List<DiffEntry> entries = df.scan( oldTreeIter, newTreeIter );

		for( DiffEntry entry : entries ) {
		  System.out.println( entry );
		}

	}
	
	public Boolean isThereDifferenceInLineBetweenCommits(int lineNum, RevCommit commit1, RevCommit commit2) throws GitAPIException
	{
		Git git = new Git(gr.jgitRepository);
		
		
		
		return true;
	}
	
	public void calculateLinesInFileKnownByMoreThen(String fileName, int peopleNum) throws Exception
	{
		System.out.println("calculateLinesInFileKnownByMoreThen");
		ObjectId head = gr.jgitRepository.resolve(Constants.HEAD);
		Git git = new Git(gr.jgitRepository);
		Iterable<RevCommit> commits = git.log().add(head).call(); //git.log().add(head).setMaxCount(peopleNum).addPath(fileName).call(); //git.log().add(head).call();
		//DiffCommand dc = git.diff().;
		
		List<DiffEntry> diffEntries = git.diff().call();
		RevCommit previousCommit = null;
		for (RevCommit commit: commits)
		{
			System.out.println("for");
			if (previousCommit != null)
			{
				//GetDifferenceBetweenTwoCommits(commit, previousCommit, git);
				DifferenceBetweenThisCommitAndTheNext(previousCommit);
			}
			
			previousCommit = commit;
		}
	}
	
}
