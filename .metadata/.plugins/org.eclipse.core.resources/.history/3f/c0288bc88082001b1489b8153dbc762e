package GitTools.GitRepoAnalysis;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Stream;

import org.eclipse.jgit.blame.BlameResult;

public class GitRepositoryAnalysisTools {

	static long maxTimePeriode = 2592000000L * 3;
	
	public GitRepository gr = new GitRepository();	
	public List<String> fileNames = new ArrayList<String>();
	
	public void initListFileNames(final File folder) {	
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	        	initListFileNames(fileEntry);
	        } else {
	            fileNames.add(fileEntry.getAbsolutePath());
	        }
	    }
	}
	
	public static int countLinesNew(String filename) throws IOException {
        try (Stream<String> fileStream = Files.lines(Paths.get(filename))) {
        	return (int) fileStream.count();
        }
        catch (Exception e)
        {
        	System.out.println("countLinesNew exception");
        	return 0;
        }
	}
	
	public int calculateKnownLinesPercentInFile(String fileName, File repo) throws Exception
	{
		System.out.println(fileName);
    	BlameResult br = gr.getBlameResultForFile(fileName);
    	int countKnownLines = 0;
    	int length = countLinesNew(fileName);
    	System.out.println(length);
     	int i = 0;
     	Date d = new Date(System.currentTimeMillis() - maxTimePeriode);
     	
     	try {
     		while (length > i)
        	{     
     			System.out.println("while");
        		System.out.println(br.getSourceCommitter(i).getName());
        		System.out.println(br.getSourceCommitter(i).getWhen());
        		if (d.before(br.getSourceCommitter(i).getWhen()))
        		{
        			System.out.println("d="+d+" commit_date="+br.getSourceCommitter(i).getWhen());
        			countKnownLines++;
        		}
        		
        		i++;
        	}
     	}catch(Exception e)
     	{
     		length = 0;
     	}
    	
    	return (length == 0) ? 100 : countKnownLines*100 / length;
	}
	
	public int calculateTotalUnknownLinesPercent(File repo) throws Exception
	{
		int calc;
    	gr.init(repo.getAbsolutePath());
    	initListFileNames(repo);
    	for(String fileName : fileNames)
    	{
    			calc = calculateKnownLinesPercentInFile(fileName, repo);
        		System.out.println("Percent of known lines in file " + fileName + ": " + calc);
    	}
    	
    	return 0;
    	/*
    	BlameResult br = gr.getBlameResultForFile("LetsDoStuff.Domain/LdsContext.cs");
    	int countKnownLines = 0;
    	int length = countLinesNew("C:/Users/MiPro/LetsDoStuff5/LetsDoStuff.Domain/LdsContext.cs");
     	int i = 0;
     	Date d = new Date(System.currentTimeMillis() - maxTimePeriode);
     	while (length > i)
    	{    		
    		System.out.println(br.getSourceCommitter(i).getName());
    		System.out.println(br.getSourceCommitter(i).getWhen());
    		if (d.before(br.getSourceCommitter(i).getWhen()))
    		{
    			countKnownLines++;
    		}
    		
    		i++;
    	};
    	
    	System.out.println(countKnownLines*100 / length);
    	
    	
    	initListFileNames("C:/Users/MiPro/LetsDoStuff5");*/
	}
	
}
