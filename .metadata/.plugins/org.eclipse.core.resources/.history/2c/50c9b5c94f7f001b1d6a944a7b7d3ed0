package GitTools.GitRepoAnalysis;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

public class GitRepositoryAnalysisTools {

	public GitRepository gr;	
	public List<String> fileNames;
	
	public void initListFileNames(final File folder) {	
	    for (final File fileEntry : gr.jgitRepository.getDirectory().listFiles()) {
	        if (fileEntry.isDirectory()) {
	        	initListFileNames(fileEntry);
	        } else {
	            fileNames.add(fileEntry.getName());
	        }
	    }
	}
	
	public static int countLinesNew(String filename) throws IOException {
	    InputStream is = new BufferedInputStream(new FileInputStream(filename));
	    try {
	        byte[] c = new byte[1024];

	        int readChars = is.read(c);
	        if (readChars == -1) {
	            return 0;
	        }

	        int count = 0;
	        while (readChars == 1024) {
	            for (int i=0; i<1024;) {
	                if (c[i++] == '\n') {
	                    ++count;
	                }
	            }
	            readChars = is.read(c);
	        }

	        while (readChars != -1) {
	            System.out.println(readChars);
	            for (int i=0; i<readChars; ++i) {
	                if (c[i] == '\n') {
	                    ++count;
	                }
	            }
	            readChars = is.read(c);
	        }

	        return count == 0 ? 1 : count;
	    } finally {
	        is.close();
	    }
	}
	
}
