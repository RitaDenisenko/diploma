package GitTools.GitRepoAnalysis;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;

import org.eclipse.jgit.api.DiffCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.NoHeadException;
import org.eclipse.jgit.blame.BlameResult;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.errors.AmbiguousObjectException;
import org.eclipse.jgit.errors.IncorrectObjectTypeException;
import org.eclipse.jgit.errors.RevisionSyntaxException;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.PersonIdent;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.DepthWalk.Commit;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.eclipse.jgit.util.io.NullOutputStream;

public class GitRepositoryAnalysisTools {

	static final long month = 2592000000L;
	static final int nearestLinesNumber = 10;
	int monthNumber;
	
	public GitRepository gr = new GitRepository();	
	public List<String> fileNames = new ArrayList<String>();
	
	
	public GitRepositoryAnalysisTools(int months)
	{
		monthNumber = months;
	}
	
	public void initListFileNames(final File folder) {	
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	        	initListFileNames(fileEntry);
	        } else {
	            fileNames.add(fileEntry.getAbsolutePath().replace("\\", "/"));
	        }
	    }
	}
	
	public static int countLinesNew(String filename) throws IOException {
        try (Stream<String> fileStream = Files.lines(Paths.get(filename))) {
        	return (int) fileStream.count();
        }
        catch (Exception e)
        {
        	//System.out.println("countLinesNew exception");
        	return 0;
        }
	}
	
	public int calculateKnownLinesPercentInFile(String fileName, File repo, int length, int peopleNumber) throws Exception
	{
    	BlameResult br = gr.getBlameResultForFile(fileName.replace(repo.getAbsolutePath().replace("\\", "/") + "/", ""));
    	int countKnownLines = 0;
     	int i = 0, j = 1;
     	Date d = new Date(System.currentTimeMillis() - month * monthNumber);
     	RevCommit commit, parentCommit;
     	
     	try {
     		while (length > i)
        	{
     			List<PersonIdent> people = new LinkedList<PersonIdent>();
     			commit = br.getSourceCommit(i);
     			people.add(commit.getCommitterIdent());
     			int lineNum = i;
     			if (d.before(br.getSourceCommitter(lineNum).getWhen())) //имеет смысл смотреть дальше
     			{
     				if (peopleNumber != 1)
     				{
             			while (peopleNumber > j)
             			{
             				//System.out.println("while (peopleNumber > j)");
             				if (commit.getParentCount() > 0)
             				{
             					//System.out.println("(commit.getParentCount() > 0)");
             					parentCommit = commit.getParent(0);
             					if (d.before(parentCommit.getAuthorIdent().getWhen()))//имеет смысл смотреть дальше
             					{
             						//System.out.println("d.before(parentCommit.getAuthorIdent().getWhen())");
             						if (!people.contains(parentCommit.getAuthorIdent()) & diffBetweenCommitsContainsThisLineOrNearestLines(commit, parentCommit,repo, fileName, lineNum))
             						{
             							people.add(parentCommit.getAuthorIdent());
             							if (peopleNumber == j + 1) // мы на последней итерации
             							{
             								countKnownLines++;
             							}
             							
             							j++;
             						}
             						commit = parentCommit;
             						lineNum = lineNumberInPreviousVersion(commit, parentCommit,repo, fileName, lineNum);
             						//пересчитать номер строки 
             					}
             					else
             					{
             						j = peopleNumber; // выходим, для этой строки дальше не смотрим
             					}
             				}
             			}
     				}

     			}

     			//случай для 1 человека обрабатываем отдельно
     			if (peopleNumber == 1)
     			{
         			int k = -nearestLinesNumber;
         			while(k <= lineNum + nearestLinesNumber)
         			{
         				if (d.before(br.getSourceCommitter(k).getWhen()))
         				{
         					countKnownLines++;
         					k = lineNum + nearestLinesNumber + 1;
         				}     					
         			}
     			}
		
        		i++;
        	}
     	}catch(Exception e)
     	{
     		//System.out.println("getSourceCommitter exception");
     		if (i == 0)
     			length = 0;
     	}
    	
    	return (length == 0) ? -1 : countKnownLines*100 / length; // пустые и автосгенерированные файлы при подсчёте не учитываем
	}
	
	public int calculateTotalUnknownLinesPercent(File repo, int peopleNumber) throws Exception
	{
		int calc;
		int calcTotal = 0;
		int linesTotal = 0;
		int linesNumber = 0;
    	gr.init(repo.getAbsolutePath());
    	initListFileNames(repo);
    	for(String fileName : fileNames)
    	{
    			linesNumber = countLinesNew(fileName);
    			calc = calculateKnownLinesPercentInFile(fileName, repo, linesNumber, peopleNumber);
    			if (calc != -1)
    			{
        			System.out.println("Percent of known lines in file " + fileName + ": " + calc);
        			
        			calcTotal = calcTotal + calc * linesNumber / 100;
        			linesTotal = linesTotal + linesNumber;
        			System.out.println("Known: "+calcTotal);
        			System.out.println("Total: "+linesTotal);
    			}
    	}
    	
    	return (linesTotal == 0)? 100 :calcTotal * 100 / linesTotal;
	}
	
	/*private List<DiffEntry> getDiffsInWorkingTree(Repository repository) throws GitAPIException {
	    Git git = new Git(repository);
	    DiffCommand diffCommand = git.diff();
	    List<DiffEntry> diffsInWorkingTree = new ArrayList<>();
	    for (DiffEntry diff : diffCommand.call()) {
	        if (pathIsExcluded(diff.getNewPath())) {
	            continue;
	        }
	        diffsInWorkingTree.add(diff);
	    }
	    return diffsInWorkingTree;
	}
	
	public RevCommit getHeadCommit(Repository repository) throws Exception {
		Git git = new Git(repository);
	    Iterable<RevCommit> history = git.log().setMaxCount(1).call();
	    return history.iterator().next();
	}*/
	
	//ok
	public Boolean diffBetweenCommitsContainsThisLineOrNearestLines(RevCommit commit, RevCommit parentCommit, File repo, String filePath, int lineNumber) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException
	{
		Git git = new Git(gr.jgitRepository);
		
		File tempFile = new File("temp.txt");
		tempFile.createNewFile(); // if file already exists will do nothing 
		FileOutputStream oFile = new FileOutputStream(tempFile, true); 
	    DiffFormatter df = new DiffFormatter(oFile);
		df.setRepository( git.getRepository() );
        for (DiffEntry entry : df.scan(parentCommit, commit)) {
        	df.format(df.toFileHeader(entry));
        }
        
        String content = readAllBytesJava7(tempFile.getAbsolutePath());
        
        tempFile.delete();
        
        int fileNamePosition = content.indexOf(filePath.replace(repo.getAbsolutePath().replace("\\", "/") + "/", ""));
        int atSymbolsPosition1, atSymbolsPosition2, nextFileDiffPosition;
        String substringWithLineNumbers;
        
        //System.out.println(filePath.replace(repo.getAbsolutePath().replace("\\", "/") + "/", ""));
        //System.out.println(fileNamePosition);
        //System.out.println(content);
        if (fileNamePosition!=-1)
        {
        	//System.out.println("(fileNamePosition!=-1)");
        	nextFileDiffPosition = content.indexOf("diff --git");
        	atSymbolsPosition1 = content.indexOf("@@", fileNamePosition);
        	atSymbolsPosition2 = content.indexOf("@@", atSymbolsPosition1+2);
        	substringWithLineNumbers = content.substring(atSymbolsPosition1+2, atSymbolsPosition2-1);
        	
        	if(containsThisOrNearestLine(substringWithLineNumbers, lineNumber))
        		return true;
        	
        	Boolean ok = true;
        	while(ok)
        	{
        		atSymbolsPosition1 = content.indexOf("@@", atSymbolsPosition2+2);
        		if (atSymbolsPosition1 < nextFileDiffPosition & atSymbolsPosition1 != -1)
        		{
        			atSymbolsPosition2 = content.indexOf("@@", atSymbolsPosition1+2);
                	substringWithLineNumbers = content.substring(atSymbolsPosition1+2, atSymbolsPosition2-1);
                	if(containsThisOrNearestLine(substringWithLineNumbers, lineNumber))
                		return true;
                	
        		}else
        			return false;            	
        	}
        	
        	
        }
        
		return false;
	}
	
	private static Boolean containsThisOrNearestLine(String substringToParse, int lineNumber)
	{
		int plusPosition = substringToParse.indexOf("+");
		int minusPosition = substringToParse.indexOf("-");
		int commaPosition1 = substringToParse.indexOf(",");
		int commaPosition2 = substringToParse.lastIndexOf(",");
		//int blankPosition = substringToParse.indexOf(" ", commaPosition1);
		
		int firstSubstractedLine = Integer.parseInt(substringToParse.substring(minusPosition+1, commaPosition1));  
		//int lastSubstractedLine = firstSubstractedLine - 1 + Integer.parseInt(substringToParse.substring(commaPosition1+1, blankPosition));  
		
		int firstAddedLine = Integer.parseInt(substringToParse.substring(plusPosition+1, commaPosition2));  
		int lastAddedLine = firstAddedLine - 1 + Integer.parseInt(substringToParse.substring(commaPosition2+1, substringToParse.length()).trim());
		
		//if(!(lineNumber >= firstAddedLine & lineNumber <= lastAddedLine))
		
		return ( (lineNumber >= firstAddedLine - nearestLinesNumber 
				 & lineNumber <= lastAddedLine + nearestLinesNumber) 
				|(lineNumber >= firstSubstractedLine - nearestLinesNumber 
				 & lineNumber <= firstSubstractedLine + nearestLinesNumber));
		
	}
	
	private static int generateLineNum(String substringToParse, int lineNumber)
	{
		int plusPosition = substringToParse.indexOf("+");
		int minusPosition = substringToParse.indexOf("-");
		int commaPosition1 = substringToParse.indexOf(",");
		int commaPosition2 = substringToParse.lastIndexOf(",");
		int blankPosition = substringToParse.indexOf(" ", commaPosition1);
		
		int firstSubstractedLine = Integer.parseInt(substringToParse.substring(minusPosition+1, commaPosition1));  
		int lastSubstractedLine = firstSubstractedLine - 1 + Integer.parseInt(substringToParse.substring(commaPosition1+1, blankPosition));  
		
		int firstAddedLine = Integer.parseInt(substringToParse.substring(plusPosition+1, commaPosition2));  
		int lastAddedLine = firstAddedLine - 1 + Integer.parseInt(substringToParse.substring(commaPosition2+1, substringToParse.length()).trim());
		
		if(!(lineNumber >= firstAddedLine & lineNumber <= lastAddedLine)) //строку добавили не в прошлом коммите
		{
			if (lineNumber < firstAddedLine & lineNumber < firstSubstractedLine)//если строка лежит до изменений, её номер сохраняется
			{
				return lineNumber;
			}
			if(lineNumber > firstAddedLine & lineNumber > firstSubstractedLine)
			{
				return lineNumber + Integer.parseInt(substringToParse.substring(commaPosition2+1, substringToParse.length()).trim()) - Integer.parseInt(substringToParse.substring(commaPosition1+1, blankPosition));
			}
		}
		
		
		return -1;
	}
	
	private static int lineNumberInPreviousVersion(RevCommit commit, RevCommit parentCommit, File repo, String filePath, int lineNumber)
	{
		return 1;
	}
	
    private static String readAllBytesJava7(String filePath) 
    {
        String content = "";
 
        try
        {
            content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
 
        return content;
    }
	
	public void DifferenceBetweenThisCommitAndTheNext(RevCommit commit) throws Exception
	{
	    RevCommit diffWith = commit.getParent(0);
	    FileOutputStream stdout = new FileOutputStream(FileDescriptor.out);
	    DiffFormatter diffFormatter = new DiffFormatter(stdout);
	    try {
	        diffFormatter.setRepository(gr.jgitRepository);
	        for (DiffEntry entry : diffFormatter.scan(diffWith, commit)) {
	        	//diffFormatter.format(diffFormatter.setDiffComparator(null);
	        	diffFormatter.format(diffFormatter.toFileHeader(entry));
	        }
	    }
	    finally
	    {
	    	
	    }
	}

	public void PrintDifferenceBetweenTwoCommits(RevCommit newCommit, RevCommit oldCommit, Git git) throws RevisionSyntaxException, AmbiguousObjectException, IncorrectObjectTypeException, IOException
	{
		ObjectReader reader = git.getRepository().newObjectReader();
		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
		ObjectId oldTree = git.getRepository().resolve( "HEAD^{tree}" ); // equals newCommit.getTree()
		oldTreeIter.reset( reader, oldTree );
		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
		ObjectId newTree = git.getRepository().resolve( "HEAD~1^{tree}" ); // equals oldCommit.getTree()
		newTreeIter.reset( reader, newTree );

		DiffFormatter df = new DiffFormatter( new ByteArrayOutputStream() ); // use NullOutputStream.INSTANCE if you don't need the diff output
		df.setRepository( git.getRepository() );
		List<DiffEntry> entries = df.scan( oldTreeIter, newTreeIter );

		for( DiffEntry entry : entries ) {
		  System.out.println( entry );
		}

	}
	

	
}
