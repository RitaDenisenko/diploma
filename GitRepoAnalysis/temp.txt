diff --git a/.conan/test_package/CMakeLists.txt b/.conan/test_package/CMakeLists.txt
index db05659..1cd751a 100644
--- a/.conan/test_package/CMakeLists.txt
+++ b/.conan/test_package/CMakeLists.txt
@@ -8,4 +8,4 @@
 
 add_executable(${PROJECT_NAME} test_package.cpp)
 target_link_libraries(${PROJECT_NAME} CONAN_PKG::Catch2)
-set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 11)
+set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 14)
diff --git a/.travis.yml b/.travis.yml
index ffd785e..1fca40b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1,6 @@
 language: cpp
+dist: xenial
+
 
 branches:
   except:
@@ -6,42 +8,34 @@
 
 common_sources: &all_sources
   - ubuntu-toolchain-r-test
-  - llvm-toolchain-trusty
-  - llvm-toolchain-trusty-3.9
-  - llvm-toolchain-trusty-4.0
+  - llvm-toolchain-xenial
+  - llvm-toolchain-xenial-3.8
+  - llvm-toolchain-xenial-3.9
+  - llvm-toolchain-xenial-4.0
   - llvm-toolchain-xenial-5.0
   - llvm-toolchain-xenial-6.0
+  - llvm-toolchain-xenial-7
+  - llvm-toolchain-xenial-8
+
 
 matrix:
   include:
-
-    # 1/ Linux Clang Builds
+    # Clang builds
     - os: linux
       compiler: clang
       addons:
-        apt:
-          sources: *all_sources
-          packages: ['clang-3.5']
-      env: COMPILER='clang++-3.5'
+          apt:
+              sources: *all_sources
+              packages: ['clang-3.8']
+      env: COMPILER='clang++-3.8' CPP14=1
 
     - os: linux
       compiler: clang
       addons:
         apt:
           sources: *all_sources
-          packages: ['clang-3.6']
-      env: COMPILER='clang++-3.6'
-
-    # Clang 3.7 is intentionally skipped as we cannot get it easily on
-    # TravisCI container
-
-    - os: linux
-      compiler: clang
-      addons:
-        apt:
-          sources: *all_sources
-          packages: ['lcov', 'clang-3.8']
-      env: COMPILER='clang++-3.8'
+          packages: ['clang-3.8', 'lcov']
+      env: COMPILER='clang++-3.8' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
 
     - os: linux
       compiler: clang
@@ -49,93 +43,6 @@
           apt:
               sources: *all_sources
               packages: ['clang-3.9']
-      env: COMPILER='clang++-3.9'
-
-    - os: linux
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-4.0']
-      env: COMPILER='clang++-4.0'
-
-    - os: linux
-      dist: xenial
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-5.0']
-      env: COMPILER='clang++-5.0'
-
-    - os: linux
-      dist: xenial
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-6.0']
-      env: COMPILER='clang++-6.0'
-
-    # 2/ Linux GCC Builds
-    - os: linux
-      compiler: gcc
-      addons:
-        apt:
-          sources: *all_sources
-          packages: ['g++-4.9']
-      env: COMPILER='g++-4.9'
-
-    - os: linux
-      compiler: gcc
-      addons:
-        apt:
-          sources: *all_sources
-          packages: ['g++-5']
-      env: COMPILER='g++-5'
-
-    - os: linux
-      compiler: gcc
-      addons: &gcc6
-        apt:
-          sources: *all_sources
-          packages: ['g++-6']
-      env: COMPILER='g++-6'
-
-    - os: linux
-      compiler: gcc
-      addons: &gcc7
-        apt:
-          sources: *all_sources
-          packages: ['g++-7']
-      env: COMPILER='g++-7'
-
-    - os: linux
-      compiler: gcc
-      addons: &gcc8
-        apt:
-          sources: *all_sources
-          packages: ['g++-8']
-      env: COMPILER='g++-8'
-
-    # 3b/ Linux C++14 Clang builds
-    # Note that we need newer libstdc++ for C++14 support
-    - os: linux
-      compiler: clang
-      addons:
-          apt:
-              packages: ['clang-3.8', 'libstdc++-6-dev']
-              sources:
-                  - ubuntu-toolchain-r-test
-                  - llvm-toolchain-trusty
-      env: COMPILER='clang++-3.8' CPP14=1
-
-    - os: linux
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-3.9', 'libstdc++-6-dev']
       env: COMPILER='clang++-3.9' CPP14=1
 
     - os: linux
@@ -143,45 +50,100 @@
       addons:
           apt:
               sources: *all_sources
-              packages: ['clang-4.0', 'libstdc++-6-dev']
+              packages: ['clang-4.0']
       env: COMPILER='clang++-4.0' CPP14=1
 
     - os: linux
-      dist: xenial
       compiler: clang
       addons:
           apt:
               sources: *all_sources
-              packages: ['clang-5.0', 'libstdc++-6-dev']
+              packages: ['clang-5.0']
       env: COMPILER='clang++-5.0' CPP14=1
 
     - os: linux
-      dist: xenial
       compiler: clang
       addons:
           apt:
               sources: *all_sources
-              packages: ['clang-6.0', 'libstdc++-6-dev']
+              packages: ['clang-6.0']
       env: COMPILER='clang++-6.0' CPP14=1
 
+    - os: linux
+      compiler: clang
+      addons:
+          apt:
+              sources: *all_sources
+              packages: ['clang-6.0', 'libstdc++-8-dev']
+      env: COMPILER='clang++-6.0' CPP17=1
 
-    # 4a/ Linux C++14 GCC builds
+    - os: linux
+      compiler: clang
+      addons:
+          apt:
+              sources: *all_sources
+              packages: ['clang-7']
+      env: COMPILER='clang++-7' CPP14=1
+
+    - os: linux
+      compiler: clang
+      addons:
+          apt:
+              sources: *all_sources
+              packages: ['clang-8']
+      env: COMPILER='clang++-8' CPP14=1
+
+    - os: linux
+      compiler: clang
+      addons:
+          apt:
+              sources: *all_sources
+              packages: ['clang-8', 'libstdc++-8-dev']
+      env: COMPILER='clang++-8' CPP17=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
+
+
+    # GCC builds
     - os: linux
       compiler: gcc
-      addons: *gcc6
+      addons:
+        apt:
+          sources: *all_sources
+          packages: ['g++-4.9']
+      env: COMPILER='g++-4.9' CPP14=1
+
+    - os: linux
+      compiler: gcc
+      addons:
+        apt:
+          sources: *all_sources
+          packages: ['g++-5']
+      env: COMPILER='g++-5' CPP14=1
+
+    - os: linux
+      compiler: gcc
+      addons:
+        apt:
+          sources: *all_sources
+          packages: ['g++-6']
       env: COMPILER='g++-6' CPP14=1
 
     - os: linux
       compiler: gcc
-      addons: *gcc7
-      env: COMPILER='g++-7' CPP14=1
+      addons:
+        apt:
+          sources: *all_sources
+          packages: ['g++-7', 'lcov']
+      env: COMPILER='g++-7' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
 
     - os: linux
       compiler: gcc
-      addons: *gcc8
-      env: COMPILER='g++-8' CPP14=1
+      addons:
+        apt:
+          sources: *all_sources
+          packages: ['g++-8']
+      env: COMPILER='g++-8' CPP17=1
 
-    # 5/ OSX Clang Builds
+    # OSX Clang Builds
     - os: osx
       osx_image: xcode9.4
       compiler: clang
@@ -203,86 +165,19 @@
       env: COMPILER='clang++' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
 
 
-    # 6/ Special builds -- examples, coverage, valgrind, etc.
-    - os: linux
-      compiler: gcc
-      addons:
-        apt:
-          sources: *all_sources
-          packages: ['lcov', 'g++-7']
-      env: COMPILER='g++-7' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
 
-    - os: linux
-      compiler: clang
-      addons:
-        apt:
-          packages: ['clang-3.8', 'lcov']
-          sources:
-            - ubuntu-toolchain-r-test
-            - llvm-toolchain-trusty
-      env: COMPILER='clang++-3.8' EXAMPLES=1 COVERAGE=1 EXTRAS=1
-
-    - os: linux
-      compiler: gcc
-      addons:
-        apt:
-          sources: *all_sources
-          packages: ['valgrind', 'lcov', 'g++-7']
-      env: COMPILER='g++-7' CPP14=1 VALGRIND=1
-
-    # 7/ C++17 builds
-    - os: linux
-      compiler: gcc
-      addons: *gcc7
-      env: COMPILER='g++-7' CPP17=1
-
-    - os: linux
-      compiler: gcc
-      addons: *gcc7
-      env: COMPILER='g++-7' EXAMPLES=1 COVERAGE=1 EXTRAS=1 CPP17=1
-
-    - os: linux
-      dist: xenial
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-6.0', 'libstdc++-8-dev']
-      env: COMPILER='clang++-6.0' CPP17=1
-
-    - os: linux
-      dist: xenial
-      compiler: clang
-      addons:
-          apt:
-              sources: *all_sources
-              packages: ['clang-6.0', 'libstdc++-8-dev']
-      env: COMPILER='clang++-6.0' CPP17=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
-
-    # 8/ Conan
+    # Special builds, e.g. conan
     - language: python
       python:
         - "3.7"
-      dist: xenial
       install:
         - pip install conan-package-tools
       env:
         - CONAN_GCC_VERSIONS=8
         - CONAN_DOCKER_IMAGE=conanio/gcc8
+        - CPP14=1
       script:
         - python .conan/build.py
-
-install:
-  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
-  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
-  - |
-    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
-      CMAKE_URL="http://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.tar.gz"
-      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
-      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
-    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
-        which cmake || brew install cmake;
-    fi
 
 before_script:
   - export CXX=${COMPILER}
@@ -296,7 +191,7 @@
     elif [[ ${CPP14} -eq 1 ]]; then
       export CPP_STANDARD=14
     else
-      export CPP_STANDARD=11
+      travis_terminate 4;
     fi
 
     # Use Debug builds for running Valgrind and building examples
diff --git a/examples/231-Cfg-OutputStreams.cpp b/examples/231-Cfg-OutputStreams.cpp
index efa9997..2f42c29 100644
--- a/examples/231-Cfg-OutputStreams.cpp
+++ b/examples/231-Cfg-OutputStreams.cpp
@@ -10,11 +10,12 @@
 #define CATCH_CONFIG_MAIN
 #include <catch2/catch.hpp>
 
+
 class out_buff : public std::stringbuf {
     std::FILE* m_stream;
 public:
-    out_buff(std::FILE* stream) :m_stream(stream) {}
-    ~out_buff() { pubsync(); }
+    out_buff(std::FILE* stream):m_stream(stream) {}
+    ~out_buff();
     int sync() {
         int ret = 0;
         for (unsigned char c : str()) {
@@ -29,6 +30,12 @@
     }
 };
 
+out_buff::~out_buff() { pubsync(); }
+
+#if defined(__clang__)
+#pragma clang diagnostic ignored "-Wexit-time-destructors" // static variables in cout/cerr/clog
+#endif
+
 namespace Catch {
     std::ostream& cout() {
         static std::ostream ret(new out_buff(stdout));
diff --git a/examples/301-Gen-MapTypeConversion.cpp b/examples/301-Gen-MapTypeConversion.cpp
index b6377e9..8877297 100644
--- a/examples/301-Gen-MapTypeConversion.cpp
+++ b/examples/301-Gen-MapTypeConversion.cpp
@@ -22,15 +22,17 @@
         }
     }
 
-    std::string const& get() const override {
-        return m_line;
-    }
+    std::string const& get() const override;
     
     bool next() override {
         return !!std::getline(m_stream, m_line);
     }
 };
 
+std::string const& LineGenerator::get() const {
+    return m_line;
+}
+
 // This helper function provides a nicer UX when instantiating the generator
 // Notice that it returns an instance of GeneratorWrapper<std::string>, which
 // is a value-wrapper around std::unique_ptr<IGenerator<std::string>>.
diff --git a/projects/SelfTest/UsageTests/ToStringVariant.tests.cpp b/projects/SelfTest/UsageTests/ToStringVariant.tests.cpp
index 60b3f90..c6809c0 100644
--- a/projects/SelfTest/UsageTests/ToStringVariant.tests.cpp
+++ b/projects/SelfTest/UsageTests/ToStringVariant.tests.cpp
@@ -9,12 +9,12 @@
 // We need 2 types with non-trivial copies/moves
 struct MyType1 {
     MyType1() = default;
-    MyType1(MyType1 const&) { throw 1; }
+    [[noreturn]] MyType1(MyType1 const&) { throw 1; }
     MyType1& operator=(MyType1 const&) { throw 3; }
 };
 struct MyType2 {
     MyType2() = default;
-    MyType2(MyType2 const&) { throw 2; }
+    [[noreturn]] MyType2(MyType2 const&) { throw 2; }
     MyType2& operator=(MyType2 const&) { throw 4; }
 };
 
diff --git a/include/internal/catch_common.cpp b/include/internal/catch_common.cpp
index 790acbe..d35ac06 100644
--- a/include/internal/catch_common.cpp
+++ b/include/internal/catch_common.cpp
@@ -37,7 +37,4 @@
         return std::string();
     }
 
-    NonCopyable::NonCopyable() = default;
-    NonCopyable::~NonCopyable() = default;
-
-}
+} // end namespace Catch
diff --git a/include/internal/catch_common.h b/include/internal/catch_common.h
index b4ca1c1..afa3909 100644
--- a/include/internal/catch_common.h
+++ b/include/internal/catch_common.h
@@ -38,10 +38,8 @@
         NonCopyable( NonCopyable && )                  = delete;
         NonCopyable& operator = ( NonCopyable const& ) = delete;
         NonCopyable& operator = ( NonCopyable && )     = delete;
-
     protected:
-        NonCopyable();
-        virtual ~NonCopyable();
+        NonCopyable() noexcept = default;
     };
 
     struct SourceLineInfo {
diff --git a/include/internal/catch_session.h b/include/internal/catch_session.h
index 4e83d52..a648bf4 100644
--- a/include/internal/catch_session.h
+++ b/include/internal/catch_session.h
@@ -20,7 +20,7 @@
     public:
 
         Session();
-        ~Session() override;
+        ~Session();
 
         void showHelp() const;
         void libIdentify();
@@ -41,7 +41,7 @@
                 returnCode = run();
             return returnCode;
         }
-    
+
         int run();
 
         clara::Parser const& cli() const;
diff --git a/include/internal/catch_test_registry.cpp b/include/internal/catch_test_registry.cpp
index 248bee4..382ede3 100644
--- a/include/internal/catch_test_registry.cpp
+++ b/include/internal/catch_test_registry.cpp
@@ -32,6 +32,4 @@
             getMutableRegistryHub().registerStartupException();
         }
     }
-
-    AutoReg::~AutoReg() = default;
 }
diff --git a/include/internal/catch_test_registry.h b/include/internal/catch_test_registry.h
index c9624fc..0701e17 100644
--- a/include/internal/catch_test_registry.h
+++ b/include/internal/catch_test_registry.h
@@ -44,7 +44,6 @@
 
 struct AutoReg : NonCopyable {
     AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;
-    ~AutoReg();
 };
 
 } // end namespace Catch
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 4101f73..c416ad6 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -9,14 +9,6 @@
 at least the next major release.
 
 
-## Deprecations
-
-### SourceLineInfo::empty()
-
-There should be no reason to ever have an empty `SourceLineInfo`, so the
-method will be removed.
-
-
 ## Planned changes
 
 ### `CHECKED_IF` and `CHECKED_ELSE`
diff --git a/include/internal/catch_common.h b/include/internal/catch_common.h
index 5e097fb..b4ca1c1 100644
--- a/include/internal/catch_common.h
+++ b/include/internal/catch_common.h
@@ -47,8 +47,8 @@
     struct SourceLineInfo {
 
         SourceLineInfo() = delete;
-        SourceLineInfo( char const* _file, std::size_t _line ) noexcept
-        :   file( _file ),
+        constexpr SourceLineInfo( char const* _file, std::size_t _line ) noexcept:
+            file( _file ),
             line( _line )
         {}
 
@@ -57,7 +57,6 @@
         SourceLineInfo( SourceLineInfo&& )              noexcept = default;
         SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;
 
-        bool empty() const noexcept { return file[0] == '\0'; }
         bool operator == ( SourceLineInfo const& other ) const noexcept;
         bool operator < ( SourceLineInfo const& other ) const noexcept;
 
diff --git a/.travis.yml b/.travis.yml
index 1ed9d06..ffd785e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -183,24 +183,25 @@
 
     # 5/ OSX Clang Builds
     - os: osx
-      osx_image: xcode8
-      compiler: clang
-      env: COMPILER='clang++'
-
-    - os: osx
-      osx_image: xcode9
-      compiler: clang
-      env: COMPILER='clang++'
-
-    - os: osx
-      osx_image: xcode9.1
-      compiler: clang
-      env: COMPILER='clang++'
-
-    - os: osx
-      osx_image: xcode9.1
+      osx_image: xcode9.4
       compiler: clang
       env: COMPILER='clang++' CPP14=1
+
+    - os: osx
+      osx_image: xcode10.3
+      compiler: clang
+      env: COMPILER='clang++' CPP14=1
+
+    - os: osx
+      osx_image: xcode11.2
+      compiler: clang
+      env: COMPILER='clang++' CPP14=1
+
+    - os: osx
+      osx_image: xcode11.2
+      compiler: clang
+      env: COMPILER='clang++' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
+
 
     # 6/ Special builds -- examples, coverage, valgrind, etc.
     - os: linux
@@ -228,11 +229,6 @@
           sources: *all_sources
           packages: ['valgrind', 'lcov', 'g++-7']
       env: COMPILER='g++-7' CPP14=1 VALGRIND=1
-
-    - os: osx
-      osx_image: xcode9.1
-      compiler: clang
-      env: COMPILER='clang++' CPP14=1 EXAMPLES=1 COVERAGE=1 EXTRAS=1
 
     # 7/ C++17 builds
     - os: linux
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 643c73c..4101f73 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -33,16 +33,6 @@
 argument, the stream to which the colour code should be applied.
 
 
-### Type erasure in the `PredicateMatcher`
-
-Currently, the `PredicateMatcher` uses `std::function` for type erasure,
-so that type of the matcher is always `PredicateMatcher<T>`, regardless
-of the type of the predicate. Because of the high compilation overhead
-of `std::function`, and the fact that the type erasure is used only rarely,
-`PredicateMatcher` will no longer be type erased in the future. Instead,
-the predicate type will be made part of the PredicateMatcher's type.
-
-
 ---
 
 [Home](Readme.md#top)
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 4d0527a..c9bc2f7 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -44,7 +44,8 @@
   * If the second argument has text outside tags, the text will be ignored.
 * Hidden test cases are no longer included just because they don't match an exclusion tag
   * Previously, a `TEST_CASE("A", "[.foo]")` would be included by asking for `~[bar]`.
-
+* `PredicateMatcher` is no longer type erased.
+  * This means that the type of the provided predicate is part of the `PredicateMatcher`'s type
 
 
 ### Fixes
diff --git a/include/internal/catch_generators.hpp b/include/internal/catch_generators.hpp
index ea575c8..fd49169 100644
--- a/include/internal/catch_generators.hpp
+++ b/include/internal/catch_generators.hpp
@@ -14,7 +14,7 @@
 #include <memory>
 #include <vector>
 #include <cassert>
-
+#include <tuple>
 #include <utility>
 #include <exception>
 
diff --git a/include/internal/catch_matchers_generic.hpp b/include/internal/catch_matchers_generic.hpp
index 7d57c9d..eaef548 100644
--- a/include/internal/catch_matchers_generic.hpp
+++ b/include/internal/catch_matchers_generic.hpp
@@ -9,9 +9,10 @@
 
 #include "catch_common.h"
 #include "catch_matchers.h"
+#include "catch_meta.hpp"
 
-#include <functional>
 #include <string>
+#include <utility>
 
 namespace Catch {
 namespace Matchers {
@@ -21,14 +22,14 @@
     std::string finalizeDescription(const std::string& desc);
 }
 
-template <typename T>
+template <typename T, typename Predicate>
 class PredicateMatcher : public MatcherBase<T> {
-    std::function<bool(T const&)> m_predicate;
+    Predicate m_predicate;
     std::string m_description;
 public:
 
-    PredicateMatcher(std::function<bool(T const&)> const& elem, std::string const& descr)
-        :m_predicate(std::move(elem)),
+    PredicateMatcher(Predicate&& elem, std::string const& descr)
+        :m_predicate(std::forward<Predicate>(elem)),
         m_description(Detail::finalizeDescription(descr))
     {}
 
@@ -47,9 +48,11 @@
     // The user has to explicitly specify type to the function, because
     // inferring std::function<bool(T const&)> is hard (but possible) and
     // requires a lot of TMP.
-    template<typename T>
-    Generic::PredicateMatcher<T> Predicate(std::function<bool(T const&)> const& predicate, std::string const& description = "") {
-        return Generic::PredicateMatcher<T>(predicate, description);
+    template<typename T, typename Pred>
+    Generic::PredicateMatcher<T, Pred> Predicate(Pred&& predicate, std::string const& description = "") {
+        static_assert(is_callable<Pred(T)>::value, "Predicate not callable with argument T");
+        static_assert(std::is_same<bool, FunctionReturnType<Pred, T>>::value, "Predicate does not return bool");
+        return Generic::PredicateMatcher<T, Pred>(std::forward<Pred>(predicate), description);
     }
 
 } // namespace Matchers
diff --git a/.travis.yml b/.travis.yml
index 0fe2abb..1ed9d06 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -82,14 +82,6 @@
       compiler: gcc
       addons:
         apt:
-         sources: *all_sources
-         packages: ['g++-4.8']
-      env: COMPILER='g++-4.8'
-
-    - os: linux
-      compiler: gcc
-      addons:
-        apt:
           sources: *all_sources
           packages: ['g++-4.9']
       env: COMPILER='g++-4.9'
@@ -190,11 +182,6 @@
       env: COMPILER='g++-8' CPP14=1
 
     # 5/ OSX Clang Builds
-    - os: osx
-      osx_image: xcode7.3
-      compiler: clang
-      env: COMPILER='clang++'
-
     - os: osx
       osx_image: xcode8
       compiler: clang
diff --git a/appveyor.yml b/appveyor.yml
index 53f5b39..e656ca9 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -7,7 +7,6 @@
 
 os:
   - Visual Studio 2017
-  - Visual Studio 2015
 
 environment:
     matrix:
@@ -34,18 +33,9 @@
 
 matrix:
     exclude:
-        - os: Visual Studio 2015
-          additional_flags: "/permissive- /std:c++latest"
-
-        - os: Visual Studio 2015
-          additional_flags: "/D_UNICODE /DUNICODE"
-
         # Exclude unwanted coverage configurations
         - coverage: 1
           platform: Win32
-
-        - coverage: 1
-          os: Visual Studio 2015
 
         - coverage: 1
           configuration: Release
@@ -53,9 +43,6 @@
         # Exclude unwanted examples configurations
         - examples: 1
           platform: Win32
-
-        - examples: 1
-          os: Visual Studio 2015
 
         - examples: 1
           configuration: Release
diff --git a/include/reporters/catch_reporter_automake.hpp b/include/reporters/catch_reporter_automake.hpp
index dbebe97..d7719a1 100644
--- a/include/reporters/catch_reporter_automake.hpp
+++ b/include/reporters/catch_reporter_automake.hpp
@@ -16,7 +16,7 @@
 
 namespace Catch {
 
-    struct AutomakeReporter : StreamingReporterBase<AutomakeReporter> {
+    struct AutomakeReporter : StreamingReporterBase {
         AutomakeReporter( ReporterConfig const& _config )
           :   StreamingReporterBase( _config )
         {}
diff --git a/include/reporters/catch_reporter_bases.cpp b/include/reporters/catch_reporter_bases.cpp
index ae704ab..7942728 100644
--- a/include/reporters/catch_reporter_bases.cpp
+++ b/include/reporters/catch_reporter_bases.cpp
@@ -66,4 +66,7 @@
     }
 
 
+    StreamingReporterBase::~StreamingReporterBase() = default;
+    CumulativeReporterBase::~CumulativeReporterBase() = default;
+
 } // end namespace Catch
diff --git a/include/reporters/catch_reporter_bases.hpp b/include/reporters/catch_reporter_bases.hpp
index a0ff487..54a3a77 100644
--- a/include/reporters/catch_reporter_bases.hpp
+++ b/include/reporters/catch_reporter_bases.hpp
@@ -27,7 +27,6 @@
 
     std::string serializeFilters( std::vector<std::string> const& container );
 
-    template<typename DerivedT>
     struct StreamingReporterBase : IStreamingReporter {
 
         StreamingReporterBase( ReporterConfig const& _config )
@@ -41,7 +40,7 @@
             return m_reporterPrefs;
         }
 
-        ~StreamingReporterBase() override = default;
+        ~StreamingReporterBase() override;
 
         void noMatchingTestCases(std::string const&) override {}
 
@@ -93,7 +92,6 @@
         ReporterPreferences m_reporterPrefs;
     };
 
-    template<typename DerivedT>
     struct CumulativeReporterBase : IStreamingReporter {
         template<typename T, typename ChildNodeT>
         struct Node {
@@ -106,7 +104,6 @@
         };
         struct SectionNode {
             explicit SectionNode(SectionStats const& _stats) : stats(_stats) {}
-            virtual ~SectionNode() = default;
 
             bool operator == (SectionNode const& other) const {
                 return stats.sectionInfo.lineInfo == other.stats.sectionInfo.lineInfo;
@@ -148,7 +145,7 @@
         {
             m_reporterPrefs.shouldRedirectStdOut = false;
         }
-        ~CumulativeReporterBase() override = default;
+        ~CumulativeReporterBase() override;
 
         ReporterPreferences getPreferences() const override {
             return m_reporterPrefs;
@@ -256,7 +253,7 @@
     }
 
 
-    struct TestEventListenerBase : StreamingReporterBase<TestEventListenerBase> {
+    struct TestEventListenerBase : StreamingReporterBase {
         TestEventListenerBase( ReporterConfig const& _config );
 
         void assertionStarting(AssertionInfo const&) override;
diff --git a/include/reporters/catch_reporter_compact.h b/include/reporters/catch_reporter_compact.h
index 5002df7..b172507 100644
--- a/include/reporters/catch_reporter_compact.h
+++ b/include/reporters/catch_reporter_compact.h
@@ -14,7 +14,7 @@
 
 namespace Catch {
 
-    struct CompactReporter : StreamingReporterBase<CompactReporter> {
+    struct CompactReporter : StreamingReporterBase {
 
         using StreamingReporterBase::StreamingReporterBase;
 
diff --git a/include/reporters/catch_reporter_console.h b/include/reporters/catch_reporter_console.h
index 43024da..e952daf 100644
--- a/include/reporters/catch_reporter_console.h
+++ b/include/reporters/catch_reporter_console.h
@@ -23,7 +23,7 @@
     struct SummaryColumn;
     class TablePrinter;
 
-    struct ConsoleReporter : StreamingReporterBase<ConsoleReporter> {
+    struct ConsoleReporter : StreamingReporterBase {
         std::unique_ptr<TablePrinter> m_tablePrinter;
 
         ConsoleReporter(ReporterConfig const& config);
diff --git a/include/reporters/catch_reporter_junit.h b/include/reporters/catch_reporter_junit.h
index 5ee3a57..c7657d1 100644
--- a/include/reporters/catch_reporter_junit.h
+++ b/include/reporters/catch_reporter_junit.h
@@ -14,7 +14,7 @@
 
 namespace Catch {
 
-    class JunitReporter : public CumulativeReporterBase<JunitReporter> {
+    class JunitReporter : public CumulativeReporterBase {
     public:
         JunitReporter(ReporterConfig const& _config);
 
diff --git a/include/reporters/catch_reporter_sonarqube.hpp b/include/reporters/catch_reporter_sonarqube.hpp
index bf7d929..9a4e760 100644
--- a/include/reporters/catch_reporter_sonarqube.hpp
+++ b/include/reporters/catch_reporter_sonarqube.hpp
@@ -19,7 +19,7 @@
 
 namespace Catch {
 
-    struct SonarQubeReporter : CumulativeReporterBase<SonarQubeReporter> {
+    struct SonarQubeReporter : CumulativeReporterBase {
 
         SonarQubeReporter(ReporterConfig const& config)
         : CumulativeReporterBase(config)
diff --git a/include/reporters/catch_reporter_tap.hpp b/include/reporters/catch_reporter_tap.hpp
index 1bfe4f5..2e026fd 100644
--- a/include/reporters/catch_reporter_tap.hpp
+++ b/include/reporters/catch_reporter_tap.hpp
@@ -19,7 +19,7 @@
 
 namespace Catch {
 
-    struct TAPReporter : StreamingReporterBase<TAPReporter> {
+    struct TAPReporter : StreamingReporterBase {
 
         using StreamingReporterBase::StreamingReporterBase;
 
diff --git a/include/reporters/catch_reporter_teamcity.hpp b/include/reporters/catch_reporter_teamcity.hpp
index 47b7e4a..cdcc442 100644
--- a/include/reporters/catch_reporter_teamcity.hpp
+++ b/include/reporters/catch_reporter_teamcity.hpp
@@ -23,7 +23,7 @@
 
 namespace Catch {
 
-    struct TeamCityReporter : StreamingReporterBase<TeamCityReporter> {
+    struct TeamCityReporter : StreamingReporterBase {
         TeamCityReporter( ReporterConfig const& _config )
         :   StreamingReporterBase( _config )
         {
diff --git a/include/reporters/catch_reporter_xml.h b/include/reporters/catch_reporter_xml.h
index 0013d2e..3edb014 100644
--- a/include/reporters/catch_reporter_xml.h
+++ b/include/reporters/catch_reporter_xml.h
@@ -14,7 +14,7 @@
 
 
 namespace Catch {
-    class XmlReporter : public StreamingReporterBase<XmlReporter> {
+    class XmlReporter : public StreamingReporterBase {
     public:
         XmlReporter(ReporterConfig const& _config);
 
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 2cf7727..643c73c 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -27,20 +27,6 @@
 making the `else` actually useful.
 
 
-### Change semantics of `[.]` and tag exclusion
-
-Currently, given these 2 tests
-```cpp
-TEST_CASE("A", "[.][foo]") {}
-TEST_CASE("B", "[.][bar]") {}
-```
-specifying `[foo]` as the testspec will run test "A" and specifying
-`~[foo]` will run test "B", even though it is hidden. Also, specifying
-`~[baz]` will run both tests. This behaviour is often surprising and will
-be changed so that hidden tests are included in a run only if they
-positively match a testspec.
-
-
 ### Console Colour API
 
 The API for Catch2's console colour will be changed to take an extra
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 8be1bbd..4d0527a 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -42,6 +42,10 @@
   * XmlReporter outputs a machine-parseable XML
 * `TEST_CASE` description support has been removed
   * If the second argument has text outside tags, the text will be ignored.
+* Hidden test cases are no longer included just because they don't match an exclusion tag
+  * Previously, a `TEST_CASE("A", "[.foo]")` would be included by asking for `~[bar]`.
+
+
 
 ### Fixes
 * The `INFO` macro no longer contains superfluous semicolon (#1456)
diff --git a/include/internal/catch_test_spec.cpp b/include/internal/catch_test_spec.cpp
index 65d34d0..4610c1a 100644
--- a/include/internal/catch_test_spec.cpp
+++ b/include/internal/catch_test_spec.cpp
@@ -48,25 +48,30 @@
                          m_tag) != end(testCase.lcaseTags);
     }
 
-
-    TestSpec::ExcludedPattern::ExcludedPattern( PatternPtr const& underlyingPattern )
-    : Pattern( underlyingPattern->name() )
-    , m_underlyingPattern( underlyingPattern )
-    {}
-
-    bool TestSpec::ExcludedPattern::matches( TestCaseInfo const& testCase ) const {
-        return !m_underlyingPattern->matches( testCase );
-    }
-
-
     bool TestSpec::Filter::matches( TestCaseInfo const& testCase ) const {
-        return std::all_of( m_patterns.begin(), m_patterns.end(), [&]( PatternPtr const& p ){ return p->matches( testCase ); } );
+        bool should_use = !testCase.isHidden();
+        for (auto const& pattern : m_required) {
+            should_use = true;
+            if (!pattern->matches(testCase)) {
+                return false;
+            }
+        }
+        for (auto const& pattern : m_forbidden) {
+            if (pattern->matches(testCase)) {
+                return false;
+            }
+        }
+        return should_use;
     }
 
     std::string TestSpec::Filter::name() const {
         std::string name;
-        for( auto const& p : m_patterns )
+        for (auto const& p : m_required) {
             name += p->name();
+        }
+        for (auto const& p : m_forbidden) {
+            name += p->name();
+        }
         return name;
     }
 
@@ -91,7 +96,7 @@
         } );
         return matches;
     }
-    
+
     const TestSpec::vectorStrings& TestSpec::getInvalidArgs() const{
         return  (m_invalidArgs);
     }
diff --git a/include/internal/catch_test_spec.h b/include/internal/catch_test_spec.h
index 2e54646..7196b7c 100644
--- a/include/internal/catch_test_spec.h
+++ b/include/internal/catch_test_spec.h
@@ -52,16 +52,9 @@
             std::string m_tag;
         };
 
-        class ExcludedPattern : public Pattern {
-        public:
-            explicit ExcludedPattern( PatternPtr const& underlyingPattern );
-            bool matches( TestCaseInfo const& testCase ) const override;
-        private:
-            PatternPtr m_underlyingPattern;
-        };
-
         struct Filter {
-            std::vector<PatternPtr> m_patterns;
+            std::vector<PatternPtr> m_required;
+            std::vector<PatternPtr> m_forbidden;
 
             bool matches( TestCaseInfo const& testCase ) const;
             std::string name() const;
diff --git a/include/internal/catch_test_spec_parser.cpp b/include/internal/catch_test_spec_parser.cpp
index b872b19..dac9b58 100644
--- a/include/internal/catch_test_spec_parser.cpp
+++ b/include/internal/catch_test_spec_parser.cpp
@@ -147,7 +147,7 @@
     }
 
     void TestSpecParser::addFilter() {
-        if( !m_currentFilter.m_patterns.empty() ) {
+        if( !m_currentFilter.m_required.empty() || !m_currentFilter.m_forbidden.empty() ) {
             m_testSpec.m_filters.push_back( m_currentFilter );
             m_currentFilter = TestSpec::Filter();
         }
diff --git a/include/internal/catch_test_spec_parser.h b/include/internal/catch_test_spec_parser.h
index 179d353..0588237 100644
--- a/include/internal/catch_test_spec_parser.h
+++ b/include/internal/catch_test_spec_parser.h
@@ -53,7 +53,7 @@
         void revertBackToLastMode();
         void addFilter();
         bool separate();
-        
+
         template<typename T>
         void addPattern() {
             std::string token = m_patternName;
@@ -66,22 +66,24 @@
             }
             if( !token.empty() ) {
                 TestSpec::PatternPtr pattern = std::make_shared<T>( token, m_substring );
-                if( m_exclusion )
-                    pattern = std::make_shared<TestSpec::ExcludedPattern>( pattern );
-                m_currentFilter.m_patterns.push_back( pattern );
+                if (m_exclusion) {
+                    m_currentFilter.m_forbidden.push_back(pattern);
+                } else {
+                    m_currentFilter.m_required.push_back(pattern);
+                }
             }
             m_substring.clear();
             m_patternName.clear();
             m_exclusion = false;
             m_mode = None;
         }
-        
+
         inline void addCharToPattern(char c) {
             m_substring += c;
             m_patternName += c;
             m_realPatternPos++;
         }
-        
+
     };
     TestSpec parseTestSpec( std::string const& arg );
 
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index 6d06870..729edd2 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -455,6 +455,9 @@
 add_test(NAME EscapeSpecialCharactersInTestNames COMMAND $<TARGET_FILE:SelfTest> "Test with special\\, characters \"in name")
 set_tests_properties(EscapeSpecialCharactersInTestNames PROPERTIES PASS_REGULAR_EXPRESSION "1 assertion in 1 test case")
 
+add_test(NAME NegativeSpecNoHiddenTests COMMAND $<TARGET_FILE:SelfTest> --list-tests ~[approval])
+set_tests_properties(NegativeSpecNoHiddenTests PROPERTIES FAIL_REGULAR_EXPRESSION "\\[\\.\\]")
+
 add_test(NAME TestsInFile::SimpleSpecs COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/plain-old-tests.input")
 set_tests_properties(TestsInFile::SimpleSpecs PROPERTIES PASS_REGULAR_EXPRESSION "6 assertions in 2 test cases")
 
diff --git a/projects/SelfTest/Baselines/compact.sw.approved.txt b/projects/SelfTest/Baselines/compact.sw.approved.txt
index a65f15a..bf3d16c 100644
--- a/projects/SelfTest/Baselines/compact.sw.approved.txt
+++ b/projects/SelfTest/Baselines/compact.sw.approved.txt
@@ -962,7 +962,7 @@
 CmdLine.tests.cpp:<line number>: passed: spec.hasFilters() == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcA ) == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcB ) == false for: false == false
-CmdLine.tests.cpp:<line number>: passed: spec.matches( tcC ) == true for: true == true
+CmdLine.tests.cpp:<line number>: passed: spec.matches( tcC ) == false for: false == false
 CmdLine.tests.cpp:<line number>: passed: spec.hasFilters() == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcA ) == false for: false == false
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcB ) == true for: true == true
@@ -980,7 +980,7 @@
 CmdLine.tests.cpp:<line number>: passed: spec.hasFilters() == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcA ) == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcB ) == false for: false == false
-CmdLine.tests.cpp:<line number>: passed: spec.matches( tcC ) == true for: true == true
+CmdLine.tests.cpp:<line number>: passed: spec.matches( tcC ) == false for: false == false
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcD ) == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.hasFilters() == true for: true == true
 CmdLine.tests.cpp:<line number>: passed: spec.matches( tcA ) == true for: true == true
diff --git a/projects/SelfTest/Baselines/console.std.approved.txt b/projects/SelfTest/Baselines/console.std.approved.txt
index d43063f..2fb24b6 100644
--- a/projects/SelfTest/Baselines/console.std.approved.txt
+++ b/projects/SelfTest/Baselines/console.std.approved.txt
@@ -1,4 +1,4 @@
-Filters: ~[!nonportable]~[!benchmark]~[approvals]
+Filters: ~[!nonportable]~[!benchmark]~[approvals] *
 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 <exe-name> is a <version> host application.
diff --git a/projects/SelfTest/Baselines/console.sw.approved.txt b/projects/SelfTest/Baselines/console.sw.approved.txt
index d321bd9..b7167e9 100644
--- a/projects/SelfTest/Baselines/console.sw.approved.txt
+++ b/projects/SelfTest/Baselines/console.sw.approved.txt
@@ -1,4 +1,4 @@
-Filters: ~[!nonportable]~[!benchmark]~[approvals]
+Filters: ~[!nonportable]~[!benchmark]~[approvals] *
 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 <exe-name> is a <version> host application.
@@ -6946,9 +6946,9 @@
   false == false
 
 CmdLine.tests.cpp:<line number>: PASSED:
-  CHECK( spec.matches( tcC ) == true )
+  CHECK( spec.matches( tcC ) == false )
 with expansion:
-  true == true
+  false == false
 
 -------------------------------------------------------------------------------
 Parse test names and tags
@@ -7064,9 +7064,9 @@
   false == false
 
 CmdLine.tests.cpp:<line number>: PASSED:
-  CHECK( spec.matches( tcC ) == true )
+  CHECK( spec.matches( tcC ) == false )
 with expansion:
-  true == true
+  false == false
 
 CmdLine.tests.cpp:<line number>: PASSED:
   CHECK( spec.matches( tcD ) == true )
diff --git a/projects/SelfTest/Baselines/console.swa4.approved.txt b/projects/SelfTest/Baselines/console.swa4.approved.txt
index 322b815..0c1ab7b 100644
--- a/projects/SelfTest/Baselines/console.swa4.approved.txt
+++ b/projects/SelfTest/Baselines/console.swa4.approved.txt
@@ -1,4 +1,4 @@
-Filters: ~[!nonportable]~[!benchmark]~[approvals]
+Filters: ~[!nonportable]~[!benchmark]~[approvals] *
 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 <exe-name> is a <version> host application.
diff --git a/projects/SelfTest/Baselines/junit.sw.approved.txt b/projects/SelfTest/Baselines/junit.sw.approved.txt
index 588c3a2..814d05e 100644
--- a/projects/SelfTest/Baselines/junit.sw.approved.txt
+++ b/projects/SelfTest/Baselines/junit.sw.approved.txt
@@ -3,7 +3,7 @@
 >
   <testsuite name="<exe-name>" errors="17" failures="132" tests="1713" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
     <properties>
-      <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals]"/>
+      <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals] *"/>
       <property name="random-seed" value="1"/>
     </properties>
     <testcase classname="<exe-name>.global" name="# A test name that starts with a #" time="{duration}"/>
diff --git a/projects/SelfTest/Baselines/xml.sw.approved.txt b/projects/SelfTest/Baselines/xml.sw.approved.txt
index 3564025..8c95f95 100644
--- a/projects/SelfTest/Baselines/xml.sw.approved.txt
+++ b/projects/SelfTest/Baselines/xml.sw.approved.txt
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<Catch name="<exe-name>" filters="~[!nonportable]~[!benchmark]~[approvals]">
+<Catch name="<exe-name>" filters="~[!nonportable]~[!benchmark]~[approvals] *">
   <Randomness seed="1"/>
   <Group name="<exe-name>">
     <TestCase name="# A test name that starts with a #" filename="projects/<exe-name>/UsageTests/Misc.tests.cpp" >
@@ -8720,10 +8720,10 @@
         </Expression>
         <Expression success="true" type="CHECK" filename="projects/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
           <Original>
-            spec.matches( tcC ) == true
+            spec.matches( tcC ) == false
           </Original>
           <Expanded>
-            true == true
+            false == false
           </Expanded>
         </Expression>
         <OverallResults successes="4" failures="0" expectedFailures="0"/>
@@ -8876,10 +8876,10 @@
         </Expression>
         <Expression success="true" type="CHECK" filename="projects/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
           <Original>
-            spec.matches( tcC ) == true
+            spec.matches( tcC ) == false
           </Original>
           <Expanded>
-            true == true
+            false == false
           </Expanded>
         </Expression>
         <Expression success="true" type="CHECK" filename="projects/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp" >
diff --git a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp
index 60eb97a..8fccc0a 100644
--- a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp
+++ b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp
@@ -173,7 +173,7 @@
         CHECK( spec.hasFilters() == true );
         CHECK( spec.matches( tcA ) == true );
         CHECK( spec.matches( tcB ) == false );
-        CHECK( spec.matches( tcC ) == true );
+        CHECK( spec.matches( tcC ) == false );
     }
     SECTION( "One tag exclusion and one tag inclusion" ) {
         TestSpec spec = parseTestSpec( "~[two][x]" );
@@ -203,7 +203,7 @@
         CHECK( spec.hasFilters() == true );
         CHECK( spec.matches( tcA ) == true );
         CHECK( spec.matches( tcB ) == false );
-        CHECK( spec.matches( tcC ) == true );
+        CHECK( spec.matches( tcC ) == false );
         CHECK( spec.matches( tcD ) == true );
     }
     SECTION( "wildcarded name exclusion" ) {
@@ -486,7 +486,7 @@
 
             REQUIRE(config.benchmarkSamples == 200);
         }
-        
+
         SECTION("resamples") {
             CHECK(cli.parse({ "test", "--benchmark-resamples=20000" }));
 
diff --git a/scripts/approvalTests.py b/scripts/approvalTests.py
index dad2a96..e485817 100755
--- a/scripts/approvalTests.py
+++ b/scripts/approvalTests.py
@@ -195,19 +195,20 @@
 
 # ## Keep default reporters here ##
 # Standard console reporter
-approve("console.std", ["~[!nonportable]~[!benchmark]~[approvals]", "--order", "lex", "--rng-seed", "1"])
+approve("console.std", ["~[!nonportable]~[!benchmark]~[approvals] *", "--order", "lex", "--rng-seed", "1"])
 # console reporter, include passes, warn about No Assertions
-approve("console.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "--order", "lex", "--rng-seed", "1"])
+approve("console.sw", ["~[!nonportable]~[!benchmark]~[approvals] *", "-s", "-w", "NoAssertions", "--order", "lex", "--rng-seed", "1"])
 # console reporter, include passes, warn about No Assertions, limit failures to first 4
-approve("console.swa4", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-x", "4", "--order", "lex", "--rng-seed", "1"])
+approve("console.swa4", ["~[!nonportable]~[!benchmark]~[approvals] *", "-s", "-w", "NoAssertions", "-x", "4", "--order", "lex", "--rng-seed", "1"])
 # junit reporter, include passes, warn about No Assertions
-approve("junit.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-r", "junit", "--order", "lex", "--rng-seed", "1"])
+approve("junit.sw", ["~[!nonportable]~[!benchmark]~[approvals] *", "-s", "-w", "NoAssertions", "-r", "junit", "--order", "lex", "--rng-seed", "1"])
 # xml reporter, include passes, warn about No Assertions
-approve("xml.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-r", "xml", "--order", "lex", "--rng-seed", "1"])
+approve("xml.sw", ["~[!nonportable]~[!benchmark]~[approvals] *", "-s", "-w", "NoAssertions", "-r", "xml", "--order", "lex", "--rng-seed", "1"])
 # compact reporter, include passes, warn about No Assertions
-approve('compact.sw', ['~[!nonportable]~[!benchmark]~[approvals]', '-s', '-w', 'NoAssertions', '-r', 'compact', '--order', 'lex', "--rng-seed", "1"])
+approve('compact.sw', ['~[!nonportable]~[!benchmark]~[approvals] *', '-s', '-w', 'NoAssertions', '-r', 'compact', '--order', 'lex', "--rng-seed", "1"])
 # sonarqube reporter, include passes, warn about No Assertions
-approve("sonarqube.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-r", "sonarqube", "--order", "lex", "--rng-seed", "1"])
+approve("sonarqube.sw", ["~[!nonportable]~[!benchmark]~[approvals] *", "-s", "-w", "NoAssertions", "-r", "sonarqube", "--order", "lex", "--rng-seed", "1"])
+
 
 if overallResult != 0:
     print("If these differences are expected, run approve.py to approve new baselines.")
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 8dbb395..2cf7727 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -11,16 +11,6 @@
 
 ## Deprecations
 
-### Secondary description amongst tags
-
-Currently, the tags part of `TEST_CASE` (and others) macro can also
-contain text that is not part of tags. This text is then separated into
-a "description" of the test case, but the description is then never used
-apart from writing it out for `--list-tests -v high`.
-
-Because it isn't actually used nor documented, and brings complications
-to Catch2's internals, description support will be removed.
-
 ### SourceLineInfo::empty()
 
 There should be no reason to ever have an empty `SourceLineInfo`, so the
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 08c8a71..8be1bbd 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -40,6 +40,8 @@
 * `--list*` commands are now piped through the reporters
   * The top-level reporter interface provides default implementation that works just as the old one
   * XmlReporter outputs a machine-parseable XML
+* `TEST_CASE` description support has been removed
+  * If the second argument has text outside tags, the text will be ignored.
 
 ### Fixes
 * The `INFO` macro no longer contains superfluous semicolon (#1456)
diff --git a/examples/210-Evt-EventListeners.cpp b/examples/210-Evt-EventListeners.cpp
index 2d5fdb2..c4f8090 100644
--- a/examples/210-Evt-EventListeners.cpp
+++ b/examples/210-Evt-EventListeners.cpp
@@ -139,7 +139,6 @@
 //
 //     std::string name;
 //     std::string className;
-//     std::string description;
 //     std::vector<std::string> tags;
 //     std::vector<std::string> lcaseTags;
 //     SourceLineInfo lineInfo;
@@ -155,7 +154,6 @@
        << ws(level+1) << "- tagsAsString(): '"  << info.tagsAsString() << "'\n"
        << ws(level+1) << "- name: '"            << info.name << "'\n"
        << ws(level+1) << "- className: '"       << info.className << "'\n"
-       << ws(level+1) << "- description: '"     << info.description << "'\n"
        << ws(level+1) << "- tags: "             << info.tags << "\n"
        << ws(level+1) << "- lcaseTags: "        << info.lcaseTags << "\n";
     print( os, level+1 , "- lineInfo", info.lineInfo );
diff --git a/include/internal/catch_interfaces_reporter.cpp b/include/internal/catch_interfaces_reporter.cpp
index 664dd3e..e3dc6a4 100644
--- a/include/internal/catch_interfaces_reporter.cpp
+++ b/include/internal/catch_interfaces_reporter.cpp
@@ -157,10 +157,6 @@
             Catch::cout() << Column(testCaseInfo.name).initialIndent(2).indent(4) << '\n';
             if (config.verbosity() >= Verbosity::High) {
                 Catch::cout() << Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;
-                std::string description = testCaseInfo.description;
-                if (description.empty())
-                    description = "(NO DESCRIPTION)";
-                Catch::cout() << Column(description).indent(4) << std::endl;
             }
             if (!testCaseInfo.tags.empty() && config.verbosity() > Verbosity::Quiet) {
                 Catch::cout() << Column(testCaseInfo.tagsAsString()).indent(6) << '\n';
diff --git a/include/internal/catch_test_case_info.cpp b/include/internal/catch_test_case_info.cpp
index 685ee30..f9c22c8 100644
--- a/include/internal/catch_test_case_info.cpp
+++ b/include/internal/catch_test_case_info.cpp
@@ -57,16 +57,14 @@
 
         // Parse out tags
         std::vector<std::string> tags;
-        std::string desc, tag;
+        std::string tag;
         bool inTag = false;
         for (char c : nameAndTags.tags) {
             if( !inTag ) {
-                if( c == '[' )
+                if (c == '[') {
                     inTag = true;
-                else
-                    desc += c;
-            }
-            else {
+                }
+            } else {
                 if( c == ']' ) {
                     TestCaseInfo::SpecialProperties prop = parseSpecialTag( tag );
                     if( ( prop & TestCaseInfo::IsHidden ) != 0 )
@@ -92,7 +90,7 @@
             tags.push_back( "." );
         }
 
-        TestCaseInfo info( static_cast<std::string>(nameAndTags.name), _className, desc, tags, _lineInfo );
+        TestCaseInfo info( static_cast<std::string>(nameAndTags.name), _className, tags, _lineInfo );
         return TestCase( _testCase, std::move(info) );
     }
 
@@ -111,12 +109,10 @@
 
     TestCaseInfo::TestCaseInfo( std::string const& _name,
                                 std::string const& _className,
-                                std::string const& _description,
                                 std::vector<std::string> const& _tags,
                                 SourceLineInfo const& _lineInfo )
     :   name( _name ),
         className( _className ),
-        description( _description ),
         lineInfo( _lineInfo ),
         properties( None )
     {
diff --git a/include/internal/catch_test_case_info.h b/include/internal/catch_test_case_info.h
index 809c974..1ade26f 100644
--- a/include/internal/catch_test_case_info.h
+++ b/include/internal/catch_test_case_info.h
@@ -37,7 +37,6 @@
 
         TestCaseInfo(   std::string const& _name,
                         std::string const& _className,
-                        std::string const& _description,
                         std::vector<std::string> const& _tags,
                         SourceLineInfo const& _lineInfo );
 
@@ -52,7 +51,6 @@
 
         std::string name;
         std::string className;
-        std::string description;
         std::vector<std::string> tags;
         std::vector<std::string> lcaseTags;
         SourceLineInfo lineInfo;
diff --git a/include/reporters/catch_reporter_xml.cpp b/include/reporters/catch_reporter_xml.cpp
index 8e89eb8..186ce7d 100644
--- a/include/reporters/catch_reporter_xml.cpp
+++ b/include/reporters/catch_reporter_xml.cpp
@@ -73,7 +73,6 @@
         StreamingReporterBase::testCaseStarting(testInfo);
         m_xml.startElement( "TestCase" )
             .writeAttribute( "name", trim( testInfo.name ) )
-            .writeAttribute( "description", testInfo.description )
             .writeAttribute( "tags", testInfo.tagsAsString() );
 
         writeSourceInfo( testInfo.lineInfo );
@@ -288,9 +287,6 @@
                  .endElement(XmlFormatting::Newline);
             m_xml.startElement("ClassName", XmlFormatting::Indent)
                  .writeText(testInfo.className, XmlFormatting::None)
-                 .endElement(XmlFormatting::Newline);
-            m_xml.startElement("Description", XmlFormatting::Indent)
-                 .writeText(testInfo.description, XmlFormatting::None)
                  .endElement(XmlFormatting::Newline);
             m_xml.startElement("Tags", XmlFormatting::Indent)
                  .writeText(testInfo.tagsAsString(), XmlFormatting::None)
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 366d642..8dbb395 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -29,13 +29,6 @@
 
 ## Planned changes
 
-### Output format of `--list-*` command line parameters
-
-The various list operations will be piped through reporters. This means
-that e.g. XML reporter will write the output as machine-parseable XML,
-while the Console reporter will keep the current, human-oriented output.
-
-
 ### `CHECKED_IF` and `CHECKED_ELSE`
 
 To make the `CHECKED_IF` and `CHECKED_ELSE` macros more useful, they will
diff --git a/docs/release-notes.md b/docs/release-notes.md
index cb38951..08c8a71 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -37,6 +37,9 @@
 * `--list*` commands no longer have non-zero return code (#1410)
 * `--list-test-names-only` has been removed (#1190)
   * You should use verbosity-modifiers for `--list-tests` instead
+* `--list*` commands are now piped through the reporters
+  * The top-level reporter interface provides default implementation that works just as the old one
+  * XmlReporter outputs a machine-parseable XML
 
 ### Fixes
 * The `INFO` macro no longer contains superfluous semicolon (#1456)
diff --git a/include/reporters/catch_reporter_bases.hpp b/include/reporters/catch_reporter_bases.hpp
index 7bedd08..a0ff487 100644
--- a/include/reporters/catch_reporter_bases.hpp
+++ b/include/reporters/catch_reporter_bases.hpp
@@ -261,6 +261,11 @@
 
         void assertionStarting(AssertionInfo const&) override;
         bool assertionEnded(AssertionStats const&) override;
+
+        // Event listeners should not use the default listing impl
+        void listReporters(std::vector<ReporterDescription> const&, Config const&) override {}
+        void listTests(std::vector<TestCase> const&, Config const&) override {}
+        void listTags(std::vector<TagInfo> const&, Config const&) override {}
     };
 
 } // end namespace Catch
diff --git a/include/reporters/catch_reporter_listening.cpp b/include/reporters/catch_reporter_listening.cpp
index 32ee54a..2f43b97 100644
--- a/include/reporters/catch_reporter_listening.cpp
+++ b/include/reporters/catch_reporter_listening.cpp
@@ -36,13 +36,13 @@
         }
         m_reporter->noMatchingTestCases( spec );
     }
-    
+
     void ListeningReporter::reportInvalidArguments(std::string const&arg){
         for ( auto const& listener : m_listeners ) {
             listener->reportInvalidArguments( arg );
         }
         m_reporter->reportInvalidArguments( arg );
-    }    
+    }
 
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
     void ListeningReporter::benchmarkPreparing( std::string const& name ) {
@@ -156,4 +156,25 @@
         return true;
     }
 
-} // end namespace Catch
\ No newline at end of file
+    void ListeningReporter::listReporters(std::vector<ReporterDescription> const& descriptions, Config const& config) {
+        for (auto const& listener : m_listeners) {
+            listener->listReporters(descriptions, config);
+        }
+        m_reporter->listReporters(descriptions, config);
+    }
+
+    void ListeningReporter::listTests(std::vector<TestCase> const& tests, Config const& config) {
+        for (auto const& listener : m_listeners) {
+            listener->listTests(tests, config);
+        }
+        m_reporter->listTests(tests, config);
+    }
+
+    void ListeningReporter::listTags(std::vector<TagInfo> const& tags, Config const& config) {
+        for (auto const& listener : m_listeners) {
+            listener->listTags(tags, config);
+        }
+        m_reporter->listTags(tags, config);
+    }
+
+} // end namespace Catch
diff --git a/include/reporters/catch_reporter_listening.h b/include/reporters/catch_reporter_listening.h
index 7fbd7af..027f66d 100644
--- a/include/reporters/catch_reporter_listening.h
+++ b/include/reporters/catch_reporter_listening.h
@@ -54,6 +54,11 @@
         void skipTest( TestCaseInfo const& testInfo ) override;
         bool isMulti() const override;
 
+        void listReporters(std::vector<ReporterDescription> const& descriptions, Config const& config) override;
+        void listTests(std::vector<TestCase> const& tests, Config const& config) override;
+        void listTags(std::vector<TagInfo> const& tags, Config const& config) override;
+
+
     };
 
 } // end namespace Catch
diff --git a/include/reporters/catch_reporter_xml.cpp b/include/reporters/catch_reporter_xml.cpp
index e110317..8e89eb8 100644
--- a/include/reporters/catch_reporter_xml.cpp
+++ b/include/reporters/catch_reporter_xml.cpp
@@ -10,6 +10,7 @@
 
 #include "../internal/catch_capture.hpp"
 #include "../internal/catch_reporter_registrars.hpp"
+#include "../internal/catch_list.h"
 
 #if defined(_MSC_VER)
 #pragma warning(push)
@@ -264,6 +265,64 @@
     }
 #endif // CATCH_CONFIG_ENABLE_BENCHMARKING
 
+    void XmlReporter::listReporters(std::vector<ReporterDescription> const& descriptions, Config const&) {
+        auto outerTag = m_xml.scopedElement("AvailableReporters");
+        for (auto const& reporter : descriptions) {
+            auto inner = m_xml.scopedElement("Reporter");
+            m_xml.startElement("Name", XmlFormatting::Indent)
+                 .writeText(reporter.name, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            m_xml.startElement("Description", XmlFormatting::Indent)
+                 .writeText(reporter.description, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+        }
+    }
+
+    void XmlReporter::listTests(std::vector<TestCase> const& tests, Config const&) {
+        auto outerTag = m_xml.scopedElement("MatchingTests");
+        for (auto const& test : tests) {
+            auto innerTag = m_xml.scopedElement("TestCase");
+            auto const& testInfo = test.getTestCaseInfo();
+            m_xml.startElement("Name", XmlFormatting::Indent)
+                 .writeText(testInfo.name, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            m_xml.startElement("ClassName", XmlFormatting::Indent)
+                 .writeText(testInfo.className, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            m_xml.startElement("Description", XmlFormatting::Indent)
+                 .writeText(testInfo.description, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            m_xml.startElement("Tags", XmlFormatting::Indent)
+                 .writeText(testInfo.tagsAsString(), XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+
+            auto sourceTag = m_xml.scopedElement("SourceInfo");
+            m_xml.startElement("File", XmlFormatting::Indent)
+                 .writeText(testInfo.lineInfo.file, XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            m_xml.startElement("Line", XmlFormatting::Indent)
+                 .writeText(std::to_string(testInfo.lineInfo.line), XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+        }
+    }
+
+    void XmlReporter::listTags(std::vector<TagInfo> const& tags, Config const&) {
+        auto outerTag = m_xml.scopedElement("TagsFromMatchingTests");
+        for (auto const& tag : tags) {
+            auto innerTag = m_xml.scopedElement("Tag");
+            m_xml.startElement("Count", XmlFormatting::Indent)
+                 .writeText(std::to_string(tag.count), XmlFormatting::None)
+                 .endElement(XmlFormatting::Newline);
+            auto aliasTag = m_xml.scopedElement("Aliases");
+            for (auto const& alias : tag.spellings) {
+                m_xml.startElement("Alias", XmlFormatting::Indent)
+                     .writeText(alias, XmlFormatting::None)
+                     .endElement(XmlFormatting::Newline);
+            }
+        }
+    }
+
+
     CATCH_REGISTER_REPORTER( "xml", XmlReporter )
 
 } // end namespace Catch
diff --git a/include/reporters/catch_reporter_xml.h b/include/reporters/catch_reporter_xml.h
index 5b6ba31..0013d2e 100644
--- a/include/reporters/catch_reporter_xml.h
+++ b/include/reporters/catch_reporter_xml.h
@@ -57,6 +57,10 @@
         void benchmarkFailed(std::string const&) override;
 #endif // CATCH_CONFIG_ENABLE_BENCHMARKING
 
+        void listReporters(std::vector<ReporterDescription> const& descriptions, Config const& config) override;
+        void listTests(std::vector<TestCase> const& tests, Config const& config) override;
+        void listTags(std::vector<TagInfo> const& tags, Config const& config) override;
+
     private:
         Timer m_testCaseTimer;
         XmlWriter m_xml;
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index d3556ce..6d06870 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -385,16 +385,32 @@
     FAIL_REGULAR_EXPRESSION "Hidden Test"
 )
 add_test(NAME List::Tests::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-tests --verbosity high)
+add_test(NAME List::Tests::XmlOutput COMMAND $<TARGET_FILE:SelfTest> --list-tests --verbosity high -r xml)
+set_tests_properties(List::Tests::XmlOutput PROPERTIES
+    PASS_REGULAR_EXPRESSION "<Line>[0-9]+</Line>"
+    FAIL_REGULAR_EXPRESSION "[0-9]+ test cases"
+)
 
 add_test(NAME List::Tags::Output COMMAND $<TARGET_FILE:SelfTest> --list-tags)
 set_tests_properties(List::Tags::Output PROPERTIES
     PASS_REGULAR_EXPRESSION "[0-9]+ tags"
     FAIL_REGULAR_EXPRESSION "\\[\\.\\]")
 add_test(NAME List::Tags::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-tags)
+add_test(NAME List::Tags::XmlOutput COMMAND $<TARGET_FILE:SelfTest> --list-tags -r xml)
+set_tests_properties(List::Tags::XmlOutput PROPERTIES
+    PASS_REGULAR_EXPRESSION "<Count>18</Count>"
+    FAIL_REGULAR_EXPRESSION "[0-9]+ tags"
+)
+
 
 add_test(NAME List::Reporters::Output COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
 set_tests_properties(List::Reporters::Output PROPERTIES PASS_REGULAR_EXPRESSION "Available reporters:")
 add_test(NAME List::Reporters::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
+add_test(NAME List::Reporters::XmlOutput COMMAND $<TARGET_FILE:SelfTest> --list-reporters -r xml)
+set_tests_properties(List::Reporters::XmlOutput PROPERTIES
+    PASS_REGULAR_EXPRESSION "<Name>compact</Name>"
+    FAIL_REGULAR_EXPRESSION "Available reporters:"
+)
 
 
 
diff --git a/include/internal/catch_interfaces_reporter.cpp b/include/internal/catch_interfaces_reporter.cpp
index 0c367c5..664dd3e 100644
--- a/include/internal/catch_interfaces_reporter.cpp
+++ b/include/internal/catch_interfaces_reporter.cpp
@@ -6,7 +6,13 @@
  */
 
 #include "catch_interfaces_reporter.h"
+#include "catch_console_colour.h"
 #include "../reporters/catch_reporter_listening.h"
+#include "catch_list.h"
+#include "catch_text.h"
+
+#include <algorithm>
+#include <iomanip>
 
 namespace Catch {
 
@@ -108,6 +114,86 @@
     void IStreamingReporter::fatalErrorEncountered( StringRef ) {}
     bool IStreamingReporter::isMulti() const { return false; }
 
+    void IStreamingReporter::listReporters(std::vector<ReporterDescription> const& descriptions, Config const& config) {
+        Catch::cout() << "Available reporters:\n";
+        const auto maxNameLen = std::max_element(descriptions.begin(), descriptions.end(),
+            [](ReporterDescription const& lhs, ReporterDescription const& rhs) { return lhs.name.size() < rhs.name.size(); })
+            ->name.size();
+
+        for (auto const& desc : descriptions) {
+            if (config.verbosity() == Verbosity::Quiet) {
+                Catch::cout()
+                    << Column(desc.name)
+                    .indent(2)
+                    .width(5 + maxNameLen) << '\n';
+            } else {
+                Catch::cout()
+                    << Column(desc.name + ":")
+                    .indent(2)
+                    .width(5 + maxNameLen)
+                    + Column(desc.description)
+                    .initialIndent(0)
+                    .indent(2)
+                    .width(CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8)
+                    << '\n';
+            }
+        }
+        Catch::cout() << std::endl;
+    }
+
+    void IStreamingReporter::listTests(std::vector<TestCase> const& tests, Config const& config) {
+        if (config.hasTestFilters())
+            Catch::cout() << "Matching test cases:\n";
+        else {
+            Catch::cout() << "All available test cases:\n";
+        }
+
+        for (auto const& testCaseInfo : tests) {
+            Colour::Code colour = testCaseInfo.isHidden()
+                ? Colour::SecondaryText
+                : Colour::None;
+            Colour colourGuard(colour);
+
+            Catch::cout() << Column(testCaseInfo.name).initialIndent(2).indent(4) << '\n';
+            if (config.verbosity() >= Verbosity::High) {
+                Catch::cout() << Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;
+                std::string description = testCaseInfo.description;
+                if (description.empty())
+                    description = "(NO DESCRIPTION)";
+                Catch::cout() << Column(description).indent(4) << std::endl;
+            }
+            if (!testCaseInfo.tags.empty() && config.verbosity() > Verbosity::Quiet) {
+                Catch::cout() << Column(testCaseInfo.tagsAsString()).indent(6) << '\n';
+            }
+        }
+
+        if (!config.hasTestFilters()) {
+            Catch::cout() << pluralise(tests.size(), "test case") << '\n' << std::endl;
+        } else {
+            Catch::cout() << pluralise(tests.size(), "matching test case") << '\n' << std::endl;
+        }
+    }
+
+    void IStreamingReporter::listTags(std::vector<TagInfo> const& tags, Config const& config) {
+        if (config.hasTestFilters()) {
+            Catch::cout() << "Tags for matching test cases:\n";
+        } else {
+            Catch::cout() << "All available tags:\n";
+        }
+
+        for (auto const& tagCount : tags) {
+            ReusableStringStream rss;
+            rss << "  " << std::setw(2) << tagCount.count << "  ";
+            auto str = rss.str();
+            auto wrapper = Column(tagCount.all())
+                .initialIndent(0)
+                .indent(str.size())
+                .width(CATCH_CONFIG_CONSOLE_WIDTH - 10);
+            Catch::cout() << str << wrapper << '\n';
+        }
+        Catch::cout() << pluralise(tags.size(), "tag") << '\n' << std::endl;
+    }
+
     IReporterFactory::~IReporterFactory() = default;
     IReporterRegistry::~IReporterRegistry() = default;
 
diff --git a/include/internal/catch_interfaces_reporter.h b/include/internal/catch_interfaces_reporter.h
index 9c2b026..d73cf02 100644
--- a/include/internal/catch_interfaces_reporter.h
+++ b/include/internal/catch_interfaces_reporter.h
@@ -33,6 +33,9 @@
 
 namespace Catch {
 
+    struct ReporterDescription;
+    struct TagInfo;
+
     struct ReporterConfig {
         explicit ReporterConfig( IConfigPtr const& _fullConfig );
 
@@ -244,6 +247,12 @@
         virtual void fatalErrorEncountered( StringRef name );
 
         virtual bool isMulti() const;
+
+        // Listing support
+        virtual void listReporters(std::vector<ReporterDescription> const& descriptions, Config const& config);
+        virtual void listTests(std::vector<TestCase> const& tests, Config const& config);
+        virtual void listTags(std::vector<TagInfo> const& tags, Config const& config);
+
     };
     using IStreamingReporterPtr = std::unique_ptr<IStreamingReporter>;
 
diff --git a/include/internal/catch_list.cpp b/include/internal/catch_list.cpp
index 7a1ae7d..c93a841 100644
--- a/include/internal/catch_list.cpp
+++ b/include/internal/catch_list.cpp
@@ -23,65 +23,22 @@
 
 #include <limits>
 #include <algorithm>
-#include <iomanip>
 #include <set>
 
 namespace Catch {
     namespace {
 
-        struct TagInfo {
-            void add(std::string const& spelling);
-            std::string all() const;
-
-            std::set<std::string> spellings;
-            std::size_t count = 0;
-        };
-
-
-        void listTests(Config const& config) {
+        void listTests(IStreamingReporter& reporter, Config const& config) {
             TestSpec testSpec = config.testSpec();
-            if (config.hasTestFilters())
-                Catch::cout() << "Matching test cases:\n";
-            else {
-                Catch::cout() << "All available test cases:\n";
-            }
-
             auto matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
-            for (auto const& testCaseInfo : matchedTestCases) {
-                Colour::Code colour = testCaseInfo.isHidden()
-                    ? Colour::SecondaryText
-                    : Colour::None;
-                Colour colourGuard(colour);
-
-                Catch::cout() << Column(testCaseInfo.name).initialIndent(2).indent(4) << "\n";
-                if (config.verbosity() >= Verbosity::High) {
-                    Catch::cout() << Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;
-                    std::string description = testCaseInfo.description;
-                    if (description.empty())
-                        description = "(NO DESCRIPTION)";
-                    Catch::cout() << Column(description).indent(4) << std::endl;
-                }
-                if (!testCaseInfo.tags.empty())
-                    Catch::cout() << Column(testCaseInfo.tagsAsString()).indent(6) << "\n";
-            }
-
-            if (!config.hasTestFilters())
-                Catch::cout() << pluralise(matchedTestCases.size(), "test case") << '\n' << std::endl;
-            else
-                Catch::cout() << pluralise(matchedTestCases.size(), "matching test case") << '\n' << std::endl;
+            reporter.listTests(matchedTestCases, config);
         }
 
-        void listTags(Config const& config) {
+        void listTags(IStreamingReporter& reporter, Config const& config) {
             TestSpec testSpec = config.testSpec();
-            if (config.hasTestFilters())
-                Catch::cout() << "Tags for matching test cases:\n";
-            else {
-                Catch::cout() << "All available tags:\n";
-            }
+            std::vector<TestCase> matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
 
             std::map<std::string, TagInfo> tagCounts;
-
-            std::vector<TestCase> matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
             for (auto const& testCase : matchedTestCases) {
                 for (auto const& tagName : testCase.getTestCaseInfo().tags) {
                     std::string lcaseTagName = toLower(tagName);
@@ -92,38 +49,24 @@
                 }
             }
 
-            for (auto const& tagCount : tagCounts) {
-                ReusableStringStream rss;
-                rss << "  " << std::setw(2) << tagCount.second.count << "  ";
-                auto str = rss.str();
-                auto wrapper = Column(tagCount.second.all())
-                    .initialIndent(0)
-                    .indent(str.size())
-                    .width(CATCH_CONFIG_CONSOLE_WIDTH - 10);
-                Catch::cout() << str << wrapper << '\n';
+            std::vector<TagInfo> infos; infos.reserve(tagCounts.size());
+            for (auto const& tagc : tagCounts) {
+                infos.push_back(std::move(tagc.second));
             }
-            Catch::cout() << pluralise(tagCounts.size(), "tag") << '\n' << std::endl;
+
+            reporter.listTags(infos, config);
         }
 
-        void listReporters() {
-            Catch::cout() << "Available reporters:\n";
-            IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
-            std::size_t maxNameLen = 0;
-            for (auto const& factoryKvp : factories)
-                maxNameLen = (std::max)(maxNameLen, factoryKvp.first.size());
+        void listReporters(IStreamingReporter& reporter, Config const& config) {
+            std::vector<ReporterDescription> descriptions;
 
-            for (auto const& factoryKvp : factories) {
-                Catch::cout()
-                    << Column(factoryKvp.first + ":")
-                    .indent(2)
-                    .width(5 + maxNameLen)
-                    + Column(factoryKvp.second->getDescription())
-                    .initialIndent(0)
-                    .indent(2)
-                    .width(CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8)
-                    << "\n";
+            IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
+            descriptions.reserve(factories.size());
+            for (auto const& fac : factories) {
+                descriptions.push_back({ fac.first, fac.second->getDescription() });
             }
-            Catch::cout() << std::endl;
+
+            reporter.listReporters(descriptions, config);
         }
 
     } // end anonymous namespace
@@ -149,20 +92,20 @@
         return out;
     }
 
-    bool list( std::shared_ptr<Config> const& config ) {
+    bool list( IStreamingReporter& reporter, std::shared_ptr<Config> const& config ) {
         bool listed = false;
         getCurrentMutableContext().setConfig( config );
         if (config->listTests()) {
             listed = true;
-            listTests(*config);
+            listTests(reporter, *config);
         }
         if (config->listTags()) {
             listed = true;
-            listTags(*config);
+            listTags(reporter, *config);
         }
         if (config->listReporters()) {
             listed = true;
-            listReporters();
+            listReporters(reporter, *config);
         }
         return listed;
     }
diff --git a/include/internal/catch_list.h b/include/internal/catch_list.h
index 70567b1..eff8b09 100644
--- a/include/internal/catch_list.h
+++ b/include/internal/catch_list.h
@@ -10,9 +10,29 @@
 
 #include "catch_config.hpp"
 
+#include <set>
+#include <string>
+
+
 namespace Catch {
 
-    bool list( std::shared_ptr<Config> const& config );
+    struct IStreamingReporter;
+
+    struct ReporterDescription {
+        std::string name, description;
+    };
+
+    struct TagInfo {
+        void add(std::string const& spelling);
+        std::string all() const;
+
+        std::set<std::string> spellings;
+        std::size_t count = 0;
+    };
+
+    struct testClassInfo {};
+
+    bool list( IStreamingReporter& reporter, std::shared_ptr<Config> const& config );
 
 } // end namespace Catch
 
diff --git a/include/internal/catch_session.cpp b/include/internal/catch_session.cpp
index f490c88..dd3dc24 100644
--- a/include/internal/catch_session.cpp
+++ b/include/internal/catch_session.cpp
@@ -62,14 +62,14 @@
 
         class TestGroup {
         public:
-            explicit TestGroup(std::shared_ptr<Config> const& config)
+            explicit TestGroup(IStreamingReporterPtr&& reporter, std::shared_ptr<Config> const& config)
             : m_config{config}
-            , m_context{config, makeReporter(config)}
+            , m_context{config, std::move(reporter)}
             {
                 auto const& allTestCases = getAllTestCasesSorted(*m_config);
                 m_matches = m_config->testSpec().matchesByFilter(allTestCases, *m_config);
                 auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
-                
+
                 if (m_matches.empty() && invalidArgs.empty()) {
                     for (auto const& test : allTestCases)
                         if (!test.isHidden())
@@ -97,12 +97,12 @@
                         totals.error = -1;
                     }
                 }
-                
+
                 if (!invalidArgs.empty()) {
-                    for (auto const& invalidArg: invalidArgs)                   
+                    for (auto const& invalidArg: invalidArgs)
                          m_context.reporter().reportInvalidArguments(invalidArg);
-                }   
-                
+                }
+
                 m_context.testGroupEnded(m_config->name(), totals, 1, 1);
                 return totals;
             }
@@ -287,12 +287,15 @@
             if( m_configData.filenamesAsTags )
                 applyFilenamesAsTags( *m_config );
 
+            // Create reporter(s) so we can route listings through them
+            auto reporter = makeReporter(m_config);
+
             // Handle list request
-            if (list(m_config)) {
+            if (list(*reporter, m_config)) {
                 return 0;
             }
 
-            TestGroup tests { m_config };
+            TestGroup tests { std::move(reporter), m_config };
             auto const totals = tests.execute();
 
             if( m_config->warnAboutNoTests() && totals.error == -1 )
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 42f7a07..366d642 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -29,18 +29,6 @@
 
 ## Planned changes
 
-
-### Reporter verbosities
-
-The current implementation of verbosities, where the reporter is checked
-up-front whether it supports the requested verbosity, is fundamentally
-misguided and will be changed. The new implementation will no longer check
-whether the specified reporter supports the requested verbosity, instead
-it will be up to the reporters to deal with verbosities as they see fit
-(with an expectation that unsupported verbosities will be, at most,
-warnings, but not errors).
-
-
 ### Output format of `--list-*` command line parameters
 
 The various list operations will be piped through reporters. This means
diff --git a/include/internal/catch_interfaces_reporter.h b/include/internal/catch_interfaces_reporter.h
index 751ef2c..9c2b026 100644
--- a/include/internal/catch_interfaces_reporter.h
+++ b/include/internal/catch_interfaces_reporter.h
@@ -208,7 +208,6 @@
 
         // Implementing class must also provide the following static methods:
         // static std::string getDescription();
-        // static std::set<Verbosity> getSupportedVerbosities()
 
         virtual ReporterPreferences getPreferences() const = 0;
 
diff --git a/include/reporters/catch_reporter_bases.cpp b/include/reporters/catch_reporter_bases.cpp
index fcbafef..ae704ab 100644
--- a/include/reporters/catch_reporter_bases.cpp
+++ b/include/reporters/catch_reporter_bases.cpp
@@ -59,10 +59,6 @@
     TestEventListenerBase::TestEventListenerBase(ReporterConfig const & _config)
         :StreamingReporterBase(_config) {}
 
-    std::set<Verbosity> TestEventListenerBase::getSupportedVerbosities() {
-        return { Verbosity::Quiet, Verbosity::Normal, Verbosity::High };
-    }
-
     void TestEventListenerBase::assertionStarting(AssertionInfo const &) {}
 
     bool TestEventListenerBase::assertionEnded(AssertionStats const &) {
diff --git a/include/reporters/catch_reporter_bases.hpp b/include/reporters/catch_reporter_bases.hpp
index 66a891f..7bedd08 100644
--- a/include/reporters/catch_reporter_bases.hpp
+++ b/include/reporters/catch_reporter_bases.hpp
@@ -35,16 +35,10 @@
             stream( _config.stream() )
         {
             m_reporterPrefs.shouldRedirectStdOut = false;
-            if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
-                CATCH_ERROR( "Verbosity level not supported by this reporter" );
         }
 
         ReporterPreferences getPreferences() const override {
             return m_reporterPrefs;
-        }
-
-        static std::set<Verbosity> getSupportedVerbosities() {
-            return { Verbosity::Normal };
         }
 
         ~StreamingReporterBase() override = default;
@@ -153,17 +147,11 @@
             stream( _config.stream() )
         {
             m_reporterPrefs.shouldRedirectStdOut = false;
-            if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
-                CATCH_ERROR( "Verbosity level not supported by this reporter" );
         }
         ~CumulativeReporterBase() override = default;
 
         ReporterPreferences getPreferences() const override {
             return m_reporterPrefs;
-        }
-
-        static std::set<Verbosity> getSupportedVerbosities() {
-            return { Verbosity::Normal };
         }
 
         void testRunStarting( TestRunInfo const& ) override {}
@@ -270,8 +258,6 @@
 
     struct TestEventListenerBase : StreamingReporterBase<TestEventListenerBase> {
         TestEventListenerBase( ReporterConfig const& _config );
-
-        static std::set<Verbosity> getSupportedVerbosities();
 
         void assertionStarting(AssertionInfo const&) override;
         bool assertionEnded(AssertionStats const&) override;
diff --git a/include/reporters/catch_reporter_listening.cpp b/include/reporters/catch_reporter_listening.cpp
index 91e6b39..32ee54a 100644
--- a/include/reporters/catch_reporter_listening.cpp
+++ b/include/reporters/catch_reporter_listening.cpp
@@ -30,11 +30,6 @@
         return m_preferences;
     }
 
-    std::set<Verbosity> ListeningReporter::getSupportedVerbosities() {
-        return std::set<Verbosity>{ };
-    }
-
-
     void ListeningReporter::noMatchingTestCases( std::string const& spec ) {
         for ( auto const& listener : m_listeners ) {
             listener->noMatchingTestCases( spec );
diff --git a/include/reporters/catch_reporter_listening.h b/include/reporters/catch_reporter_listening.h
index bfaa308..7fbd7af 100644
--- a/include/reporters/catch_reporter_listening.h
+++ b/include/reporters/catch_reporter_listening.h
@@ -28,10 +28,8 @@
         ReporterPreferences getPreferences() const override;
 
         void noMatchingTestCases( std::string const& spec ) override;
-        
+
         void reportInvalidArguments(std::string const&arg) override;
-        
-        static std::set<Verbosity> getSupportedVerbosities();
 
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
         void benchmarkPreparing(std::string const& name) override;
diff --git a/docs/deprecations.md b/docs/deprecations.md
index bf7a71f..42f7a07 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -11,18 +11,6 @@
 
 ## Deprecations
 
-### `--list-*` return values
-
-The return codes of the `--list-*` family of command line arguments
-will no longer be equal to the number of tests/tags/etc found, instead
-it will be 0 for success and non-zero for failure.
-
-
-### `--list-test-names-only`
-
-`--list-test-names-only` command line argument will be removed.
-
-
 ### Secondary description amongst tags
 
 Currently, the tags part of `TEST_CASE` (and others) macro can also
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 0595961..cb38951 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -32,8 +32,11 @@
 
 ## 3.0.0 (in progress)
 
-### Breaking changes
+### (Potentially) Breaking changes
 * `ANON_TEST_CASE` has been removed, use `TEST_CASE` with no arguments instead (#1220)
+* `--list*` commands no longer have non-zero return code (#1410)
+* `--list-test-names-only` has been removed (#1190)
+  * You should use verbosity-modifiers for `--list-tests` instead
 
 ### Fixes
 * The `INFO` macro no longer contains superfluous semicolon (#1456)
diff --git a/include/internal/catch_commandline.cpp b/include/internal/catch_commandline.cpp
index 365a3c9..0008c57 100644
--- a/include/internal/catch_commandline.cpp
+++ b/include/internal/catch_commandline.cpp
@@ -181,9 +181,6 @@
             | Opt( setVerbosity, "quiet|normal|high" )
                 ["-v"]["--verbosity"]
                 ( "set output verbosity" )
-            | Opt( config.listTestNamesOnly )
-                ["--list-test-names-only"]
-                ( "list all/matching test cases names only" )
             | Opt( config.listReporters )
                 ["--list-reporters"]
                 ( "list all reporters" )
diff --git a/include/internal/catch_config.cpp b/include/internal/catch_config.cpp
index e222328..6a5e5f3 100644
--- a/include/internal/catch_config.cpp
+++ b/include/internal/catch_config.cpp
@@ -41,7 +41,6 @@
     }
 
     bool Config::listTests() const          { return m_data.listTests; }
-    bool Config::listTestNamesOnly() const  { return m_data.listTestNamesOnly; }
     bool Config::listTags() const           { return m_data.listTags; }
     bool Config::listReporters() const      { return m_data.listReporters; }
 
diff --git a/include/internal/catch_config.hpp b/include/internal/catch_config.hpp
index 95b67d2..2074d93 100644
--- a/include/internal/catch_config.hpp
+++ b/include/internal/catch_config.hpp
@@ -30,7 +30,6 @@
         bool listTests = false;
         bool listTags = false;
         bool listReporters = false;
-        bool listTestNamesOnly = false;
 
         bool showSuccessfulTests = false;
         bool shouldDebugBreak = false;
@@ -79,7 +78,6 @@
         std::string const& getFilename() const;
 
         bool listTests() const;
-        bool listTestNamesOnly() const;
         bool listTags() const;
         bool listReporters() const;
 
diff --git a/include/internal/catch_list.cpp b/include/internal/catch_list.cpp
index f8b3503..7a1ae7d 100644
--- a/include/internal/catch_list.cpp
+++ b/include/internal/catch_list.cpp
@@ -71,22 +71,6 @@
                 Catch::cout() << pluralise(matchedTestCases.size(), "matching test case") << '\n' << std::endl;
         }
 
-        void listTestsNamesOnly(Config const& config) {
-            TestSpec testSpec = config.testSpec();
-            std::size_t matchedTests = 0;
-            std::vector<TestCase> matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
-            for (auto const& testCaseInfo : matchedTestCases) {
-                matchedTests++;
-                if (startsWith(testCaseInfo.name, '#'))
-                    Catch::cout() << '"' << testCaseInfo.name << '"';
-                else
-                    Catch::cout() << testCaseInfo.name;
-                if (config.verbosity() >= Verbosity::High)
-                    Catch::cout() << "\t@" << testCaseInfo.lineInfo;
-                Catch::cout() << std::endl;
-            }
-        }
-
         void listTags(Config const& config) {
             TestSpec testSpec = config.testSpec();
             if (config.hasTestFilters())
@@ -171,10 +155,6 @@
         if (config->listTests()) {
             listed = true;
             listTests(*config);
-        }
-        if (config->listTestNamesOnly()) {
-            listed = true;
-            listTestsNamesOnly(*config);
         }
         if (config->listTags()) {
             listed = true;
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index e0e7b63..d3556ce 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -396,12 +396,6 @@
 set_tests_properties(List::Reporters::Output PROPERTIES PASS_REGULAR_EXPRESSION "Available reporters:")
 add_test(NAME List::Reporters::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
 
-add_test(NAME List::Tests::NamesOnly::Output COMMAND $<TARGET_FILE:SelfTest> --list-test-names-only)
-set_tests_properties(List::Tests::NamesOnly::Output PROPERTIES
-    PASS_REGULAR_EXPRESSION "Regex string matcher"
-    FAIL_REGULAR_EXPRESSION "Hidden Test")
-add_test(NAME List::Tests::NamesOnly::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-test-names-only)
-
 
 
 add_test(NAME NoAssertions COMMAND $<TARGET_FILE:SelfTest> -w NoAssertions)
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 46e4804..0595961 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -37,6 +37,8 @@
 
 ### Fixes
 * The `INFO` macro no longer contains superfluous semicolon (#1456)
+* The `--list*` family of command line flags now return 0 on success (#1410, #1146)
+
 
 ## 2.10.2
 
diff --git a/include/internal/catch_list.cpp b/include/internal/catch_list.cpp
index 11e5514..f8b3503 100644
--- a/include/internal/catch_list.cpp
+++ b/include/internal/catch_list.cpp
@@ -24,59 +24,125 @@
 #include <limits>
 #include <algorithm>
 #include <iomanip>
+#include <set>
 
 namespace Catch {
+    namespace {
 
-    std::size_t listTests( Config const& config ) {
-        TestSpec testSpec = config.testSpec();
-        if( config.hasTestFilters() )
-            Catch::cout() << "Matching test cases:\n";
-        else {
-            Catch::cout() << "All available test cases:\n";
-        }
+        struct TagInfo {
+            void add(std::string const& spelling);
+            std::string all() const;
 
-        auto matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
-        for( auto const& testCaseInfo : matchedTestCases ) {
-            Colour::Code colour = testCaseInfo.isHidden()
-                ? Colour::SecondaryText
-                : Colour::None;
-            Colour colourGuard( colour );
+            std::set<std::string> spellings;
+            std::size_t count = 0;
+        };
 
-            Catch::cout() << Column( testCaseInfo.name ).initialIndent( 2 ).indent( 4 ) << "\n";
-            if( config.verbosity() >= Verbosity::High ) {
-                Catch::cout() << Column( Catch::Detail::stringify( testCaseInfo.lineInfo ) ).indent(4) << std::endl;
-                std::string description = testCaseInfo.description;
-                if( description.empty() )
-                    description = "(NO DESCRIPTION)";
-                Catch::cout() << Column( description ).indent(4) << std::endl;
+
+        void listTests(Config const& config) {
+            TestSpec testSpec = config.testSpec();
+            if (config.hasTestFilters())
+                Catch::cout() << "Matching test cases:\n";
+            else {
+                Catch::cout() << "All available test cases:\n";
             }
-            if( !testCaseInfo.tags.empty() )
-                Catch::cout() << Column( testCaseInfo.tagsAsString() ).indent( 6 ) << "\n";
+
+            auto matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
+            for (auto const& testCaseInfo : matchedTestCases) {
+                Colour::Code colour = testCaseInfo.isHidden()
+                    ? Colour::SecondaryText
+                    : Colour::None;
+                Colour colourGuard(colour);
+
+                Catch::cout() << Column(testCaseInfo.name).initialIndent(2).indent(4) << "\n";
+                if (config.verbosity() >= Verbosity::High) {
+                    Catch::cout() << Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;
+                    std::string description = testCaseInfo.description;
+                    if (description.empty())
+                        description = "(NO DESCRIPTION)";
+                    Catch::cout() << Column(description).indent(4) << std::endl;
+                }
+                if (!testCaseInfo.tags.empty())
+                    Catch::cout() << Column(testCaseInfo.tagsAsString()).indent(6) << "\n";
+            }
+
+            if (!config.hasTestFilters())
+                Catch::cout() << pluralise(matchedTestCases.size(), "test case") << '\n' << std::endl;
+            else
+                Catch::cout() << pluralise(matchedTestCases.size(), "matching test case") << '\n' << std::endl;
         }
 
-        if( !config.hasTestFilters() )
-            Catch::cout() << pluralise( matchedTestCases.size(), "test case" ) << '\n' << std::endl;
-        else
-            Catch::cout() << pluralise( matchedTestCases.size(), "matching test case" ) << '\n' << std::endl;
-        return matchedTestCases.size();
-    }
+        void listTestsNamesOnly(Config const& config) {
+            TestSpec testSpec = config.testSpec();
+            std::size_t matchedTests = 0;
+            std::vector<TestCase> matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
+            for (auto const& testCaseInfo : matchedTestCases) {
+                matchedTests++;
+                if (startsWith(testCaseInfo.name, '#'))
+                    Catch::cout() << '"' << testCaseInfo.name << '"';
+                else
+                    Catch::cout() << testCaseInfo.name;
+                if (config.verbosity() >= Verbosity::High)
+                    Catch::cout() << "\t@" << testCaseInfo.lineInfo;
+                Catch::cout() << std::endl;
+            }
+        }
 
-    std::size_t listTestsNamesOnly( Config const& config ) {
-        TestSpec testSpec = config.testSpec();
-        std::size_t matchedTests = 0;
-        std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
-        for( auto const& testCaseInfo : matchedTestCases ) {
-            matchedTests++;
-            if( startsWith( testCaseInfo.name, '#' ) )
-               Catch::cout() << '"' << testCaseInfo.name << '"';
-            else
-               Catch::cout() << testCaseInfo.name;
-            if ( config.verbosity() >= Verbosity::High )
-                Catch::cout() << "\t@" << testCaseInfo.lineInfo;
+        void listTags(Config const& config) {
+            TestSpec testSpec = config.testSpec();
+            if (config.hasTestFilters())
+                Catch::cout() << "Tags for matching test cases:\n";
+            else {
+                Catch::cout() << "All available tags:\n";
+            }
+
+            std::map<std::string, TagInfo> tagCounts;
+
+            std::vector<TestCase> matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);
+            for (auto const& testCase : matchedTestCases) {
+                for (auto const& tagName : testCase.getTestCaseInfo().tags) {
+                    std::string lcaseTagName = toLower(tagName);
+                    auto countIt = tagCounts.find(lcaseTagName);
+                    if (countIt == tagCounts.end())
+                        countIt = tagCounts.insert(std::make_pair(lcaseTagName, TagInfo())).first;
+                    countIt->second.add(tagName);
+                }
+            }
+
+            for (auto const& tagCount : tagCounts) {
+                ReusableStringStream rss;
+                rss << "  " << std::setw(2) << tagCount.second.count << "  ";
+                auto str = rss.str();
+                auto wrapper = Column(tagCount.second.all())
+                    .initialIndent(0)
+                    .indent(str.size())
+                    .width(CATCH_CONFIG_CONSOLE_WIDTH - 10);
+                Catch::cout() << str << wrapper << '\n';
+            }
+            Catch::cout() << pluralise(tagCounts.size(), "tag") << '\n' << std::endl;
+        }
+
+        void listReporters() {
+            Catch::cout() << "Available reporters:\n";
+            IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
+            std::size_t maxNameLen = 0;
+            for (auto const& factoryKvp : factories)
+                maxNameLen = (std::max)(maxNameLen, factoryKvp.first.size());
+
+            for (auto const& factoryKvp : factories) {
+                Catch::cout()
+                    << Column(factoryKvp.first + ":")
+                    .indent(2)
+                    .width(5 + maxNameLen)
+                    + Column(factoryKvp.second->getDescription())
+                    .initialIndent(0)
+                    .indent(2)
+                    .width(CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8)
+                    << "\n";
+            }
             Catch::cout() << std::endl;
         }
-        return matchedTests;
-    }
+
+    } // end anonymous namespace
 
     void TagInfo::add( std::string const& spelling ) {
         ++count;
@@ -99,75 +165,26 @@
         return out;
     }
 
-    std::size_t listTags( Config const& config ) {
-        TestSpec testSpec = config.testSpec();
-        if( config.hasTestFilters() )
-            Catch::cout() << "Tags for matching test cases:\n";
-        else {
-            Catch::cout() << "All available tags:\n";
-        }
-
-        std::map<std::string, TagInfo> tagCounts;
-
-        std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
-        for( auto const& testCase : matchedTestCases ) {
-            for( auto const& tagName : testCase.getTestCaseInfo().tags ) {
-                std::string lcaseTagName = toLower( tagName );
-                auto countIt = tagCounts.find( lcaseTagName );
-                if( countIt == tagCounts.end() )
-                    countIt = tagCounts.insert( std::make_pair( lcaseTagName, TagInfo() ) ).first;
-                countIt->second.add( tagName );
-            }
-        }
-
-        for( auto const& tagCount : tagCounts ) {
-            ReusableStringStream rss;
-            rss << "  " << std::setw(2) << tagCount.second.count << "  ";
-            auto str = rss.str();
-            auto wrapper = Column( tagCount.second.all() )
-                                                    .initialIndent( 0 )
-                                                    .indent( str.size() )
-                                                    .width( CATCH_CONFIG_CONSOLE_WIDTH-10 );
-            Catch::cout() << str << wrapper << '\n';
-        }
-        Catch::cout() << pluralise( tagCounts.size(), "tag" ) << '\n' << std::endl;
-        return tagCounts.size();
-    }
-
-    std::size_t listReporters() {
-        Catch::cout() << "Available reporters:\n";
-        IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
-        std::size_t maxNameLen = 0;
-        for( auto const& factoryKvp : factories )
-            maxNameLen = (std::max)( maxNameLen, factoryKvp.first.size() );
-
-        for( auto const& factoryKvp : factories ) {
-            Catch::cout()
-                    << Column( factoryKvp.first + ":" )
-                            .indent(2)
-                            .width( 5+maxNameLen )
-                    +  Column( factoryKvp.second->getDescription() )
-                            .initialIndent(0)
-                            .indent(2)
-                            .width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen-8 )
-                    << "\n";
-        }
-        Catch::cout() << std::endl;
-        return factories.size();
-    }
-
-    Option<std::size_t> list( std::shared_ptr<Config> const& config ) {
-        Option<std::size_t> listedCount;
+    bool list( std::shared_ptr<Config> const& config ) {
+        bool listed = false;
         getCurrentMutableContext().setConfig( config );
-        if( config->listTests() )
-            listedCount = listedCount.valueOr(0) + listTests( *config );
-        if( config->listTestNamesOnly() )
-            listedCount = listedCount.valueOr(0) + listTestsNamesOnly( *config );
-        if( config->listTags() )
-            listedCount = listedCount.valueOr(0) + listTags( *config );
-        if( config->listReporters() )
-            listedCount = listedCount.valueOr(0) + listReporters();
-        return listedCount;
+        if (config->listTests()) {
+            listed = true;
+            listTests(*config);
+        }
+        if (config->listTestNamesOnly()) {
+            listed = true;
+            listTestsNamesOnly(*config);
+        }
+        if (config->listTags()) {
+            listed = true;
+            listTags(*config);
+        }
+        if (config->listReporters()) {
+            listed = true;
+            listReporters();
+        }
+        return listed;
     }
 
 } // end namespace Catch
diff --git a/include/internal/catch_list.h b/include/internal/catch_list.h
index cea7bba..70567b1 100644
--- a/include/internal/catch_list.h
+++ b/include/internal/catch_list.h
@@ -8,30 +8,11 @@
 #ifndef TWOBLUECUBES_CATCH_LIST_H_INCLUDED
 #define TWOBLUECUBES_CATCH_LIST_H_INCLUDED
 
-#include "catch_option.hpp"
 #include "catch_config.hpp"
-
-#include <set>
 
 namespace Catch {
 
-    std::size_t listTests( Config const& config );
-
-    std::size_t listTestsNamesOnly( Config const& config );
-
-    struct TagInfo {
-        void add( std::string const& spelling );
-        std::string all() const;
-
-        std::set<std::string> spellings;
-        std::size_t count = 0;
-    };
-
-    std::size_t listTags( Config const& config );
-
-    std::size_t listReporters();
-    
-    Option<std::size_t> list( std::shared_ptr<Config> const& config );
+    bool list( std::shared_ptr<Config> const& config );
 
 } // end namespace Catch
 
diff --git a/include/internal/catch_session.cpp b/include/internal/catch_session.cpp
index b1d7a40..f490c88 100644
--- a/include/internal/catch_session.cpp
+++ b/include/internal/catch_session.cpp
@@ -288,8 +288,9 @@
                 applyFilenamesAsTags( *m_config );
 
             // Handle list request
-            if( Option<std::size_t> listed = list( m_config ) )
-                return static_cast<int>( *listed );
+            if (list(m_config)) {
+                return 0;
+            }
 
             TestGroup tests { m_config };
             auto const totals = tests.execute();
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index 0aafc17..e0e7b63 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -376,24 +376,33 @@
     FAIL_REGULAR_EXPRESSION "Filters:"
 )
 
-add_test(NAME ListTests COMMAND $<TARGET_FILE:SelfTest> --list-tests --verbosity high)
-set_tests_properties(ListTests PROPERTIES 
+# Because CTest does not allow us to check both return code _and_ expected
+# output in one test, we run these commands twice. First time we check
+# the output, the second time we check the exit code.
+add_test(NAME List::Tests::Output COMMAND $<TARGET_FILE:SelfTest> --list-tests --verbosity high)
+set_tests_properties(List::Tests::Output PROPERTIES
     PASS_REGULAR_EXPRESSION "[0-9]+ test cases"
     FAIL_REGULAR_EXPRESSION "Hidden Test"
 )
+add_test(NAME List::Tests::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-tests --verbosity high)
 
-add_test(NAME ListTags COMMAND $<TARGET_FILE:SelfTest> --list-tags)
-set_tests_properties(ListTags PROPERTIES 
-    PASS_REGULAR_EXPRESSION "[0-9]+ tags" 
+add_test(NAME List::Tags::Output COMMAND $<TARGET_FILE:SelfTest> --list-tags)
+set_tests_properties(List::Tags::Output PROPERTIES
+    PASS_REGULAR_EXPRESSION "[0-9]+ tags"
     FAIL_REGULAR_EXPRESSION "\\[\\.\\]")
+add_test(NAME List::Tags::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-tags)
 
-add_test(NAME ListReporters COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
-set_tests_properties(ListReporters PROPERTIES PASS_REGULAR_EXPRESSION "Available reporters:")
+add_test(NAME List::Reporters::Output COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
+set_tests_properties(List::Reporters::Output PROPERTIES PASS_REGULAR_EXPRESSION "Available reporters:")
+add_test(NAME List::Reporters::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-reporters)
 
-add_test(NAME ListTestNamesOnly COMMAND $<TARGET_FILE:SelfTest> --list-test-names-only)
-set_tests_properties(ListTestNamesOnly PROPERTIES 
+add_test(NAME List::Tests::NamesOnly::Output COMMAND $<TARGET_FILE:SelfTest> --list-test-names-only)
+set_tests_properties(List::Tests::NamesOnly::Output PROPERTIES
     PASS_REGULAR_EXPRESSION "Regex string matcher"
     FAIL_REGULAR_EXPRESSION "Hidden Test")
+add_test(NAME List::Tests::NamesOnly::ExitCode COMMAND $<TARGET_FILE:SelfTest> --list-test-names-only)
+
+
 
 add_test(NAME NoAssertions COMMAND $<TARGET_FILE:SelfTest> -w NoAssertions)
 set_tests_properties(NoAssertions PROPERTIES PASS_REGULAR_EXPRESSION "No assertions in test case")
diff --git a/docs/release-notes.md b/docs/release-notes.md
index c49ddef..46e4804 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -33,8 +33,10 @@
 ## 3.0.0 (in progress)
 
 ### Breaking changes
-* `ANON_TEST_CASE` has been removed, use `TEST_CASE` with no arguments instead.
+* `ANON_TEST_CASE` has been removed, use `TEST_CASE` with no arguments instead (#1220)
 
+### Fixes
+* The `INFO` macro no longer contains superfluous semicolon (#1456)
 
 ## 2.10.2
 
diff --git a/include/internal/catch_capture.hpp b/include/internal/catch_capture.hpp
index ba842c3..e47cc46 100644
--- a/include/internal/catch_capture.hpp
+++ b/include/internal/catch_capture.hpp
@@ -129,7 +129,7 @@
 
 ///////////////////////////////////////////////////////////////////////////////
 #define INTERNAL_CATCH_INFO( macroName, log ) \
-    Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log );
+    Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )
 
 ///////////////////////////////////////////////////////////////////////////////
 #define INTERNAL_CATCH_UNSCOPED_INFO( macroName, log ) \
diff --git a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
index 9cbe893..d9cbc5a 100644
--- a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
+++ b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
@@ -181,9 +181,9 @@
                     const auto step = .1;
 
                     auto gen = range(rangeStart, rangeEnd, step);
-                    auto expected = rangeStart; 
+                    auto expected = rangeStart;
                     while( (rangeEnd - expected) > step ) {
-                        INFO( "Current expected value is " << expected )
+                        INFO( "Current expected value is " << expected );
                         REQUIRE(gen.get() == Approx(expected));
                         REQUIRE(gen.next());
 
@@ -198,9 +198,9 @@
                     const auto step = .3;
 
                     auto gen = range(rangeStart, rangeEnd, step);
-                    auto expected = rangeStart; 
+                    auto expected = rangeStart;
                     while( (rangeEnd - expected) > step ) {
-                       INFO( "Current expected value is " << expected )
+                       INFO( "Current expected value is " << expected );
                        REQUIRE(gen.get() == Approx(expected));
                        REQUIRE(gen.next());
 
@@ -214,16 +214,16 @@
                     const auto step = .3;
 
                     auto gen = range(rangeStart, rangeEnd, step);
-                    auto expected = rangeStart; 
+                    auto expected = rangeStart;
                     while( (rangeEnd - expected) > step ) {
-                       INFO( "Current expected value is " << expected )
+                       INFO( "Current expected value is " << expected );
                        REQUIRE(gen.get() == Approx(expected));
                        REQUIRE(gen.next());
 
                        expected += step;
                     }
                     REQUIRE_FALSE(gen.next());
-                }                
+                }
             }
         }
         SECTION("Negative manual step") {
diff --git a/docs/deprecations.md b/docs/deprecations.md
index c2b178e..bf7a71f 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -23,12 +23,6 @@
 `--list-test-names-only` command line argument will be removed.
 
 
-### `ANON_TEST_CASE`
-
-`ANON_TEST_CASE` is scheduled for removal, as it can be fully replaced
-by a `TEST_CASE` with no arguments.
-
-
 ### Secondary description amongst tags
 
 Currently, the tags part of `TEST_CASE` (and others) macro can also
diff --git a/docs/release-notes.md b/docs/release-notes.md
index aef09bf..c49ddef 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -30,6 +30,11 @@
 [Older versions](#older-versions)<br>
 [Even Older versions](#even-older-versions)<br>
 
+## 3.0.0 (in progress)
+
+### Breaking changes
+* `ANON_TEST_CASE` has been removed, use `TEST_CASE` with no arguments instead.
+
 
 ## 2.10.2
 
@@ -147,6 +152,7 @@
 ### Fixes
 * Fix benchmarking compilation failure in files without `CATCH_CONFIG_EXTERNAL_INTERFACES` (or implementation)
 
+
 ## 2.9.0
 
 ### Improvements
diff --git a/include/catch.hpp b/include/catch.hpp
index 805939a..422f8a5 100644
--- a/include/catch.hpp
+++ b/include/catch.hpp
@@ -151,8 +151,6 @@
 #define CATCH_FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "CATCH_FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
 #define CATCH_SUCCEED( ... ) INTERNAL_CATCH_MSG( "CATCH_SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
 
-#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
-
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
 #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
 #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )
@@ -249,7 +247,6 @@
 #define FAIL( ... ) INTERNAL_CATCH_MSG( "FAIL", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )
 #define FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
 #define SUCCEED( ... ) INTERNAL_CATCH_MSG( "SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
-#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
 #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )
@@ -360,8 +357,6 @@
 #define CATCH_FAIL_CHECK( ... ) (void)(0)
 #define CATCH_SUCCEED( ... ) (void)(0)
 
-#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
-
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
 #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)
 #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)
@@ -444,7 +439,6 @@
 #define FAIL( ... ) (void)(0)
 #define FAIL_CHECK( ... ) (void)(0)
 #define SUCCEED( ... ) (void)(0)
-#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
 #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)
diff --git a/projects/ExtraTests/X01-PrefixedMacros.cpp b/projects/ExtraTests/X01-PrefixedMacros.cpp
index 3d2ab9c..c9b16eb 100644
--- a/projects/ExtraTests/X01-PrefixedMacros.cpp
+++ b/projects/ExtraTests/X01-PrefixedMacros.cpp
@@ -60,9 +60,6 @@
 
     CATCH_STATIC_REQUIRE( std::is_void<void>::value );
     CATCH_STATIC_REQUIRE_FALSE( std::is_void<int>::value );
-}
-
-CATCH_ANON_TEST_CASE() {
     CATCH_FAIL("");
 }
 
diff --git a/include/internal/catch_xmlwriter.cpp b/include/internal/catch_xmlwriter.cpp
index 5354efa..b0d81ab 100644
--- a/include/internal/catch_xmlwriter.cpp
+++ b/include/internal/catch_xmlwriter.cpp
@@ -10,6 +10,7 @@
 #include "catch_enforce.h"
 
 #include <iomanip>
+#include <type_traits>
 
 using uchar = unsigned char;
 
@@ -51,7 +52,30 @@
         os.flags(f);
     }
 
+    bool shouldNewline(XmlFormatting fmt) {
+        return !!(static_cast<std::underlying_type<XmlFormatting>::type>(fmt & XmlFormatting::Newline));
+    }
+
+    bool shouldIndent(XmlFormatting fmt) {
+        return !!(static_cast<std::underlying_type<XmlFormatting>::type>(fmt & XmlFormatting::Indent));
+    }
+
 } // anonymous namespace
+
+    XmlFormatting operator | (XmlFormatting lhs, XmlFormatting rhs) {
+        return static_cast<XmlFormatting>(
+            static_cast<std::underlying_type<XmlFormatting>::type>(lhs) |
+            static_cast<std::underlying_type<XmlFormatting>::type>(rhs)
+        );
+    }
+
+    XmlFormatting operator & (XmlFormatting lhs, XmlFormatting rhs) {
+        return static_cast<XmlFormatting>(
+            static_cast<std::underlying_type<XmlFormatting>::type>(lhs) &
+            static_cast<std::underlying_type<XmlFormatting>::type>(rhs)
+        );
+    }
+
 
     XmlEncode::XmlEncode( std::string const& str, ForWhat forWhat )
     :   m_str( str ),
@@ -157,13 +181,17 @@
         return os;
     }
 
-    XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )
-    :   m_writer( writer )
+    XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer, XmlFormatting fmt )
+    :   m_writer( writer ),
+        m_fmt(fmt)
     {}
 
     XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) noexcept
-    :   m_writer( other.m_writer ){
+    :   m_writer( other.m_writer ),
+        m_fmt(other.m_fmt)
+    {
         other.m_writer = nullptr;
+        other.m_fmt = XmlFormatting::None;
     }
     XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) noexcept {
         if ( m_writer ) {
@@ -171,17 +199,20 @@
         }
         m_writer = other.m_writer;
         other.m_writer = nullptr;
+        m_fmt = other.m_fmt;
+        other.m_fmt = XmlFormatting::None;
         return *this;
     }
 
 
     XmlWriter::ScopedElement::~ScopedElement() {
-        if( m_writer )
-            m_writer->endElement();
+        if (m_writer) {
+            m_writer->endElement(m_fmt);
+        }
     }
 
-    XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string const& text, bool indent ) {
-        m_writer->writeText( text, indent );
+    XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string const& text, XmlFormatting fmt ) {
+        m_writer->writeText( text, fmt );
         return *this;
     }
 
@@ -191,37 +222,47 @@
     }
 
     XmlWriter::~XmlWriter() {
-        while( !m_tags.empty() )
+        while (!m_tags.empty()) {
             endElement();
+        }
+        newlineIfNecessary();
     }
 
-    XmlWriter& XmlWriter::startElement( std::string const& name ) {
+    XmlWriter& XmlWriter::startElement( std::string const& name, XmlFormatting fmt ) {
         ensureTagClosed();
         newlineIfNecessary();
-        m_os << m_indent << '<' << name;
+        if (shouldIndent(fmt)) {
+            m_os << m_indent;
+            m_indent += "  ";
+        }
+        m_os << '<' << name;
         m_tags.push_back( name );
-        m_indent += "  ";
         m_tagIsOpen = true;
+        applyFormatting(fmt);
         return *this;
     }
 
-    XmlWriter::ScopedElement XmlWriter::scopedElement( std::string const& name ) {
-        ScopedElement scoped( this );
-        startElement( name );
+    XmlWriter::ScopedElement XmlWriter::scopedElement( std::string const& name, XmlFormatting fmt ) {
+        ScopedElement scoped( this, fmt );
+        startElement( name, fmt );
         return scoped;
     }
 
-    XmlWriter& XmlWriter::endElement() {
-        newlineIfNecessary();
-        m_indent = m_indent.substr( 0, m_indent.size()-2 );
+    XmlWriter& XmlWriter::endElement(XmlFormatting fmt) {
+        m_indent = m_indent.substr(0, m_indent.size() - 2);
+
         if( m_tagIsOpen ) {
             m_os << "/>";
             m_tagIsOpen = false;
+        } else {
+            newlineIfNecessary();
+            if (shouldIndent(fmt)) {
+                m_os << m_indent;
+            }
+            m_os << "</" << m_tags.back() << ">";
         }
-        else {
-            m_os << m_indent << "</" << m_tags.back() << ">";
-        }
-        m_os << std::endl;
+        m_os << std::flush;
+        applyFormatting(fmt);
         m_tags.pop_back();
         return *this;
     }
@@ -237,22 +278,26 @@
         return *this;
     }
 
-    XmlWriter& XmlWriter::writeText( std::string const& text, bool indent ) {
+    XmlWriter& XmlWriter::writeText( std::string const& text, XmlFormatting fmt) {
         if( !text.empty() ){
             bool tagWasOpen = m_tagIsOpen;
             ensureTagClosed();
-            if( tagWasOpen && indent )
+            if (tagWasOpen && shouldIndent(fmt)) {
                 m_os << m_indent;
+            }
             m_os << XmlEncode( text );
-            m_needsNewline = true;
+            applyFormatting(fmt);
         }
         return *this;
     }
 
-    XmlWriter& XmlWriter::writeComment( std::string const& text ) {
+    XmlWriter& XmlWriter::writeComment( std::string const& text, XmlFormatting fmt) {
         ensureTagClosed();
-        m_os << m_indent << "<!--" << text << "-->";
-        m_needsNewline = true;
+        if (shouldIndent(fmt)) {
+            m_os << m_indent;
+        }
+        m_os << "<!--" << text << "-->";
+        applyFormatting(fmt);
         return *this;
     }
 
@@ -268,11 +313,16 @@
 
     void XmlWriter::ensureTagClosed() {
         if( m_tagIsOpen ) {
-            m_os << ">" << std::endl;
+            m_os << '>' << std::flush;
+            newlineIfNecessary();
             m_tagIsOpen = false;
         }
     }
 
+    void XmlWriter::applyFormatting(XmlFormatting fmt) {
+        m_needsNewline = shouldNewline(fmt);
+    }
+
     void XmlWriter::writeDeclaration() {
         m_os << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
     }
diff --git a/include/internal/catch_xmlwriter.h b/include/internal/catch_xmlwriter.h
index c4b1c03..f551b23 100644
--- a/include/internal/catch_xmlwriter.h
+++ b/include/internal/catch_xmlwriter.h
@@ -14,6 +14,14 @@
 #include <vector>
 
 namespace Catch {
+    enum class XmlFormatting {
+        None = 0x00,
+        Indent = 0x01,
+        Newline = 0x02,
+    };
+
+    XmlFormatting operator | (XmlFormatting lhs, XmlFormatting rhs);
+    XmlFormatting operator & (XmlFormatting lhs, XmlFormatting rhs);
 
     class XmlEncode {
     public:
@@ -35,14 +43,14 @@
 
         class ScopedElement {
         public:
-            ScopedElement( XmlWriter* writer );
+            ScopedElement( XmlWriter* writer, XmlFormatting fmt );
 
             ScopedElement( ScopedElement&& other ) noexcept;
             ScopedElement& operator=( ScopedElement&& other ) noexcept;
 
             ~ScopedElement();
 
-            ScopedElement& writeText( std::string const& text, bool indent = true );
+            ScopedElement& writeText( std::string const& text, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent );
 
             template<typename T>
             ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
@@ -52,6 +60,7 @@
 
         private:
             mutable XmlWriter* m_writer = nullptr;
+            XmlFormatting m_fmt;
         };
 
         XmlWriter( std::ostream& os = Catch::cout() );
@@ -60,11 +69,11 @@
         XmlWriter( XmlWriter const& ) = delete;
         XmlWriter& operator=( XmlWriter const& ) = delete;
 
-        XmlWriter& startElement( std::string const& name );
+        XmlWriter& startElement( std::string const& name, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);
 
-        ScopedElement scopedElement( std::string const& name );
+        ScopedElement scopedElement( std::string const& name, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);
 
-        XmlWriter& endElement();
+        XmlWriter& endElement(XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);
 
         XmlWriter& writeAttribute( std::string const& name, std::string const& attribute );
 
@@ -77,9 +86,9 @@
             return writeAttribute( name, rss.str() );
         }
 
-        XmlWriter& writeText( std::string const& text, bool indent = true );
+        XmlWriter& writeText( std::string const& text, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);
 
-        XmlWriter& writeComment( std::string const& text );
+        XmlWriter& writeComment(std::string const& text, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);
 
         void writeStylesheetRef( std::string const& url );
 
@@ -89,6 +98,8 @@
 
     private:
 
+        void applyFormatting(XmlFormatting fmt);
+
         void writeDeclaration();
 
         void newlineIfNecessary();
diff --git a/include/reporters/catch_reporter_junit.cpp b/include/reporters/catch_reporter_junit.cpp
index f47f58f..820b574 100644
--- a/include/reporters/catch_reporter_junit.cpp
+++ b/include/reporters/catch_reporter_junit.cpp
@@ -147,8 +147,8 @@
         for( auto const& child : groupNode.children )
             writeTestCase( *child );
 
-        xml.scopedElement( "system-out" ).writeText( trim( stdOutForSuite ), false );
-        xml.scopedElement( "system-err" ).writeText( trim( stdErrForSuite ), false );
+        xml.scopedElement( "system-out" ).writeText( trim( stdOutForSuite ), XmlFormatting::Newline );
+        xml.scopedElement( "system-err" ).writeText( trim( stdErrForSuite ), XmlFormatting::Newline );
     }
 
     void JunitReporter::writeTestCase( TestCaseNode const& testCaseNode ) {
@@ -197,9 +197,9 @@
             writeAssertions( sectionNode );
 
             if( !sectionNode.stdOut.empty() )
-                xml.scopedElement( "system-out" ).writeText( trim( sectionNode.stdOut ), false );
+                xml.scopedElement( "system-out" ).writeText( trim( sectionNode.stdOut ), XmlFormatting::Newline );
             if( !sectionNode.stdErr.empty() )
-                xml.scopedElement( "system-err" ).writeText( trim( sectionNode.stdErr ), false );
+                xml.scopedElement( "system-err" ).writeText( trim( sectionNode.stdErr ), XmlFormatting::Newline );
         }
         for( auto const& childNode : sectionNode.childSections )
             if( className.empty() )
@@ -271,7 +271,7 @@
                     rss << msg.message << '\n';
 
             rss << "at " << result.getSourceInfo();
-            xml.writeText( rss.str(), false );
+            xml.writeText( rss.str(), XmlFormatting::Newline );
         }
     }
 
diff --git a/include/reporters/catch_reporter_sonarqube.hpp b/include/reporters/catch_reporter_sonarqube.hpp
index b860293..bf7d929 100644
--- a/include/reporters/catch_reporter_sonarqube.hpp
+++ b/include/reporters/catch_reporter_sonarqube.hpp
@@ -162,7 +162,7 @@
                         textRss << msg.message << "\n";
 
                 textRss << "at " << result.getSourceInfo();
-                xml.writeText(textRss.str(), false);
+                xml.writeText(textRss.str(), XmlFormatting::Newline);
             }
         }
 
diff --git a/include/reporters/catch_reporter_xml.cpp b/include/reporters/catch_reporter_xml.cpp
index 26ca891..e110317 100644
--- a/include/reporters/catch_reporter_xml.cpp
+++ b/include/reporters/catch_reporter_xml.cpp
@@ -193,9 +193,9 @@
             e.writeAttribute( "durationInSeconds", m_testCaseTimer.getElapsedSeconds() );
 
         if( !testCaseStats.stdOut.empty() )
-            m_xml.scopedElement( "StdOut" ).writeText( trim( testCaseStats.stdOut ), false );
+            m_xml.scopedElement( "StdOut" ).writeText( trim( testCaseStats.stdOut ), XmlFormatting::Newline );
         if( !testCaseStats.stdErr.empty() )
-            m_xml.scopedElement( "StdErr" ).writeText( trim( testCaseStats.stdErr ), false );
+            m_xml.scopedElement( "StdErr" ).writeText( trim( testCaseStats.stdErr ), XmlFormatting::Newline );
 
         m_xml.endElement();
     }
diff --git a/projects/SelfTest/UsageTests/Tricky.tests.cpp b/projects/SelfTest/UsageTests/Tricky.tests.cpp
index d8e5465..55fe623 100644
--- a/projects/SelfTest/UsageTests/Tricky.tests.cpp
+++ b/projects/SelfTest/UsageTests/Tricky.tests.cpp
@@ -390,12 +390,6 @@
     }
 }
 
-TEST_CASE( "null deref", "[.][failing][!nonportable]" ) {
-    CHECK( false );
-    int *x = NULL;
-    *x = 1;
-}
-
 TEST_CASE( "non-copyable objects", "[.][failing]" ) {
     // Thanks to Agustin Bergé (@k-ballo on the cpplang Slack) for raising this
     std::type_info const& ti = typeid(int);
diff --git a/docs/deprecations.md b/docs/deprecations.md
index 7783029..c2b178e 100644
--- a/docs/deprecations.md
+++ b/docs/deprecations.md
@@ -93,6 +93,17 @@
 The API for Catch2's console colour will be changed to take an extra
 argument, the stream to which the colour code should be applied.
 
+
+### Type erasure in the `PredicateMatcher`
+
+Currently, the `PredicateMatcher` uses `std::function` for type erasure,
+so that type of the matcher is always `PredicateMatcher<T>`, regardless
+of the type of the predicate. Because of the high compilation overhead
+of `std::function`, and the fact that the type erasure is used only rarely,
+`PredicateMatcher` will no longer be type erased in the future. Instead,
+the predicate type will be made part of the PredicateMatcher's type.
+
+
 ---
 
 [Home](Readme.md#top)
diff --git a/include/internal/catch_generators_generic.hpp b/include/internal/catch_generators_generic.hpp
index 81fd385..c341014 100644
--- a/include/internal/catch_generators_generic.hpp
+++ b/include/internal/catch_generators_generic.hpp
@@ -8,6 +8,7 @@
 #define TWOBLUECUBES_CATCH_GENERATORS_GENERIC_HPP_INCLUDED
 
 #include "catch_generators.hpp"
+#include "catch_meta.hpp"
 
 namespace Catch {
 namespace Generators {
@@ -172,18 +173,7 @@
         }
     };
 
-#if defined(__cpp_lib_is_invocable) && __cpp_lib_is_invocable >= 201703
-    // std::result_of is deprecated in C++17 and removed in C++20. Hence, it is
-    // replaced with std::invoke_result here. Also *_t format is preferred over
-    // typename *::type format.
-    template <typename Func, typename U>
-    using MapFunctionReturnType = std::remove_reference_t<std::remove_cv_t<std::invoke_result_t<Func, U>>>;
-#else
-    template <typename Func, typename U>
-    using MapFunctionReturnType = typename std::remove_reference<typename std::remove_cv<typename std::result_of<Func(U)>::type>::type>::type;
-#endif
-
-    template <typename Func, typename U, typename T = MapFunctionReturnType<Func, U>>
+    template <typename Func, typename U, typename T = FunctionReturnType<Func, U>>
     GeneratorWrapper<T> map(Func&& function, GeneratorWrapper<U>&& generator) {
         return GeneratorWrapper<T>(
             pf::make_unique<MapGenerator<T, U, Func>>(std::forward<Func>(function), std::move(generator))
diff --git a/include/internal/catch_meta.hpp b/include/internal/catch_meta.hpp
index 8529766..4eca7ef 100644
--- a/include/internal/catch_meta.hpp
+++ b/include/internal/catch_meta.hpp
@@ -12,22 +12,34 @@
 #include <type_traits>
 
 namespace Catch {
-template<typename T>
-struct always_false : std::false_type {};
+    template<typename T>
+    struct always_false : std::false_type {};
 
-template <typename> struct true_given : std::true_type {};
-struct is_callable_tester {
+    template <typename> struct true_given : std::true_type {};
+    struct is_callable_tester {
+        template <typename Fun, typename... Args>
+        true_given<decltype(std::declval<Fun>()(std::declval<Args>()...))> static test(int);
+        template <typename...>
+        std::false_type static test(...);
+    };
+
+    template <typename T>
+    struct is_callable;
+
     template <typename Fun, typename... Args>
-    true_given<decltype(std::declval<Fun>()(std::declval<Args>()...))> static test(int);
-    template <typename...>
-    std::false_type static test(...);
-};
+    struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};
 
-template <typename T>
-struct is_callable;
 
-template <typename Fun, typename... Args>
-struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};
+#if defined(__cpp_lib_is_invocable) && __cpp_lib_is_invocable >= 201703
+    // std::result_of is deprecated in C++17 and removed in C++20. Hence, it is
+    // replaced with std::invoke_result here. Also *_t format is preferred over
+    // typename *::type format.
+    template <typename Func, typename U>
+    using FunctionReturnType = std::remove_reference_t<std::remove_cv_t<std::invoke_result_t<Func, U>>>;
+#else
+    template <typename Func, typename U>
+    using FunctionReturnType = typename std::remove_reference<typename std::remove_cv<typename std::result_of<Func(U)>::type>::type>::type;
+#endif
 
 } // namespace Catch
 
diff --git a/include/internal/benchmark/detail/catch_stats.cpp b/include/internal/benchmark/detail/catch_stats.cpp
index 40e0ea9..b85b740 100644
--- a/include/internal/benchmark/detail/catch_stats.cpp
+++ b/include/internal/benchmark/detail/catch_stats.cpp
@@ -176,9 +176,10 @@
 
 
             bootstrap_analysis analyse_samples(double confidence_level, int n_resamples, std::vector<double>::iterator first, std::vector<double>::iterator last) {
+                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION
                 CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
                 static std::random_device entropy;
-                CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
                 auto n = static_cast<int>(last - first); // seriously, one can't use integral types without hell in C++
 
diff --git a/include/internal/catch_capture.hpp b/include/internal/catch_capture.hpp
index 303e891..ba842c3 100644
--- a/include/internal/catch_capture.hpp
+++ b/include/internal/catch_capture.hpp
@@ -43,9 +43,10 @@
     do { \
         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
         INTERNAL_CATCH_TRY { \
+            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
             CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
             catchAssertionHandler.handleExpr( Catch::Decomposer() <= __VA_ARGS__ ); \
-            CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
+            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
         INTERNAL_CATCH_REACT( catchAssertionHandler ) \
     } while( (void)0, (false) && static_cast<bool>( !!(__VA_ARGS__) ) ) // the expression here is never evaluated at runtime but it forces the compiler to give it a look
diff --git a/include/internal/catch_compiler_capabilities.h b/include/internal/catch_compiler_capabilities.h
index 4daa5e8..18128a8 100644
--- a/include/internal/catch_compiler_capabilities.h
+++ b/include/internal/catch_compiler_capabilities.h
@@ -43,38 +43,34 @@
 #  define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
 #endif
 
-#ifdef __clang__
+// We have to avoid both ICC and Clang, because they try to mask themselves
+// as gcc, and we want only GCC in this block
+#if defined(__GNUC__) && !defined(__clang__) && !defined(__ICC)
+#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( "GCC diagnostic push" )
+#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( "GCC diagnostic pop" )
+#endif
 
-#       define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
-            _Pragma( "clang diagnostic push" ) \
-            _Pragma( "clang diagnostic ignored \"-Wexit-time-destructors\"" ) \
-            _Pragma( "clang diagnostic ignored \"-Wglobal-constructors\"")
-#       define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
-            _Pragma( "clang diagnostic pop" )
+#if defined(__clang__)
 
-#       define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
-            _Pragma( "clang diagnostic push" ) \
-            _Pragma( "clang diagnostic ignored \"-Wparentheses\"" )
-#       define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
-            _Pragma( "clang diagnostic pop" )
+#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( "clang diagnostic push" )
+#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( "clang diagnostic pop" )
 
-#       define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
-            _Pragma( "clang diagnostic push" ) \
-            _Pragma( "clang diagnostic ignored \"-Wunused-variable\"" )
-#       define CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS \
-            _Pragma( "clang diagnostic pop" )
+#    define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
+         _Pragma( "clang diagnostic ignored \"-Wexit-time-destructors\"" ) \
+         _Pragma( "clang diagnostic ignored \"-Wglobal-constructors\"")
 
-#       define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
-            _Pragma( "clang diagnostic push" ) \
-            _Pragma( "clang diagnostic ignored \"-Wgnu-zero-variadic-macro-arguments\"" )
-#       define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
-            _Pragma( "clang diagnostic pop" )
+#    define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
+         _Pragma( "clang diagnostic ignored \"-Wparentheses\"" )
 
-#       define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
-            _Pragma( "clang diagnostic push" ) \
-            _Pragma( "clang diagnostic ignored \"-Wunused-template\"" )
-#       define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
-            _Pragma( "clang diagnostic pop" )
+#    define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
+         _Pragma( "clang diagnostic ignored \"-Wunused-variable\"" )
+
+#    define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
+         _Pragma( "clang diagnostic ignored \"-Wgnu-zero-variadic-macro-arguments\"" )
+
+#    define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+         _Pragma( "clang diagnostic ignored \"-Wunused-template\"" )
+
 #endif // __clang__
 
 
@@ -133,8 +129,10 @@
 
 ////////////////////////////////////////////////////////////////////////////////
 // Visual C++
-#ifdef _MSC_VER
+#if defined(_MSC_VER)
 
+#  define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION __pragma( warning(push) )
+#  define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  __pragma( warning(pop) )
 
 #  if _MSC_VER >= 1900 // Visual Studio 2015 or newer
 #    define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
@@ -309,34 +307,37 @@
 #  define CATCH_CONFIG_GLOBAL_NEXTAFTER
 #endif
 
+
+// Even if we do not think the compiler has that warning, we still have
+// to provide a macro that can be used by the code.
+#if !defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)
+#   define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION
+#endif
+#if !defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)
+#   define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
+#endif
 #if !defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
-#   define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS
 #endif
 #if !defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
-#   define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 #endif
 #if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
-#   define CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
 #endif
 #if !defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS
-#   define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS
 #endif
+
 
 #if defined(__APPLE__) && defined(__apple_build_version__) && (__clang_major__ < 10)
 #   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
-#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
 #elif defined(__clang__) && (__clang_major__ < 5)
 #   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
-#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
 #endif
 
 #if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
-#   define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
 #endif
 
 #if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
diff --git a/include/internal/catch_interfaces_exception.h b/include/internal/catch_interfaces_exception.h
index 430701c..d3254d5 100644
--- a/include/internal/catch_interfaces_exception.h
+++ b/include/internal/catch_interfaces_exception.h
@@ -73,9 +73,10 @@
 ///////////////////////////////////////////////////////////////////////////////
 #define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName, signature ) \
     static std::string translatorName( signature ); \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
     namespace{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); } \
-    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
     static std::string translatorName( signature )
 
 #define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
diff --git a/include/internal/catch_reporter_registrars.hpp b/include/internal/catch_reporter_registrars.hpp
index 459caef..a195053 100644
--- a/include/internal/catch_reporter_registrars.hpp
+++ b/include/internal/catch_reporter_registrars.hpp
@@ -58,14 +58,16 @@
 #if !defined(CATCH_CONFIG_DISABLE)
 
 #define CATCH_REGISTER_REPORTER( name, reporterType ) \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION         \
     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS          \
     namespace{ Catch::ReporterRegistrar<reporterType> catch_internal_RegistrarFor##reporterType( name ); } \
-    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
 #define CATCH_REGISTER_LISTENER( listenerType ) \
-    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION   \
+    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS    \
     namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
-    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 #else // CATCH_CONFIG_DISABLE
 
 #define CATCH_REGISTER_REPORTER(name, reporterType)
diff --git a/include/internal/catch_section.h b/include/internal/catch_section.h
index 00c254b..cc2b323 100644
--- a/include/internal/catch_section.h
+++ b/include/internal/catch_section.h
@@ -37,13 +37,15 @@
 } // end namespace Catch
 
 #define INTERNAL_CATCH_SECTION( ... ) \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
     CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
     if( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \
-    CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
 #define INTERNAL_CATCH_DYNAMIC_SECTION( ... ) \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
     CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
     if( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, (Catch::ReusableStringStream() << __VA_ARGS__).str() ) ) \
-    CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
 #endif // TWOBLUECUBES_CATCH_SECTION_H_INCLUDED
diff --git a/include/internal/catch_tag_alias_autoregistrar.h b/include/internal/catch_tag_alias_autoregistrar.h
index 32a5734..ebba8e2 100644
--- a/include/internal/catch_tag_alias_autoregistrar.h
+++ b/include/internal/catch_tag_alias_autoregistrar.h
@@ -18,8 +18,9 @@
 } // end namespace Catch
 
 #define CATCH_REGISTER_TAG_ALIAS( alias, spec ) \
+    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
     namespace{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); } \
-    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
 #endif // TWOBLUECUBES_CATCH_TAG_ALIAS_AUTOREGISTRAR_H_INCLUDED
diff --git a/include/internal/catch_test_registry.h b/include/internal/catch_test_registry.h
index dd1ccfc..c9624fc 100644
--- a/include/internal/catch_test_registry.h
+++ b/include/internal/catch_test_registry.h
@@ -75,7 +75,7 @@
     #else
         #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name, Tags, ...) \
             INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ ) )
-    #endif  
+    #endif
 
     #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
         #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name, Tags, Signature, ...) \
@@ -105,21 +105,24 @@
     ///////////////////////////////////////////////////////////////////////////////
     #define INTERNAL_CATCH_TESTCASE2( TestName, ... ) \
         static void TestName(); \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &TestName ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         static void TestName()
     #define INTERNAL_CATCH_TESTCASE( ... ) \
         INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), __VA_ARGS__ )
 
     ///////////////////////////////////////////////////////////////////////////////
     #define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &QualifiedMethod ), CATCH_INTERNAL_LINEINFO, "&" #QualifiedMethod, Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
     ///////////////////////////////////////////////////////////////////////////////
     #define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName, ClassName, ... )\
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         namespace{ \
             struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \
@@ -127,19 +130,21 @@
             }; \
             Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar ) ( Catch::makeTestInvoker( &TestName::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
         } \
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         void TestName::test()
     #define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... ) \
         INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), ClassName, __VA_ARGS__ )
 
     ///////////////////////////////////////////////////////////////////////////////
     #define INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
     ///////////////////////////////////////////////////////////////////////////////
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName, TestFunc, Name, Tags, Signature, ... )\
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
@@ -164,9 +169,7 @@
         }();\
         }\
         }\
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
-        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
@@ -175,7 +178,7 @@
 #else
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \
         INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ ) )
-#endif  
+#endif
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \
@@ -186,9 +189,10 @@
 #endif
 
     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName, TestFuncName, Name, Tags, Signature, TmplTypes, TypesList) \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                      \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                      \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS                \
-        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS                       \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS              \
         template<typename TestType> static void TestFuncName();       \
         namespace {\
         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                     \
@@ -213,9 +217,7 @@
             }();                                                      \
         }                                                             \
         }                                                             \
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
-        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS              \
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS                     \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \
         template<typename TestType>                                   \
         static void TestFuncName()
 
@@ -236,6 +238,7 @@
 #endif
 
     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName, TestFunc, Name, Tags, TmplList)\
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> static void TestFunc();       \
@@ -255,10 +258,9 @@
                 TestInit t;                                           \
                 t.reg_tests();                                        \
                 return 0;                                             \
-            }();                                                        \
+            }();                                                      \
         }}\
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \
         template<typename TestType>                                   \
         static void TestFunc()
 
@@ -267,6 +269,7 @@
 
 
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... ) \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
@@ -291,9 +294,7 @@
         }();\
         }\
         }\
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS\
-        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS\
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS\
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
@@ -313,6 +314,7 @@
 #endif
 
     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass, TestName, ClassName, Name, Tags, Signature, TmplTypes, TypesList)\
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
@@ -343,9 +345,7 @@
             }(); \
         }\
         }\
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
-        CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         template<typename TestType> \
         void TestName<TestType>::test()
 
@@ -366,6 +366,7 @@
 #endif
 
     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, TmplList) \
+        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> \
@@ -390,8 +391,7 @@
                 return 0;\
             }(); \
         }}\
-        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
-        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
         template<typename TestType> \
         void TestName<TestType>::test()
 
diff --git a/projects/SelfTest/UsageTests/Misc.tests.cpp b/projects/SelfTest/UsageTests/Misc.tests.cpp
index 188bc2d..808d1d0 100644
--- a/projects/SelfTest/UsageTests/Misc.tests.cpp
+++ b/projects/SelfTest/UsageTests/Misc.tests.cpp
@@ -58,9 +58,11 @@
         REGISTER_TEST_CASE( manuallyRegisteredTestFunction, "ManuallyRegistered" );
     }
 };
+
+CATCH_INTERNAL_START_WARNINGS_SUPPRESSION
 CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 static AutoTestReg autoTestReg;
-CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
+CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
 
 template<typename T>
 struct Foo {
diff --git a/include/internal/catch_tostring.cpp b/include/internal/catch_tostring.cpp
index 2f66f49..a289c34 100644
--- a/include/internal/catch_tostring.cpp
+++ b/include/internal/catch_tostring.cpp
@@ -38,13 +38,11 @@
             enum Arch { Big, Little };
 
             static Arch which() {
-                union _{
-                    int asInt;
-                    char asChar[sizeof (int)];
-                } u;
-
-                u.asInt = 1;
-                return ( u.asChar[sizeof(int)-1] == 1 ) ? Big : Little;
+                int one = 1;
+                // If the lowest byte we read is non-zero, we can assume
+                // that little endian format is used.
+                auto value = *reinterpret_cast<char*>(&one);
+                return value ? Little : Big;
             }
         };
     }
@@ -241,13 +239,13 @@
 }
 
 int StringMaker<float>::precision = 5;
-   
+
 std::string StringMaker<float>::convert(float value) {
     return fpToString(value, precision) + 'f';
 }
 
 int StringMaker<double>::precision = 10;
-    
+
 std::string StringMaker<double>::convert(double value) {
     return fpToString(value, precision);
 }
diff --git a/include/reporters/catch_reporter_junit.cpp b/include/reporters/catch_reporter_junit.cpp
index e837586..f47f58f 100644
--- a/include/reporters/catch_reporter_junit.cpp
+++ b/include/reporters/catch_reporter_junit.cpp
@@ -12,6 +12,7 @@
 
 #include "../internal/catch_tostring.h"
 #include "../internal/catch_reporter_registrars.hpp"
+#include "../internal/catch_text.h"
 
 #include <cassert>
 #include <sstream>
@@ -244,10 +245,25 @@
 
             XmlWriter::ScopedElement e = xml.scopedElement( elementName );
 
-            xml.writeAttribute( "message", result.getExpandedExpression() );
+            xml.writeAttribute( "message", result.getExpression() );
             xml.writeAttribute( "type", result.getTestMacroName() );
 
             ReusableStringStream rss;
+            if (stats.totals.assertions.total() > 0) {
+                rss << "FAILED" << ":\n";
+                if (result.hasExpression()) {
+                    rss << "  ";
+                    rss << result.getExpressionInMacro();
+                    rss << '\n';
+                }
+                if (result.hasExpandedExpression()) {
+                    rss << "with expansion:\n";
+                    rss << Column(result.getExpandedExpression()).indent(2) << '\n';
+                }
+            } else {
+                rss << '\n';
+            }
+
             if( !result.getMessage().empty() )
                 rss << result.getMessage() << '\n';
             for( auto const& msg : stats.infoMessages )
diff --git a/projects/SelfTest/Baselines/junit.sw.approved.txt b/projects/SelfTest/Baselines/junit.sw.approved.txt
index 82bf925..588c3a2 100644
--- a/projects/SelfTest/Baselines/junit.sw.approved.txt
+++ b/projects/SelfTest/Baselines/junit.sw.approved.txt
@@ -18,6 +18,7 @@
     <testcase classname="<exe-name>.global" name="#1455 - INFO and WARN can start with a linebreak" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="#1514: stderr/stdout is not captured in tests aborted by an exception" time="{duration}">
       <failure type="FAIL">
+FAILED:
 1514
 Tricky.tests.cpp:<line number>
       </failure>
@@ -31,6 +32,7 @@
     <testcase classname="<exe-name>.global" name="#1548" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="#748 - captures with unexpected exceptions/outside assertions" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 expected exception
 answer := 42
 Exception.tests.cpp:<line number>
@@ -38,6 +40,8 @@
     </testcase>
     <testcase classname="<exe-name>.global" name="#748 - captures with unexpected exceptions/inside REQUIRE_NOTHROW" time="{duration}">
       <error message="thisThrows()" type="REQUIRE_NOTHROW">
+FAILED:
+  REQUIRE_NOTHROW( thisThrows() )
 expected exception
 answer := 42
 Exception.tests.cpp:<line number>
@@ -47,7 +51,11 @@
     <testcase classname="<exe-name>.global" name="#809" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="#833" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="#835 -- errno should not be touched by Catch" time="{duration}">
-      <failure message="1 == 0" type="CHECK">
+      <failure message="f() == 0" type="CHECK">
+FAILED:
+  CHECK( f() == 0 )
+with expansion:
+  1 == 0
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -59,27 +67,53 @@
     <testcase classname="<exe-name>.global" name="#961 -- Dynamically created sections should all be reported/Looped section 4" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="'Not' checks that should fail" time="{duration}">
       <failure message="false != false" type="CHECK">
+FAILED:
+  CHECK( false != false )
 Condition.tests.cpp:<line number>
       </failure>
       <failure message="true != true" type="CHECK">
+FAILED:
+  CHECK( true != true )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="false" type="CHECK">
+      <failure message="!true" type="CHECK">
+FAILED:
+  CHECK( !true )
+with expansion:
+  false
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="!true" type="CHECK_FALSE">
+      <failure message="!(true)" type="CHECK_FALSE">
+FAILED:
+  CHECK_FALSE( true )
+with expansion:
+  !true
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="false" type="CHECK">
+      <failure message="!trueValue" type="CHECK">
+FAILED:
+  CHECK( !trueValue )
+with expansion:
+  false
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="!true" type="CHECK_FALSE">
+      <failure message="!(trueValue)" type="CHECK_FALSE">
+FAILED:
+  CHECK_FALSE( trueValue )
+with expansion:
+  !true
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="false" type="CHECK">
+      <failure message="!(1 == 1)" type="CHECK">
+FAILED:
+  CHECK( !(1 == 1) )
+with expansion:
+  false
 Condition.tests.cpp:<line number>
       </failure>
       <failure message="!(1 == 1)" type="CHECK_FALSE">
+FAILED:
+  CHECK_FALSE( 1 == 1 )
 Condition.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -91,28 +125,48 @@
     <testcase classname="<exe-name>.global" name="(unimplemented) static bools can be evaluated/direct" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="3x3x3 ints" time="{duration}"/>
     <testcase classname="<exe-name>.TestClass" name="A METHOD_AS_TEST_CASE based test run that fails" time="{duration}">
-      <failure message="&quot;hello&quot; == &quot;world&quot;" type="REQUIRE">
+      <failure message="s == &quot;world&quot;" type="REQUIRE">
+FAILED:
+  REQUIRE( s == "world" )
+with expansion:
+  "hello" == "world"
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.TestClass" name="A METHOD_AS_TEST_CASE based test run that succeeds" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" time="{duration}">
-      <failure message="0 == 1" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>::m_a.size() == 1" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+  0 == 1
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" time="{duration}">
-      <failure message="0 == 1" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>::m_a.size() == 1" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+  0 == 1
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" time="{duration}">
-      <failure message="0 == 1" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>::m_a.size() == 1" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+  0 == 1
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" time="{duration}">
-      <failure message="0 == 1" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>::m_a.size() == 1" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+  0 == 1
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -121,22 +175,38 @@
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>" time="{duration}">
-      <failure message="6 &lt; 2" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+  6 &lt; 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>" time="{duration}">
-      <failure message="2 &lt; 2" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+  2 &lt; 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>" time="{duration}">
-      <failure message="6 &lt; 2" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+  6 &lt; 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>" time="{duration}">
-      <failure message="2 &lt; 2" type="REQUIRE">
+      <failure message="Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+  2 &lt; 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -145,17 +215,29 @@
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture_2" name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" time="{duration}">
-      <failure message="1.0 == 2" type="REQUIRE">
+      <failure message="Template_Fixture&lt;TestType>::m_a == 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+  1.0 == 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" time="{duration}">
-      <failure message="1.0f == 2" type="REQUIRE">
+      <failure message="Template_Fixture&lt;TestType>::m_a == 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+  1.0f == 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" time="{duration}">
-      <failure message="1 == 2" type="REQUIRE">
+      <failure message="Template_Fixture&lt;TestType>::m_a == 2" type="REQUIRE">
+FAILED:
+  REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+  1 == 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -163,17 +245,29 @@
     <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" time="{duration}"/>
     <testcase classname="<exe-name>.Template_Fixture" name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" time="{duration}"/>
     <testcase classname="<exe-name>.Nttp_Fixture" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1" time="{duration}">
-      <failure message="1 == 0" type="REQUIRE">
+      <failure message="Nttp_Fixture&lt;V>::value == 0" type="REQUIRE">
+FAILED:
+  REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+  1 == 0
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Nttp_Fixture" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3" time="{duration}">
-      <failure message="3 == 0" type="REQUIRE">
+      <failure message="Nttp_Fixture&lt;V>::value == 0" type="REQUIRE">
+FAILED:
+  REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+  3 == 0
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.Nttp_Fixture" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6" time="{duration}">
-      <failure message="6 == 0" type="REQUIRE">
+      <failure message="Nttp_Fixture&lt;V>::value == 0" type="REQUIRE">
+FAILED:
+  REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+  6 == 0
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -181,7 +275,11 @@
     <testcase classname="<exe-name>.Nttp_Fixture" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3" time="{duration}"/>
     <testcase classname="<exe-name>.Nttp_Fixture" name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6" time="{duration}"/>
     <testcase classname="<exe-name>.Fixture" name="A TEST_CASE_METHOD based test run that fails" time="{duration}">
-      <failure message="1 == 2" type="REQUIRE">
+      <failure message="m_a == 2" type="REQUIRE">
+FAILED:
+  REQUIRE( m_a == 2 )
+with expansion:
+  1 == 2
 Class.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -197,16 +295,25 @@
     <testcase classname="<exe-name>.global" name="A comparison that uses literals instead of the normal constructor" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="A couple of nested sections followed by a failure" time="{duration}">
       <failure type="FAIL">
+FAILED:
 to infinity and beyond
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="A couple of nested sections followed by a failure/Outer/Inner" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="A failing expression with a non streamable type is still captured" time="{duration}">
-      <failure message="0x<hex digits> == 0x<hex digits>" type="CHECK">
+      <failure message="&amp;o1 == &amp;o2" type="CHECK">
+FAILED:
+  CHECK( &amp;o1 == &amp;o2 )
+with expansion:
+  0x<hex digits> == 0x<hex digits>
 Tricky.tests.cpp:<line number>
       </failure>
-      <failure message="{?} == {?}" type="CHECK">
+      <failure message="o1 == o2" type="CHECK">
+FAILED:
+  CHECK( o1 == o2 )
+with expansion:
+  {?} == {?}
 Tricky.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -214,6 +321,8 @@
     <testcase classname="<exe-name>.global" name="An expression with side-effects should only be evaluated once" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="An unchecked exception reports the line of the last assertion" time="{duration}">
       <error message="{Unknown expression after the reported line}">
+FAILED:
+  {Unknown expression after the reported line}
 unexpected exception
 Exception.tests.cpp:<line number>
       </error>
@@ -248,10 +357,19 @@
     <testcase classname="<exe-name>.global" name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Comparisons with int literals don't warn when mixing signed/ unsigned" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Contains string matcher" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; contains: &quot;not there&quot; (case insensitive)" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Contains(&quot;not there&quot;, Catch::CaseSensitive::No)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Contains("not there", Catch::CaseSensitive::No) )
+with expansion:
+  "this string contains 'abc' as a substring" contains: "not there" (case
+  insensitive)
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; contains: &quot;STRING&quot;" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Contains(&quot;STRING&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Contains("STRING") )
+with expansion:
+  "this string contains 'abc' as a substring" contains: "STRING"
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -260,18 +378,23 @@
     <testcase classname="<exe-name>.global" name="Copy and then generate a range/Final validation" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Custom exceptions can be translated when testing for nothrow" time="{duration}">
       <error message="throwCustom()" type="REQUIRE_NOTHROW">
+FAILED:
+  REQUIRE_NOTHROW( throwCustom() )
 custom exception - not std
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="Custom exceptions can be translated when testing for throwing as something else" time="{duration}">
       <error message="throwCustom(), std::exception" type="REQUIRE_THROWS_AS">
+FAILED:
+  REQUIRE_THROWS_AS( throwCustom(), std::exception )
 custom exception - not std
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="Custom std-exceptions can be custom translated" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 custom std exception
 Exception.tests.cpp:<line number>
       </error>
@@ -279,10 +402,19 @@
     <testcase classname="<exe-name>.global" name="Default scale is invisible to comparison" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Directly creating an EnumInfo" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="EndsWith string matcher" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; ends with: &quot;Substring&quot;" type="CHECK_THAT">
+      <failure message="testStringForMatching(), EndsWith(&quot;Substring&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), EndsWith("Substring") )
+with expansion:
+  "this string contains 'abc' as a substring" ends with: "Substring"
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; ends with: &quot;this&quot; (case insensitive)" type="CHECK_THAT">
+      <failure message="testStringForMatching(), EndsWith(&quot;this&quot;, Catch::CaseSensitive::No)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), EndsWith("this", Catch::CaseSensitive::No) )
+with expansion:
+  "this string contains 'abc' as a substring" ends with: "this" (case
+  insensitive)
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -290,80 +422,158 @@
     <testcase classname="<exe-name>.global" name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Epsilon only applies to Approx's value" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Equality checks that should fail" time="{duration}">
-      <failure message="7 == 6" type="CHECK">
+      <failure message="data.int_seven == 6" type="CHECK">
+FAILED:
+  CHECK( data.int_seven == 6 )
+with expansion:
+  7 == 6
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 == 8" type="CHECK">
+      <failure message="data.int_seven == 8" type="CHECK">
+FAILED:
+  CHECK( data.int_seven == 8 )
+with expansion:
+  7 == 8
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 == 0" type="CHECK">
+      <failure message="data.int_seven == 0" type="CHECK">
+FAILED:
+  CHECK( data.int_seven == 0 )
+with expansion:
+  7 == 0
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f == Approx( 9.1099996567 )" type="CHECK">
+      <failure message="data.float_nine_point_one == Approx( 9.11f )" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one == Approx( 9.11f ) )
+with expansion:
+  9.1f == Approx( 9.1099996567 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f == Approx( 9.0 )" type="CHECK">
+      <failure message="data.float_nine_point_one == Approx( 9.0f )" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one == Approx( 9.0f ) )
+with expansion:
+  9.1f == Approx( 9.0 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f == Approx( 1.0 )" type="CHECK">
+      <failure message="data.float_nine_point_one == Approx( 1 )" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one == Approx( 1 ) )
+with expansion:
+  9.1f == Approx( 1.0 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f == Approx( 0.0 )" type="CHECK">
+      <failure message="data.float_nine_point_one == Approx( 0 )" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one == Approx( 0 ) )
+with expansion:
+  9.1f == Approx( 0.0 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="3.1415926535 == Approx( 3.1415 )" type="CHECK">
+      <failure message="data.double_pi == Approx( 3.1415 )" type="CHECK">
+FAILED:
+  CHECK( data.double_pi == Approx( 3.1415 ) )
+with expansion:
+  3.1415926535 == Approx( 3.1415 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; == &quot;goodbye&quot;" type="CHECK">
+      <failure message="data.str_hello == &quot;goodbye&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello == "goodbye" )
+with expansion:
+  "hello" == "goodbye"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; == &quot;hell&quot;" type="CHECK">
+      <failure message="data.str_hello == &quot;hell&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello == "hell" )
+with expansion:
+  "hello" == "hell"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; == &quot;hello1&quot;" type="CHECK">
+      <failure message="data.str_hello == &quot;hello1&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello == "hello1" )
+with expansion:
+  "hello" == "hello1"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="5 == 6" type="CHECK">
+      <failure message="data.str_hello.size() == 6" type="CHECK">
+FAILED:
+  CHECK( data.str_hello.size() == 6 )
+with expansion:
+  5 == 6
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="1.3 == Approx( 1.301 )" type="CHECK">
+      <failure message="x == Approx( 1.301 )" type="CHECK">
+FAILED:
+  CHECK( x == Approx( 1.301 ) )
+with expansion:
+  1.3 == Approx( 1.301 )
 Condition.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Equality checks that should succeed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Equals" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Equals string matcher" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; equals: &quot;this string contains 'ABC' as a substring&quot;" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Equals(&quot;this string contains 'ABC' as a substring&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Equals("this string contains 'ABC' as a substring") )
+with expansion:
+  "this string contains 'abc' as a substring" equals: "this string contains
+  'ABC' as a substring"
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; equals: &quot;something else&quot; (case insensitive)" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Equals(&quot;something else&quot;, Catch::CaseSensitive::No)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Equals("something else", Catch::CaseSensitive::No) )
+with expansion:
+  "this string contains 'abc' as a substring" equals: "something else" (case
+  insensitive)
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Exception matchers that fail/No exception" time="{duration}">
       <failure message="doesNotThrow(), SpecialException, ExceptionMatcher{1}" type="CHECK_THROWS_MATCHES">
+FAILED:
+  CHECK_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{1} )
 Matchers.tests.cpp:<line number>
       </failure>
       <failure message="doesNotThrow(), SpecialException, ExceptionMatcher{1}" type="REQUIRE_THROWS_MATCHES">
+FAILED:
+  REQUIRE_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{1} )
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Exception matchers that fail/Type mismatch" time="{duration}">
       <error message="throwsAsInt(1), SpecialException, ExceptionMatcher{1}" type="CHECK_THROWS_MATCHES">
+FAILED:
+  CHECK_THROWS_MATCHES( throwsAsInt(1), SpecialException, ExceptionMatcher{1} )
 Unknown exception
 Matchers.tests.cpp:<line number>
       </error>
       <error message="throwsAsInt(1), SpecialException, ExceptionMatcher{1}" type="REQUIRE_THROWS_MATCHES">
+FAILED:
+  REQUIRE_THROWS_MATCHES( throwsAsInt(1), SpecialException, ExceptionMatcher{1} )
 Unknown exception
 Matchers.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="Exception matchers that fail/Contents are wrong" time="{duration}">
-      <failure message="SpecialException::what special exception has value of 1" type="CHECK_THROWS_MATCHES">
+      <failure message="throwsSpecialException(3), SpecialException, ExceptionMatcher{1}" type="CHECK_THROWS_MATCHES">
+FAILED:
+  CHECK_THROWS_MATCHES( throwsSpecialException(3), SpecialException, ExceptionMatcher{1} )
+with expansion:
+  SpecialException::what special exception has value of 1
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="SpecialException::what special exception has value of 1" type="REQUIRE_THROWS_MATCHES">
+      <failure message="throwsSpecialException(4), SpecialException, ExceptionMatcher{1}" type="REQUIRE_THROWS_MATCHES">
+FAILED:
+  REQUIRE_THROWS_MATCHES( throwsSpecialException(4), SpecialException, ExceptionMatcher{1} )
+with expansion:
+  SpecialException::what special exception has value of 1
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -374,30 +584,39 @@
     <testcase classname="<exe-name>.global" name="Exceptions matchers" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Expected exceptions that don't throw or unexpected exceptions fail the test" time="{duration}">
       <error message="thisThrows(), std::string" type="CHECK_THROWS_AS">
+FAILED:
+  CHECK_THROWS_AS( thisThrows(), std::string )
 expected exception
 Exception.tests.cpp:<line number>
       </error>
       <failure message="thisDoesntThrow(), std::domain_error" type="CHECK_THROWS_AS">
+FAILED:
+  CHECK_THROWS_AS( thisDoesntThrow(), std::domain_error )
 Exception.tests.cpp:<line number>
       </failure>
       <error message="thisThrows()" type="CHECK_NOTHROW">
+FAILED:
+  CHECK_NOTHROW( thisThrows() )
 expected exception
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="FAIL aborts the test" time="{duration}">
       <failure type="FAIL">
+FAILED:
 This is a failure
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="FAIL does not require an argument" time="{duration}">
       <failure type="FAIL">
+FAILED:
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="FAIL_CHECK does not abort the test" time="{duration}">
       <failure type="FAIL_CHECK">
+FAILED:
 This is a failure
 Message.tests.cpp:<line number>
       </failure>
@@ -453,19 +672,31 @@
     <testcase classname="<exe-name>.global" name="Greater-than inequalities with different epsilons" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="INFO and WARN do not abort tests" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="INFO gets logged on failure" time="{duration}">
-      <failure message="2 == 1" type="REQUIRE">
+      <failure message="a == 1" type="REQUIRE">
+FAILED:
+  REQUIRE( a == 1 )
+with expansion:
+  2 == 1
 this message should be logged
 so should this
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="INFO gets logged on failure, even if captured before successful assertions" time="{duration}">
-      <failure message="2 == 1" type="CHECK">
+      <failure message="a == 1" type="CHECK">
+FAILED:
+  CHECK( a == 1 )
+with expansion:
+  2 == 1
 this message may be logged later
 this message should be logged
 Message.tests.cpp:<line number>
       </failure>
-      <failure message="2 == 0" type="CHECK">
+      <failure message="a == 0" type="CHECK">
+FAILED:
+  CHECK( a == 0 )
+with expansion:
+  2 == 0
 this message may be logged later
 this message should be logged
 and this, but later
@@ -473,26 +704,50 @@
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="INFO is reset for each loop" time="{duration}">
-      <failure message="10 &lt; 10" type="REQUIRE">
+      <failure message="i &lt; 10" type="REQUIRE">
+FAILED:
+  REQUIRE( i &lt; 10 )
+with expansion:
+  10 &lt; 10
 current counter 10
 i := 10
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Inequality checks that should fail" time="{duration}">
-      <failure message="7 != 7" type="CHECK">
+      <failure message="data.int_seven != 7" type="CHECK">
+FAILED:
+  CHECK( data.int_seven != 7 )
+with expansion:
+  7 != 7
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f != Approx( 9.1000003815 )" type="CHECK">
+      <failure message="data.float_nine_point_one != Approx( 9.1f )" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one != Approx( 9.1f ) )
+with expansion:
+  9.1f != Approx( 9.1000003815 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="3.1415926535 != Approx( 3.1415926535 )" type="CHECK">
+      <failure message="data.double_pi != Approx( 3.1415926535 )" type="CHECK">
+FAILED:
+  CHECK( data.double_pi != Approx( 3.1415926535 ) )
+with expansion:
+  3.1415926535 != Approx( 3.1415926535 )
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; != &quot;hello&quot;" type="CHECK">
+      <failure message="data.str_hello != &quot;hello&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello != "hello" )
+with expansion:
+  "hello" != "hello"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="5 != 5" type="CHECK">
+      <failure message="data.str_hello.size() != 5" type="CHECK">
+FAILED:
+  CHECK( data.str_hello.size() != 5 )
+with expansion:
+  5 != 5
 Condition.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -503,18 +758,31 @@
     <testcase classname="<exe-name>.global" name="Matchers can be (AnyOf) composed with the || operator" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Matchers can be composed with both &amp;&amp; and ||" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Matchers can be composed with both &amp;&amp; and || - failing" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; ( ( contains: &quot;string&quot; or contains: &quot;different&quot; ) and contains: &quot;random&quot; )" type="CHECK_THAT">
+      <failure message="testStringForMatching(), (Contains(&quot;string&quot;) || Contains(&quot;different&quot;)) &amp;&amp; Contains(&quot;random&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), (Contains("string") || Contains("different")) &amp;&amp; Contains("random") )
+with expansion:
+  "this string contains 'abc' as a substring" ( ( contains: "string" or
+  contains: "different" ) and contains: "random" )
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Matchers can be negated (Not) with the ! operator" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Matchers can be negated (Not) with the ! operator - failing" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; not contains: &quot;substring&quot;" type="CHECK_THAT">
+      <failure message="testStringForMatching(), !Contains(&quot;substring&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), !Contains("substring") )
+with expansion:
+  "this string contains 'abc' as a substring" not contains: "substring"
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Mismatching exception messages failing the test" time="{duration}">
-      <failure message="&quot;expected exception&quot; equals: &quot;should fail&quot;" type="REQUIRE_THROWS_WITH">
+      <failure message="thisThrows(), &quot;should fail&quot;" type="REQUIRE_THROWS_WITH">
+FAILED:
+  REQUIRE_THROWS_WITH( thisThrows(), "should fail" )
+with expansion:
+  "expected exception" equals: "should fail"
 Exception.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -522,6 +790,7 @@
     <testcase classname="<exe-name>.global" name="Nice descriptive name" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Non-std exceptions can be translated" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 custom exception
 Exception.tests.cpp:<line number>
       </error>
@@ -529,61 +798,137 @@
     <testcase classname="<exe-name>.global" name="Objects that evaluated in boolean contexts can be checked" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Optionally static assertions" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Ordering comparison checks that should fail" time="{duration}">
-      <failure message="7 > 7" type="CHECK">
+      <failure message="data.int_seven > 7" type="CHECK">
+FAILED:
+  CHECK( data.int_seven > 7 )
+with expansion:
+  7 > 7
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 &lt; 7" type="CHECK">
+      <failure message="data.int_seven &lt; 7" type="CHECK">
+FAILED:
+  CHECK( data.int_seven &lt; 7 )
+with expansion:
+  7 &lt; 7
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 > 8" type="CHECK">
+      <failure message="data.int_seven > 8" type="CHECK">
+FAILED:
+  CHECK( data.int_seven > 8 )
+with expansion:
+  7 > 8
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 &lt; 6" type="CHECK">
+      <failure message="data.int_seven &lt; 6" type="CHECK">
+FAILED:
+  CHECK( data.int_seven &lt; 6 )
+with expansion:
+  7 &lt; 6
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 &lt; 0" type="CHECK">
+      <failure message="data.int_seven &lt; 0" type="CHECK">
+FAILED:
+  CHECK( data.int_seven &lt; 0 )
+with expansion:
+  7 &lt; 0
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 &lt; -1" type="CHECK">
+      <failure message="data.int_seven &lt; -1" type="CHECK">
+FAILED:
+  CHECK( data.int_seven &lt; -1 )
+with expansion:
+  7 &lt; -1
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 >= 8" type="CHECK">
+      <failure message="data.int_seven >= 8" type="CHECK">
+FAILED:
+  CHECK( data.int_seven >= 8 )
+with expansion:
+  7 >= 8
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="7 &lt;= 6" type="CHECK">
+      <failure message="data.int_seven &lt;= 6" type="CHECK">
+FAILED:
+  CHECK( data.int_seven &lt;= 6 )
+with expansion:
+  7 &lt;= 6
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f &lt; 9" type="CHECK">
+      <failure message="data.float_nine_point_one &lt; 9" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one &lt; 9 )
+with expansion:
+  9.1f &lt; 9
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f > 10" type="CHECK">
+      <failure message="data.float_nine_point_one > 10" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one > 10 )
+with expansion:
+  9.1f > 10
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="9.1f > 9.2" type="CHECK">
+      <failure message="data.float_nine_point_one > 9.2" type="CHECK">
+FAILED:
+  CHECK( data.float_nine_point_one > 9.2 )
+with expansion:
+  9.1f > 9.2
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; > &quot;hello&quot;" type="CHECK">
+      <failure message="data.str_hello > &quot;hello&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello > "hello" )
+with expansion:
+  "hello" > "hello"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; &lt; &quot;hello&quot;" type="CHECK">
+      <failure message="data.str_hello &lt; &quot;hello&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello &lt; "hello" )
+with expansion:
+  "hello" &lt; "hello"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; > &quot;hellp&quot;" type="CHECK">
+      <failure message="data.str_hello > &quot;hellp&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello > "hellp" )
+with expansion:
+  "hello" > "hellp"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; > &quot;z&quot;" type="CHECK">
+      <failure message="data.str_hello > &quot;z&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello > "z" )
+with expansion:
+  "hello" > "z"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; &lt; &quot;hellm&quot;" type="CHECK">
+      <failure message="data.str_hello &lt; &quot;hellm&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello &lt; "hellm" )
+with expansion:
+  "hello" &lt; "hellm"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; &lt; &quot;a&quot;" type="CHECK">
+      <failure message="data.str_hello &lt; &quot;a&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello &lt; "a" )
+with expansion:
+  "hello" &lt; "a"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; >= &quot;z&quot;" type="CHECK">
+      <failure message="data.str_hello >= &quot;z&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello >= "z" )
+with expansion:
+  "hello" >= "z"
 Condition.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;hello&quot; &lt;= &quot;a&quot;" type="CHECK">
+      <failure message="data.str_hello &lt;= &quot;a&quot;" type="CHECK">
+FAILED:
+  CHECK( data.str_hello &lt;= "a" )
+with expansion:
+  "hello" &lt;= "a"
 Condition.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -592,12 +937,14 @@
     <testcase classname="<exe-name>.global" name="Our PCG implementation provides expected results for known seeds/Specific seed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Output from all sections is reported/one" time="{duration}">
       <failure type="FAIL">
+FAILED:
 Message from section one
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Output from all sections is reported/two" time="{duration}">
       <failure type="FAIL">
+FAILED:
 Message from section two
 Message.tests.cpp:<line number>
       </failure>
@@ -672,18 +1019,37 @@
     <testcase classname="<exe-name>.global" name="Product with differing arities - std::tuple&lt;int, double>" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Product with differing arities - std::tuple&lt;int>" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Reconstruction should be based on stringification: #914" time="{duration}">
-      <failure message="Hey, its truthy!" type="CHECK">
+      <failure message="truthy(false)" type="CHECK">
+FAILED:
+  CHECK( truthy(false) )
+with expansion:
+  Hey, its truthy!
 Decomposition.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Regex string matcher" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;this STRING contains 'abc' as a substring&quot; case sensitively" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Matches(&quot;this STRING contains 'abc' as a substring&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Matches("this STRING contains 'abc' as a substring") )
+with expansion:
+  "this string contains 'abc' as a substring" matches "this STRING contains
+  'abc' as a substring" case sensitively
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;contains 'abc' as a substring&quot; case sensitively" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Matches(&quot;contains 'abc' as a substring&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Matches("contains 'abc' as a substring") )
+with expansion:
+  "this string contains 'abc' as a substring" matches "contains 'abc' as a
+  substring" case sensitively
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; matches &quot;this string contains 'abc' as a&quot; case sensitively" type="CHECK_THAT">
+      <failure message="testStringForMatching(), Matches(&quot;this string contains 'abc' as a&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), Matches("this string contains 'abc' as a") )
+with expansion:
+  "this string contains 'abc' as a substring" matches "this string contains
+  'abc' as a" case sensitively
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -716,10 +1082,19 @@
       </system-out>
     </testcase>
     <testcase classname="<exe-name>.global" name="StartsWith string matcher" time="{duration}">
-      <failure message="&quot;this string contains 'abc' as a substring&quot; starts with: &quot;This String&quot;" type="CHECK_THAT">
+      <failure message="testStringForMatching(), StartsWith(&quot;This String&quot;)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), StartsWith("This String") )
+with expansion:
+  "this string contains 'abc' as a substring" starts with: "This String"
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="&quot;this string contains 'abc' as a substring&quot; starts with: &quot;string&quot; (case insensitive)" type="CHECK_THAT">
+      <failure message="testStringForMatching(), StartsWith(&quot;string&quot;, Catch::CaseSensitive::No)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( testStringForMatching(), StartsWith("string", Catch::CaseSensitive::No) )
+with expansion:
+  "this string contains 'abc' as a substring" starts with: "string" (case
+  insensitive)
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -748,14 +1123,18 @@
     <testcase classname="<exe-name>.global" name="Stringifying std::chrono::duration with weird ratios" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Stringifying std::chrono::time_point&lt;system_clock>" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Tabs and newlines show in output" time="{duration}">
-      <failure message="&quot;if ($b == 10) {
-		$a	= 20;
-}&quot;
-==
-&quot;if ($b == 10) {
-	$a = 20;
-}
-&quot;" type="CHECK">
+      <failure message="s1 == s2" type="CHECK">
+FAILED:
+  CHECK( s1 == s2 )
+with expansion:
+  "if ($b == 10) {
+  		$a	= 20;
+  }"
+  ==
+  "if ($b == 10) {
+  	$a = 20;
+  }
+  "
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -826,6 +1205,7 @@
     <testcase classname="<exe-name>.global" name="This test 'should' fail but doesn't" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Thrown string literals are translated" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 For some reason someone is throwing a string literal!
 Exception.tests.cpp:<line number>
       </error>
@@ -843,6 +1223,7 @@
     <testcase classname="<exe-name>.global" name="Trim strings" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Unexpected exceptions can be translated" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 3.14
 Exception.tests.cpp:<line number>
       </error>
@@ -854,12 +1235,20 @@
     <testcase classname="<exe-name>.global" name="Vector Approx matcher/Vectors with elements/Different length" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Vector Approx matcher/Vectors with elements/Same length, different elements" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Vector Approx matcher -- failing/Empty and non empty vectors are not approx equal" time="{duration}">
-      <failure message="{  } is approx: { 1.0, 2.0 }" type="CHECK_THAT">
+      <failure message="empty, Approx(t1)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( empty, Approx(t1) )
+with expansion:
+  {  } is approx: { 1.0, 2.0 }
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Vector Approx matcher -- failing/Just different vectors" time="{duration}">
-      <failure message="{ 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }" type="CHECK_THAT">
+      <failure message="v1, Approx(v2)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v1, Approx(v2) )
+with expansion:
+  { 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -869,76 +1258,132 @@
     <testcase classname="<exe-name>.global" name="Vector matchers/Equals" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Vector matchers/UnorderedEquals" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Vector matchers that fail/Contains (element)" time="{duration}">
-      <failure message="{ 1, 2, 3 } Contains: -1" type="CHECK_THAT">
+      <failure message="v, VectorContains(-1)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v, VectorContains(-1) )
+with expansion:
+  { 1, 2, 3 } Contains: -1
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{  } Contains: 1" type="CHECK_THAT">
+      <failure message="empty, VectorContains(1)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( empty, VectorContains(1) )
+with expansion:
+  {  } Contains: 1
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Vector matchers that fail/Contains (vector)" time="{duration}">
-      <failure message="{  } Contains: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="empty, Contains(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( empty, Contains(v) )
+with expansion:
+  {  } Contains: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{ 1, 2, 3 } Contains: { 1, 2, 4 }" type="CHECK_THAT">
+      <failure message="v, Contains(v2)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v, Contains(v2) )
+with expansion:
+  { 1, 2, 3 } Contains: { 1, 2, 4 }
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Vector matchers that fail/Equals" time="{duration}">
-      <failure message="{ 1, 2, 3 } Equals: { 1, 2 }" type="CHECK_THAT">
+      <failure message="v, Equals(v2)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v, Equals(v2) )
+with expansion:
+  { 1, 2, 3 } Equals: { 1, 2 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{ 1, 2 } Equals: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="v2, Equals(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v2, Equals(v) )
+with expansion:
+  { 1, 2 } Equals: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{  } Equals: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="empty, Equals(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( empty, Equals(v) )
+with expansion:
+  {  } Equals: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{ 1, 2, 3 } Equals: {  }" type="CHECK_THAT">
+      <failure message="v, Equals(empty)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v, Equals(empty) )
+with expansion:
+  { 1, 2, 3 } Equals: {  }
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="Vector matchers that fail/UnorderedEquals" time="{duration}">
-      <failure message="{ 1, 2, 3 } UnorderedEquals: {  }" type="CHECK_THAT">
+      <failure message="v, UnorderedEquals(empty)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( v, UnorderedEquals(empty) )
+with expansion:
+  { 1, 2, 3 } UnorderedEquals: {  }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{  } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="empty, UnorderedEquals(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( empty, UnorderedEquals(v) )
+with expansion:
+  {  } UnorderedEquals: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{ 1, 3 } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="permuted, UnorderedEquals(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( permuted, UnorderedEquals(v) )
+with expansion:
+  { 1, 3 } UnorderedEquals: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
-      <failure message="{ 3, 1 } UnorderedEquals: { 1, 2, 3 }" type="CHECK_THAT">
+      <failure message="permuted, UnorderedEquals(v)" type="CHECK_THAT">
+FAILED:
+  CHECK_THAT( permuted, UnorderedEquals(v) )
+with expansion:
+  { 3, 1 } UnorderedEquals: { 1, 2, 3 }
 Matchers.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="When checked exceptions are thrown they can be expected or unexpected" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown directly they are always failures" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 unexpected exception
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown during a CHECK the test should continue" time="{duration}">
       <error message="thisThrows() == 0" type="CHECK">
+FAILED:
+  CHECK( thisThrows() == 0 )
 expected exception
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" time="{duration}">
       <error message="thisThrows() == 0" type="REQUIRE">
+FAILED:
+  REQUIRE( thisThrows() == 0 )
 expected exception
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown from functions they are always failures" time="{duration}">
       <error message="thisThrows() == 0" type="CHECK">
+FAILED:
+  CHECK( thisThrows() == 0 )
 expected exception
 Exception.tests.cpp:<line number>
       </error>
     </testcase>
     <testcase classname="<exe-name>.global" name="When unchecked exceptions are thrown from sections they are always failures/section name" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 unexpected exception
 Exception.tests.cpp:<line number>
       </error>
@@ -968,19 +1413,35 @@
     <testcase classname="<exe-name>.global" name="boolean member" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="checkedElse" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="checkedElse, failing" time="{duration}">
-      <failure message="false" type="CHECKED_ELSE">
+      <failure message="flag" type="CHECKED_ELSE">
+FAILED:
+  CHECKED_ELSE( flag )
+with expansion:
+  false
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="false" type="REQUIRE">
+      <failure message="testCheckedElse( false )" type="REQUIRE">
+FAILED:
+  REQUIRE( testCheckedElse( false ) )
+with expansion:
+  false
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="checkedIf" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="checkedIf, failing" time="{duration}">
-      <failure message="false" type="CHECKED_IF">
+      <failure message="flag" type="CHECKED_IF">
+FAILED:
+  CHECKED_IF( flag )
+with expansion:
+  false
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="false" type="REQUIRE">
+      <failure message="testCheckedIf( false )" type="REQUIRE">
+FAILED:
+  REQUIRE( testCheckedIf( false ) )
+with expansion:
+  false
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -991,24 +1452,34 @@
     <testcase classname="<exe-name>.global" name="even more nested SECTION tests/f (leaf)" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="just failure" time="{duration}">
       <failure type="FAIL">
+FAILED:
 Previous info should not be seen
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="just failure after unscoped info" time="{duration}">
       <failure type="FAIL">
+FAILED:
 previous unscoped info SHOULD not be seen
 Message.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="long long" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 0" time="{duration}">
-      <failure message="0 > 1" type="CHECK">
+      <failure message="b > a" type="CHECK">
+FAILED:
+  CHECK( b > a )
+with expansion:
+  0 > 1
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 1" time="{duration}">
-      <failure message="1 > 1" type="CHECK">
+      <failure message="b > a" type="CHECK">
+FAILED:
+  CHECK( b > a )
+with expansion:
+  1 > 1
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -1021,34 +1492,62 @@
     <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 8" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="looped SECTION tests/b is currently: 9" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="looped tests" time="{duration}">
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[0] (1) is even
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[1] (1) is even
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[3] (3) is even
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[4] (5) is even
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[6] (13) is even
 Misc.tests.cpp:<line number>
       </failure>
-      <failure message="1 == 0" type="CHECK">
+      <failure message="( fib[i] % 2 ) == 0" type="CHECK">
+FAILED:
+  CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+  1 == 0
 Testing if fib[7] (21) is even
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="mix info, unscoped info and warning" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="more nested SECTION tests/equal/doesn't equal" time="{duration}">
-      <failure message="1 == 2" type="REQUIRE">
+      <failure message="a == b" type="REQUIRE">
+FAILED:
+  REQUIRE( a == b )
+with expansion:
+  1 == 2
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -1061,6 +1560,8 @@
     <testcase classname="<exe-name>.global" name="not allowed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="not prints unscoped info from previous failures" time="{duration}">
       <failure message="false" type="REQUIRE">
+FAILED:
+  REQUIRE( false )
 this SHOULD be seen
 Message.tests.cpp:<line number>
       </failure>
@@ -1075,6 +1576,8 @@
     <testcase classname="<exe-name>.global" name="print unscoped info if passing unscoped info is printed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="prints unscoped info on failure" time="{duration}">
       <failure message="false" type="REQUIRE">
+FAILED:
+  REQUIRE( false )
 this SHOULD be seen
 this SHOULD also be seen
 Message.tests.cpp:<line number>
@@ -1082,6 +1585,8 @@
     </testcase>
     <testcase classname="<exe-name>.global" name="prints unscoped info only for the first assertion" time="{duration}">
       <failure message="false" type="CHECK">
+FAILED:
+  CHECK( false )
 this SHOULD be seen only ONCE
 Message.tests.cpp:<line number>
       </failure>
@@ -1097,12 +1602,16 @@
     <testcase classname="<exe-name>.global" name="replaceInPlace/escape '" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="send a single char to INFO" time="{duration}">
       <failure message="false" type="REQUIRE">
+FAILED:
+  REQUIRE( false )
 3
 Misc.tests.cpp:<line number>
       </failure>
     </testcase>
     <testcase classname="<exe-name>.global" name="sends information to INFO" time="{duration}">
       <failure message="false" type="REQUIRE">
+FAILED:
+  REQUIRE( false )
 hi
 i := 7
 Message.tests.cpp:<line number>
@@ -1112,6 +1621,8 @@
     <testcase classname="<exe-name>.global" name="splitString" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="stacks unscoped info in loops" time="{duration}">
       <failure message="false" type="CHECK">
+FAILED:
+  CHECK( false )
 Count 1 to 3...
 1
 2
@@ -1119,6 +1630,8 @@
 Message.tests.cpp:<line number>
       </failure>
       <failure message="false" type="CHECK">
+FAILED:
+  CHECK( false )
 Count 4 to 6...
 4
 5
@@ -1136,7 +1649,11 @@
     <testcase classname="<exe-name>.global" name="std::set is convertible string/several items" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="std::vector&lt;std::pair&lt;std::string,int> > -> toString" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="string literals of different sizes can be compared" time="{duration}">
-      <failure message="&quot;first&quot; == &quot;second&quot;" type="REQUIRE">
+      <failure message="std::string( &quot;first&quot; ) == &quot;second&quot;" type="REQUIRE">
+FAILED:
+  REQUIRE( std::string( "first" ) == "second" )
+with expansion:
+  "first" == "second"
 Tricky.tests.cpp:<line number>
       </failure>
     </testcase>
@@ -1153,6 +1670,7 @@
     <testcase classname="<exe-name>.global" name="tables" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="thrown std::strings are translated" time="{duration}">
       <error type="TEST_CASE">
+FAILED:
 Why would you throw a std::string?
 Exception.tests.cpp:<line number>
       </error>
diff --git a/codecov.yml b/codecov.yml
index 94d88d8..75809ee 100644
--- a/codecov.yml
+++ b/codecov.yml
@@ -14,6 +14,7 @@
     - "**/catch_reporter_tap.hpp"
     - "**/catch_reporter_automake.hpp"
     - "**/catch_reporter_teamcity.hpp"
+    - "**/catch_reporter_sonarqube.hpp"
     - "**/external/clara.hpp"
 
 
diff --git a/docs/ci-and-misc.md b/docs/ci-and-misc.md
index 8c33087..40b7cec 100644
--- a/docs/ci-and-misc.md
+++ b/docs/ci-and-misc.md
@@ -12,7 +12,7 @@
 
 ## Continuous Integration systems
 
-Probably the most important aspect to using Catch with a build server is the use of different reporters. Catch comes bundled with three reporters that should cover the majority of build servers out there - although adding more for better integration with some is always a possibility (currently we also offer TeamCity, TAP and Automake reporters).
+Probably the most important aspect to using Catch with a build server is the use of different reporters. Catch comes bundled with three reporters that should cover the majority of build servers out there - although adding more for better integration with some is always a possibility (currently we also offer TeamCity, TAP, Automake and SonarQube reporters).
 
 Two of these reporters are built in (XML and JUnit) and the third (TeamCity) is included as a separate header. It's possible that the other two may be split out in the future too - as that would make the core of Catch smaller for those that don't need them.
 
@@ -65,6 +65,10 @@
 
 Because of the incremental nature of Catch's test suites and ability to run specific tests, our implementation of TAP reporter writes out the number of tests in a suite last.
 
+### SonarQube Reporter
+```-r sonarqube```
+[SonarQube Generic Test Data](https://docs.sonarqube.org/latest/analysis/generic-test/) XML format for tests metrics.
+
 ## Low-level tools
 
 ### Precompiled headers (PCHs)
diff --git a/docs/release-process.md b/docs/release-process.md
index 7fa5f7e..ca48da0 100644
--- a/docs/release-process.md
+++ b/docs/release-process.md
@@ -42,8 +42,8 @@
 description should contain the release notes for the current release.
 Single header version of `catch.hpp` *needs* to be attached as a binary,
 as that is where the official download link links to. Preferably
-it should use linux line endings. All non-bundled reporters (Automake,
-TAP, TeamCity) should also be attached as binaries, as they might be
+it should use linux line endings. All non-bundled reporters (Automake, TAP,
+TeamCity, SonarQube) should also be attached as binaries, as they might be
 dependent on a specific version of the single-include header.
 
 Since 2.5.0, the release tag and the "binaries" (headers) should be PGP
diff --git a/docs/reporters.md b/docs/reporters.md
index 32b3419..a33e55b 100644
--- a/docs/reporters.md
+++ b/docs/reporters.md
@@ -29,6 +29,7 @@
 Use this when building as part of a TeamCity build to see results as they happen ([code example](../examples/207-Rpt-TeamCityReporter.cpp)).
 * `tap` writes in the TAP ([Test Anything Protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol)) format.
 * `automake` writes in a format that correspond to [automake  .trs](https://www.gnu.org/software/automake/manual/html_node/Log-files-generation-and-test-results-recording.html) files
+* `sonarqube` writes the [SonarQube Generic Test Data](https://docs.sonarqube.org/latest/analysis/generic-test/) XML format.
 
 You see what reporters are available from the command line by running with `--list-reporters`.
 
diff --git a/include/reporters/catch_reporter_sonarqube.hpp b/include/reporters/catch_reporter_sonarqube.hpp
new file mode 100644
index 0000000..b860293
--- /dev/null
+++ b/include/reporters/catch_reporter_sonarqube.hpp
@@ -0,0 +1,181 @@
+/*
+ *  Created by Daniel Garcia on 2018-12-04.
+ *  Copyright Social Point SL. All rights reserved.
+ *
+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying
+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
+ */
+#ifndef CATCH_REPORTER_SONARQUBE_HPP_INCLUDED
+#define CATCH_REPORTER_SONARQUBE_HPP_INCLUDED
+
+
+// Don't #include any Catch headers here - we can assume they are already
+// included before this header.
+// This is not good practice in general but is necessary in this case so this
+// file can be distributed as a single header that works with the main
+// Catch single header.
+
+#include <map>
+
+namespace Catch {
+
+    struct SonarQubeReporter : CumulativeReporterBase<SonarQubeReporter> {
+
+        SonarQubeReporter(ReporterConfig const& config)
+        : CumulativeReporterBase(config)
+        , xml(config.stream()) {
+            m_reporterPrefs.shouldRedirectStdOut = true;
+            m_reporterPrefs.shouldReportAllAssertions = true;
+        }
+
+        ~SonarQubeReporter() override;
+
+        static std::string getDescription() {
+            return "Reports test results in the Generic Test Data SonarQube XML format";
+        }
+
+        static std::set<Verbosity> getSupportedVerbosities() {
+            return { Verbosity::Normal };
+        }
+
+        void noMatchingTestCases(std::string const& /*spec*/) override {}
+
+        void testRunStarting(TestRunInfo const& testRunInfo) override {
+            CumulativeReporterBase::testRunStarting(testRunInfo);
+            xml.startElement("testExecutions");
+            xml.writeAttribute("version", "1");
+        }
+
+        void testGroupEnded(TestGroupStats const& testGroupStats) override {
+            CumulativeReporterBase::testGroupEnded(testGroupStats);
+            writeGroup(*m_testGroups.back());
+        }
+
+        void testRunEndedCumulative() override {
+            xml.endElement();
+        }
+
+        void writeGroup(TestGroupNode const& groupNode) {
+            std::map<std::string, TestGroupNode::ChildNodes> testsPerFile;
+            for(auto const& child : groupNode.children)
+                testsPerFile[child->value.testInfo.lineInfo.file].push_back(child);
+
+            for(auto const& kv : testsPerFile)
+                writeTestFile(kv.first.c_str(), kv.second);
+        }
+
+        void writeTestFile(const char* filename, TestGroupNode::ChildNodes const& testCaseNodes) {
+            XmlWriter::ScopedElement e = xml.scopedElement("file");
+            xml.writeAttribute("path", filename);
+
+            for(auto const& child : testCaseNodes)
+                writeTestCase(*child);
+        }
+
+        void writeTestCase(TestCaseNode const& testCaseNode) {
+            // All test cases have exactly one section - which represents the
+            // test case itself. That section may have 0-n nested sections
+            assert(testCaseNode.children.size() == 1);
+            SectionNode const& rootSection = *testCaseNode.children.front();
+            writeSection("", rootSection, testCaseNode.value.testInfo.okToFail());
+        }
+
+        void writeSection(std::string const& rootName, SectionNode const& sectionNode, bool okToFail) {
+            std::string name = trim(sectionNode.stats.sectionInfo.name);
+            if(!rootName.empty())
+                name = rootName + '/' + name;
+
+            if(!sectionNode.assertions.empty() || !sectionNode.stdOut.empty() || !sectionNode.stdErr.empty()) {
+                XmlWriter::ScopedElement e = xml.scopedElement("testCase");
+                xml.writeAttribute("name", name);
+                xml.writeAttribute("duration", static_cast<long>(sectionNode.stats.durationInSeconds * 1000));
+
+                writeAssertions(sectionNode, okToFail);
+            }
+
+            for(auto const& childNode : sectionNode.childSections)
+                writeSection(name, *childNode, okToFail);
+        }
+
+        void writeAssertions(SectionNode const& sectionNode, bool okToFail) {
+            for(auto const& assertion : sectionNode.assertions)
+                writeAssertion( assertion, okToFail);
+        }
+
+        void writeAssertion(AssertionStats const& stats, bool okToFail) {
+            AssertionResult const& result = stats.assertionResult;
+            if(!result.isOk()) {
+                std::string elementName;
+                if(okToFail) {
+                    elementName = "skipped";
+                }
+                else {
+                    switch(result.getResultType()) {
+                        case ResultWas::ThrewException:
+                        case ResultWas::FatalErrorCondition:
+                            elementName = "error";
+                            break;
+                        case ResultWas::ExplicitFailure:
+                            elementName = "failure";
+                            break;
+                        case ResultWas::ExpressionFailed:
+                            elementName = "failure";
+                            break;
+                        case ResultWas::DidntThrowException:
+                            elementName = "failure";
+                            break;
+
+                            // We should never see these here:
+                        case ResultWas::Info:
+                        case ResultWas::Warning:
+                        case ResultWas::Ok:
+                        case ResultWas::Unknown:
+                        case ResultWas::FailureBit:
+                        case ResultWas::Exception:
+                            elementName = "internalError";
+                            break;
+                    }
+                }
+
+                XmlWriter::ScopedElement e = xml.scopedElement(elementName);
+
+                ReusableStringStream messageRss;
+                messageRss << result.getTestMacroName() << "(" << result.getExpression() << ")";
+                xml.writeAttribute("message", messageRss.str());
+
+                ReusableStringStream textRss;
+                if (stats.totals.assertions.total() > 0) {
+                    textRss << "FAILED:\n";
+                    if (result.hasExpression()) {
+                        textRss << "\t" << result.getExpressionInMacro() << "\n";
+                    }
+                    if (result.hasExpandedExpression()) {
+                        textRss << "with expansion:\n\t" << result.getExpandedExpression() << "\n";
+                    }
+                }
+
+                if(!result.getMessage().empty())
+                    textRss << result.getMessage() << "\n";
+
+                for(auto const& msg : stats.infoMessages)
+                    if(msg.type == ResultWas::Info)
+                        textRss << msg.message << "\n";
+
+                textRss << "at " << result.getSourceInfo();
+                xml.writeText(textRss.str(), false);
+            }
+        }
+
+    private:
+        XmlWriter xml;
+    };
+
+#ifdef CATCH_IMPL
+    SonarQubeReporter::~SonarQubeReporter() {}
+#endif
+
+    CATCH_REGISTER_REPORTER( "sonarqube", SonarQubeReporter )
+
+} // end namespace Catch
+
+#endif // CATCH_REPORTER_SONARQUBE_HPP_INCLUDED
\ No newline at end of file
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index cbe21fc..0aafc17 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -282,6 +282,7 @@
         ${HEADER_DIR}/reporters/catch_reporter_tap.hpp
         ${HEADER_DIR}/reporters/catch_reporter_teamcity.hpp
         ${HEADER_DIR}/reporters/catch_reporter_xml.h
+        ${HEADER_DIR}/reporters/catch_reporter_sonarqube.hpp
         )
 set(REPORTER_SOURCES
         ${HEADER_DIR}/reporters/catch_reporter_bases.cpp
diff --git a/projects/SelfTest/Baselines/sonarqube.sw.approved.txt b/projects/SelfTest/Baselines/sonarqube.sw.approved.txt
new file mode 100644
index 0000000..65f4655
--- /dev/null
+++ b/projects/SelfTest/Baselines/sonarqube.sw.approved.txt
@@ -0,0 +1,1730 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<testExecutions version="1"loose text artifact
+>
+  <file path="projects/<exe-name>/IntrospectiveTests/CmdLine.tests.cpp">
+    <testCase name="Parse test names and tags/Empty test spec should have no filters" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Test spec from empty string should have no filters" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Test spec from just a comma should have no filters" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Test spec from name should have one filter" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Test spec from quoted name should have one filter" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Test spec from name should have one filter" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Wildcard at the start" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Wildcard at the end" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Wildcard at both ends" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Redundant wildcard at the start" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Redundant wildcard at the end" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Redundant wildcard at both ends" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Wildcard at both ends, redundant at start" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Just wildcard" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Single tag" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Single tag, two matches" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Two tags" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Two tags, spare separated" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Wildcarded name and tag" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Single tag exclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/One tag exclusion and one tag inclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/One tag exclusion and one wldcarded name inclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/One tag exclusion, using exclude:, and one wldcarded name inclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/name exclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/wildcarded name exclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/wildcarded name exclusion with tag inclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/wildcarded name exclusion, using exclude:, with tag inclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/two wildcarded names" duration="{duration}"/>
+    <testCase name="Parse test names and tags/empty tag" duration="{duration}"/>
+    <testCase name="Parse test names and tags/empty quoted name" duration="{duration}"/>
+    <testCase name="Parse test names and tags/quoted string followed by tag exclusion" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Leading and trailing spaces in test spec" duration="{duration}"/>
+    <testCase name="Parse test names and tags/Leading and trailing spaces in test name" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/empty args don't cause a crash" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/default - no arguments" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/test lists/Specify one test case using" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/test lists/Specify one test case exclusion using exclude:" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/test lists/Specify one test case exclusion using ~" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/reporter/-r/console" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/reporter/-r/xml" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/reporter/--reporter/junit" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/reporter/Only one reporter is accepted" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/reporter/must match one of the available ones" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/debugger/-b" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/debugger/--break" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/abort/-a aborts after first failure" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/abort/-x 2 aborts after two failures" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/abort/-x must be numeric" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/nothrow/-e" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/nothrow/--nothrow" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/output filename/-o filename" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/output filename/--out" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/combinations/Single character flags can be combined" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/use-colour/without option" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/use-colour/auto" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/use-colour/yes" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/use-colour/no" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/use-colour/error" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/Benchmark options/samples" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/Benchmark options/resamples" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/Benchmark options/resamples" duration="{duration}"/>
+    <testCase name="Process can be configured on command line/Benchmark options/resamples" duration="{duration}"/>
+    <testCase name="Test with special, characters &quot;in name" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp">
+    <testCase name="Generators internals/Single value" duration="{duration}"/>
+    <testCase name="Generators internals/Preset values" duration="{duration}"/>
+    <testCase name="Generators internals/Generator combinator" duration="{duration}"/>
+    <testCase name="Generators internals/Explicitly typed generator sequence" duration="{duration}"/>
+    <testCase name="Generators internals/Filter generator" duration="{duration}"/>
+    <testCase name="Generators internals/Take generator/Take less" duration="{duration}"/>
+    <testCase name="Generators internals/Take generator/Take more" duration="{duration}"/>
+    <testCase name="Generators internals/Map with explicit return type" duration="{duration}"/>
+    <testCase name="Generators internals/Map with deduced return type" duration="{duration}"/>
+    <testCase name="Generators internals/Repeat/Singular repeat" duration="{duration}"/>
+    <testCase name="Generators internals/Repeat/Actual repeat" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive auto step/Integer" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Negative auto step/Integer" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Integer/Exact" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Integer/Slightly over end" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Integer/Slightly under end" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Floating Point/Exact" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Floating Point/Slightly over end" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Positive manual step/Floating Point/Slightly under end" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Negative manual step/Integer/Exact" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Negative manual step/Integer/Slightly over end" duration="{duration}"/>
+    <testCase name="Generators internals/Range/Negative manual step/Integer/Slightly under end" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/PartTracker.tests.cpp">
+    <testCase name="Tracker" duration="{duration}"/>
+    <testCase name="Tracker/successfully close one section" duration="{duration}"/>
+    <testCase name="Tracker/fail one section" duration="{duration}"/>
+    <testCase name="Tracker/fail one section/re-enter after failed section" duration="{duration}"/>
+    <testCase name="Tracker/fail one section/re-enter after failed section and find next section" duration="{duration}"/>
+    <testCase name="Tracker/successfully close one section, then find another" duration="{duration}"/>
+    <testCase name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2" duration="{duration}"/>
+    <testCase name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2/Successfully close S2" duration="{duration}"/>
+    <testCase name="Tracker/successfully close one section, then find another/Re-enter - skips S1 and enters S2/fail S2" duration="{duration}"/>
+    <testCase name="Tracker/open a nested section" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/RandomNumberGeneration.tests.cpp">
+    <testCase name="Comparison ops" duration="{duration}"/>
+    <testCase name="Our PCG implementation provides expected results for known seeds/Default seeded" duration="{duration}"/>
+    <testCase name="Our PCG implementation provides expected results for known seeds/Specific seed" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/String.tests.cpp">
+    <testCase name="StringRef/Empty string" duration="{duration}"/>
+    <testCase name="StringRef/From string literal" duration="{duration}"/>
+    <testCase name="StringRef/From sub-string" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/zero-based substring" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/non-zero-based substring" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/Pointer values of full refs should match" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/Pointer values of substring refs should also match" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/Past the end substring" duration="{duration}"/>
+    <testCase name="StringRef/Substrings/Substring off the end are trimmed" duration="{duration}"/>
+    <testCase name="StringRef/Comparisons are deep" duration="{duration}"/>
+    <testCase name="StringRef/from std::string/implicitly constructed" duration="{duration}"/>
+    <testCase name="StringRef/from std::string/explicitly constructed" duration="{duration}"/>
+    <testCase name="StringRef/from std::string/assigned" duration="{duration}"/>
+    <testCase name="StringRef/to std::string/explicitly constructed" duration="{duration}"/>
+    <testCase name="StringRef/to std::string/assigned" duration="{duration}"/>
+    <testCase name="StringRef at compilation time/Simple constructors" duration="{duration}"/>
+    <testCase name="StringRef at compilation time/UDL construction" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/StringManip.tests.cpp">
+    <testCase name="Trim strings" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace single char" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace two chars" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace first char" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace last char" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace all chars" duration="{duration}"/>
+    <testCase name="replaceInPlace/replace no chars" duration="{duration}"/>
+    <testCase name="replaceInPlace/escape '" duration="{duration}"/>
+    <testCase name="splitString" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/Tag.tests.cpp">
+    <testCase name="Tag alias can be registered against tag patterns/The same tag alias can only be registered once" duration="{duration}"/>
+    <testCase name="Tag alias can be registered against tag patterns/Tag aliases must be of the form [@name]" duration="{duration}"/>
+    <testCase name="shortened hide tags are split apart" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/ToString.tests.cpp">
+    <testCase name="Directly creating an EnumInfo" duration="{duration}"/>
+    <testCase name="parseEnums/No enums" duration="{duration}"/>
+    <testCase name="parseEnums/One enum value" duration="{duration}"/>
+    <testCase name="parseEnums/Multiple enum values" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/IntrospectiveTests/Xml.tests.cpp">
+    <testCase name="XmlEncode/normal string" duration="{duration}"/>
+    <testCase name="XmlEncode/empty string" duration="{duration}"/>
+    <testCase name="XmlEncode/string with ampersand" duration="{duration}"/>
+    <testCase name="XmlEncode/string with less-than" duration="{duration}"/>
+    <testCase name="XmlEncode/string with greater-than" duration="{duration}"/>
+    <testCase name="XmlEncode/string with quotes" duration="{duration}"/>
+    <testCase name="XmlEncode/string with control char (1)" duration="{duration}"/>
+    <testCase name="XmlEncode/string with control char (x7F)" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Valid utf-8 strings" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Invalid utf-8 strings/Various broken strings" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Invalid utf-8 strings/Overlong encodings" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Invalid utf-8 strings/Surrogate pairs" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Invalid utf-8 strings/Invalid start byte" duration="{duration}"/>
+    <testCase name="XmlEncode: UTF-8/Invalid utf-8 strings/Missing continuation byte(s)" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Approx.tests.cpp">
+    <testCase name="A comparison that uses literals instead of the normal constructor" duration="{duration}"/>
+    <testCase name="Absolute margin" duration="{duration}"/>
+    <testCase name="Approx setters validate their arguments" duration="{duration}"/>
+    <testCase name="Approx with exactly-representable margin" duration="{duration}"/>
+    <testCase name="Approximate PI" duration="{duration}"/>
+    <testCase name="Approximate comparisons with different epsilons" duration="{duration}"/>
+    <testCase name="Approximate comparisons with floats" duration="{duration}"/>
+    <testCase name="Approximate comparisons with ints" duration="{duration}"/>
+    <testCase name="Approximate comparisons with mixed numeric types" duration="{duration}"/>
+    <testCase name="Comparison with explicitly convertible types" duration="{duration}"/>
+    <testCase name="Default scale is invisible to comparison" duration="{duration}"/>
+    <testCase name="Epsilon only applies to Approx's value" duration="{duration}"/>
+    <testCase name="Greater-than inequalities with different epsilons" duration="{duration}"/>
+    <testCase name="Less-than inequalities with different epsilons" duration="{duration}"/>
+    <testCase name="Some simple comparisons between doubles" duration="{duration}"/>
+    <testCase name="Use a custom approx" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/BDD.tests.cpp">
+    <testCase name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods/Given: No operations precede me" duration="{duration}"/>
+    <testCase name="Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods/Given: No operations precede me/When: We get the count/Then: Subsequently values are higher" duration="{duration}"/>
+    <testCase name="Scenario: Do that thing with the thing/Given: This stuff exists/And given: And some assumption/When: I do this/Then: it should do this" duration="{duration}"/>
+    <testCase name="Scenario: Do that thing with the thing/Given: This stuff exists/And given: And some assumption/When: I do this/Then: it should do this/And: do that" duration="{duration}"/>
+    <testCase name="Scenario: This is a really long scenario name to see how the list command deals with wrapping/Given: A section name that is so long that it cannot fit in a single console width/When: The test headers are printed as part of the normal running of the scenario/Then: The, deliberately very long and overly verbose (you see what I did there?) section names must wrap, along with an indent" duration="{duration}"/>
+    <testCase name="Scenario: Vector resizing affects size and capacity/Given: an empty vector" duration="{duration}"/>
+    <testCase name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: it is made larger/Then: the size and capacity go up" duration="{duration}"/>
+    <testCase name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: it is made larger/Then: the size and capacity go up/And when: it is made smaller again/Then: the size goes down but the capacity stays the same" duration="{duration}"/>
+    <testCase name="Scenario: Vector resizing affects size and capacity/Given: an empty vector/When: we reserve more space/Then: The capacity is increased but the size remains the same" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Class.tests.cpp">
+    <testCase name="A METHOD_AS_TEST_CASE based test run that fails" duration="{duration}">
+      <failure message="REQUIRE(s == &quot;world&quot;)">
+FAILED:
+	REQUIRE( s == "world" )
+with expansion:
+	"hello" == "world"
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A METHOD_AS_TEST_CASE based test run that succeeds" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;float>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>::m_a.size() == 1)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+	0 == 1
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo&lt;int>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>::m_a.size() == 1)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+	0 == 1
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;float>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>::m_a.size() == 1)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+	0 == 1
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector&lt;int>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>::m_a.size() == 1)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>::m_a.size() == 1 )
+with expansion:
+	0 == 1
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;float>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo&lt;int>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;float>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector&lt;int>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;float, 6>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+	6 &lt; 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2&lt;int, 2>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+	2 &lt; 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;float, 6>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+	6 &lt; 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array&lt;int, 2>" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2)">
+FAILED:
+	REQUIRE( Template_Fixture_2&lt;TestType>{}.m_a.size() &lt; 2 )
+with expansion:
+	2 &lt; 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;float,6>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2&lt;int,2>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;float,6>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array&lt;int,2>" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - double" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture&lt;TestType>::m_a == 2)">
+FAILED:
+	REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+	1.0 == 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - float" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture&lt;TestType>::m_a == 2)">
+FAILED:
+	REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+	1.0f == 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that fails - int" duration="{duration}">
+      <failure message="REQUIRE(Template_Fixture&lt;TestType>::m_a == 2)">
+FAILED:
+	REQUIRE( Template_Fixture&lt;TestType>::m_a == 2 )
+with expansion:
+	1 == 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1" duration="{duration}">
+      <failure message="REQUIRE(Nttp_Fixture&lt;V>::value == 0)">
+FAILED:
+	REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+	1 == 0
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3" duration="{duration}">
+      <failure message="REQUIRE(Nttp_Fixture&lt;V>::value == 0)">
+FAILED:
+	REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+	3 == 0
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6" duration="{duration}">
+      <failure message="REQUIRE(Nttp_Fixture&lt;V>::value == 0)">
+FAILED:
+	REQUIRE( Nttp_Fixture&lt;V>::value == 0 )
+with expansion:
+	6 == 0
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3" duration="{duration}"/>
+    <testCase name="A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6" duration="{duration}"/>
+    <testCase name="A TEST_CASE_METHOD based test run that fails" duration="{duration}">
+      <failure message="REQUIRE(m_a == 2)">
+FAILED:
+	REQUIRE( m_a == 2 )
+with expansion:
+	1 == 2
+Class.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A TEST_CASE_METHOD based test run that succeeds" duration="{duration}"/>
+    <testCase name="Template test case method with test types specified inside std::tuple - MyTypes - 0" duration="{duration}"/>
+    <testCase name="Template test case method with test types specified inside std::tuple - MyTypes - 1" duration="{duration}"/>
+    <testCase name="Template test case method with test types specified inside std::tuple - MyTypes - 2" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Compilation.tests.cpp">
+    <testCase name="#1027" duration="{duration}"/>
+    <testCase name="#1027: Bitfields can be captured" duration="{duration}"/>
+    <testCase name="#1147" duration="{duration}"/>
+    <testCase name="#1238" duration="{duration}"/>
+    <testCase name="#1245" duration="{duration}"/>
+    <testCase name="#1403" duration="{duration}"/>
+    <testCase name="#1548" duration="{duration}"/>
+    <testCase name="#809" duration="{duration}"/>
+    <testCase name="#833" duration="{duration}"/>
+    <testCase name="#872" duration="{duration}"/>
+    <testCase name="Optionally static assertions" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Condition.tests.cpp">
+    <testCase name="'Not' checks that should fail" duration="{duration}">
+      <failure message="CHECK(false != false)">
+FAILED:
+	CHECK( false != false )
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(true != true)">
+FAILED:
+	CHECK( true != true )
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(!true)">
+FAILED:
+	CHECK( !true )
+with expansion:
+	false
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_FALSE(!(true))">
+FAILED:
+	CHECK_FALSE( true )
+with expansion:
+	!true
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(!trueValue)">
+FAILED:
+	CHECK( !trueValue )
+with expansion:
+	false
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_FALSE(!(trueValue))">
+FAILED:
+	CHECK_FALSE( trueValue )
+with expansion:
+	!true
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(!(1 == 1))">
+FAILED:
+	CHECK( !(1 == 1) )
+with expansion:
+	false
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_FALSE(!(1 == 1))">
+FAILED:
+	CHECK_FALSE( 1 == 1 )
+Condition.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="'Not' checks that should succeed" duration="{duration}"/>
+    <testCase name="Comparisons between ints where one side is computed" duration="{duration}"/>
+    <testCase name="Comparisons between unsigned ints and negative signed ints match c++ standard behaviour" duration="{duration}"/>
+    <testCase name="Comparisons with int literals don't warn when mixing signed/ unsigned" duration="{duration}"/>
+    <testCase name="Equality checks that should fail" duration="{duration}">
+      <skipped message="CHECK(data.int_seven == 6)">
+FAILED:
+	CHECK( data.int_seven == 6 )
+with expansion:
+	7 == 6
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.int_seven == 8)">
+FAILED:
+	CHECK( data.int_seven == 8 )
+with expansion:
+	7 == 8
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.int_seven == 0)">
+FAILED:
+	CHECK( data.int_seven == 0 )
+with expansion:
+	7 == 0
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.float_nine_point_one == Approx( 9.11f ))">
+FAILED:
+	CHECK( data.float_nine_point_one == Approx( 9.11f ) )
+with expansion:
+	9.1f == Approx( 9.1099996567 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.float_nine_point_one == Approx( 9.0f ))">
+FAILED:
+	CHECK( data.float_nine_point_one == Approx( 9.0f ) )
+with expansion:
+	9.1f == Approx( 9.0 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.float_nine_point_one == Approx( 1 ))">
+FAILED:
+	CHECK( data.float_nine_point_one == Approx( 1 ) )
+with expansion:
+	9.1f == Approx( 1.0 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.float_nine_point_one == Approx( 0 ))">
+FAILED:
+	CHECK( data.float_nine_point_one == Approx( 0 ) )
+with expansion:
+	9.1f == Approx( 0.0 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.double_pi == Approx( 3.1415 ))">
+FAILED:
+	CHECK( data.double_pi == Approx( 3.1415 ) )
+with expansion:
+	3.1415926535 == Approx( 3.1415 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello == &quot;goodbye&quot;)">
+FAILED:
+	CHECK( data.str_hello == "goodbye" )
+with expansion:
+	"hello" == "goodbye"
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello == &quot;hell&quot;)">
+FAILED:
+	CHECK( data.str_hello == "hell" )
+with expansion:
+	"hello" == "hell"
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello == &quot;hello1&quot;)">
+FAILED:
+	CHECK( data.str_hello == "hello1" )
+with expansion:
+	"hello" == "hello1"
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello.size() == 6)">
+FAILED:
+	CHECK( data.str_hello.size() == 6 )
+with expansion:
+	5 == 6
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(x == Approx( 1.301 ))">
+FAILED:
+	CHECK( x == Approx( 1.301 ) )
+with expansion:
+	1.3 == Approx( 1.301 )
+Condition.tests.cpp:<line number>
+      </skipped>
+    </testCase>
+    <testCase name="Equality checks that should succeed" duration="{duration}"/>
+    <testCase name="Inequality checks that should fail" duration="{duration}">
+      <skipped message="CHECK(data.int_seven != 7)">
+FAILED:
+	CHECK( data.int_seven != 7 )
+with expansion:
+	7 != 7
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.float_nine_point_one != Approx( 9.1f ))">
+FAILED:
+	CHECK( data.float_nine_point_one != Approx( 9.1f ) )
+with expansion:
+	9.1f != Approx( 9.1000003815 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.double_pi != Approx( 3.1415926535 ))">
+FAILED:
+	CHECK( data.double_pi != Approx( 3.1415926535 ) )
+with expansion:
+	3.1415926535 != Approx( 3.1415926535 )
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello != &quot;hello&quot;)">
+FAILED:
+	CHECK( data.str_hello != "hello" )
+with expansion:
+	"hello" != "hello"
+Condition.tests.cpp:<line number>
+      </skipped>
+      <skipped message="CHECK(data.str_hello.size() != 5)">
+FAILED:
+	CHECK( data.str_hello.size() != 5 )
+with expansion:
+	5 != 5
+Condition.tests.cpp:<line number>
+      </skipped>
+    </testCase>
+    <testCase name="Inequality checks that should succeed" duration="{duration}"/>
+    <testCase name="Ordering comparison checks that should fail" duration="{duration}">
+      <failure message="CHECK(data.int_seven > 7)">
+FAILED:
+	CHECK( data.int_seven > 7 )
+with expansion:
+	7 > 7
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven &lt; 7)">
+FAILED:
+	CHECK( data.int_seven &lt; 7 )
+with expansion:
+	7 &lt; 7
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven > 8)">
+FAILED:
+	CHECK( data.int_seven > 8 )
+with expansion:
+	7 > 8
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven &lt; 6)">
+FAILED:
+	CHECK( data.int_seven &lt; 6 )
+with expansion:
+	7 &lt; 6
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven &lt; 0)">
+FAILED:
+	CHECK( data.int_seven &lt; 0 )
+with expansion:
+	7 &lt; 0
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven &lt; -1)">
+FAILED:
+	CHECK( data.int_seven &lt; -1 )
+with expansion:
+	7 &lt; -1
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven >= 8)">
+FAILED:
+	CHECK( data.int_seven >= 8 )
+with expansion:
+	7 >= 8
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.int_seven &lt;= 6)">
+FAILED:
+	CHECK( data.int_seven &lt;= 6 )
+with expansion:
+	7 &lt;= 6
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.float_nine_point_one &lt; 9)">
+FAILED:
+	CHECK( data.float_nine_point_one &lt; 9 )
+with expansion:
+	9.1f &lt; 9
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.float_nine_point_one > 10)">
+FAILED:
+	CHECK( data.float_nine_point_one > 10 )
+with expansion:
+	9.1f > 10
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.float_nine_point_one > 9.2)">
+FAILED:
+	CHECK( data.float_nine_point_one > 9.2 )
+with expansion:
+	9.1f > 9.2
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello > &quot;hello&quot;)">
+FAILED:
+	CHECK( data.str_hello > "hello" )
+with expansion:
+	"hello" > "hello"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello &lt; &quot;hello&quot;)">
+FAILED:
+	CHECK( data.str_hello &lt; "hello" )
+with expansion:
+	"hello" &lt; "hello"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello > &quot;hellp&quot;)">
+FAILED:
+	CHECK( data.str_hello > "hellp" )
+with expansion:
+	"hello" > "hellp"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello > &quot;z&quot;)">
+FAILED:
+	CHECK( data.str_hello > "z" )
+with expansion:
+	"hello" > "z"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello &lt; &quot;hellm&quot;)">
+FAILED:
+	CHECK( data.str_hello &lt; "hellm" )
+with expansion:
+	"hello" &lt; "hellm"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello &lt; &quot;a&quot;)">
+FAILED:
+	CHECK( data.str_hello &lt; "a" )
+with expansion:
+	"hello" &lt; "a"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello >= &quot;z&quot;)">
+FAILED:
+	CHECK( data.str_hello >= "z" )
+with expansion:
+	"hello" >= "z"
+Condition.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(data.str_hello &lt;= &quot;a&quot;)">
+FAILED:
+	CHECK( data.str_hello &lt;= "a" )
+with expansion:
+	"hello" &lt;= "a"
+Condition.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Ordering comparison checks that should succeed" duration="{duration}"/>
+    <testCase name="Pointers can be compared to null" duration="{duration}"/>
+    <testCase name="comparisons between const int variables" duration="{duration}"/>
+    <testCase name="comparisons between int variables" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Decomposition.tests.cpp">
+    <testCase name="#1005: Comparing pointer to int and long (NULL can be either on various systems)" duration="{duration}"/>
+    <testCase name="Reconstruction should be based on stringification: #914" duration="{duration}">
+      <failure message="CHECK(truthy(false))">
+FAILED:
+	CHECK( truthy(false) )
+with expansion:
+	Hey, its truthy!
+Decomposition.tests.cpp:<line number>
+      </failure>
+    </testCase>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/EnumToString.tests.cpp">
+    <testCase name="Enums can quickly have stringification enabled using REGISTER_ENUM" duration="{duration}"/>
+    <testCase name="Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM" duration="{duration}"/>
+    <testCase name="toString(enum class w/operator&lt;&lt;)" duration="{duration}"/>
+    <testCase name="toString(enum class)" duration="{duration}"/>
+    <testCase name="toString(enum w/operator&lt;&lt;)" duration="{duration}"/>
+    <testCase name="toString(enum)" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Exception.tests.cpp">
+    <testCase name="#748 - captures with unexpected exceptions/outside assertions" duration="{duration}">
+      <skipped message="TEST_CASE()">
+FAILED:
+expected exception
+answer := 42
+Exception.tests.cpp:<line number>
+      </skipped>
+    </testCase>
+    <testCase name="#748 - captures with unexpected exceptions/inside REQUIRE_NOTHROW" duration="{duration}">
+      <skipped message="REQUIRE_NOTHROW(thisThrows())">
+FAILED:
+	REQUIRE_NOTHROW( thisThrows() )
+expected exception
+answer := 42
+Exception.tests.cpp:<line number>
+      </skipped>
+    </testCase>
+    <testCase name="#748 - captures with unexpected exceptions/inside REQUIRE_THROWS" duration="{duration}"/>
+    <testCase name="An unchecked exception reports the line of the last assertion" duration="{duration}">
+      <error message="({Unknown expression after the reported line})">
+FAILED:
+	{Unknown expression after the reported line}
+unexpected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Custom exceptions can be translated when testing for nothrow" duration="{duration}">
+      <error message="REQUIRE_NOTHROW(throwCustom())">
+FAILED:
+	REQUIRE_NOTHROW( throwCustom() )
+custom exception - not std
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Custom exceptions can be translated when testing for throwing as something else" duration="{duration}">
+      <error message="REQUIRE_THROWS_AS(throwCustom(), std::exception)">
+FAILED:
+	REQUIRE_THROWS_AS( throwCustom(), std::exception )
+custom exception - not std
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Custom std-exceptions can be custom translated" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+custom std exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Exception messages can be tested for/exact match" duration="{duration}"/>
+    <testCase name="Exception messages can be tested for/different case" duration="{duration}"/>
+    <testCase name="Exception messages can be tested for/wildcarded" duration="{duration}"/>
+    <testCase name="Expected exceptions that don't throw or unexpected exceptions fail the test" duration="{duration}">
+      <error message="CHECK_THROWS_AS(thisThrows(), std::string)">
+FAILED:
+	CHECK_THROWS_AS( thisThrows(), std::string )
+expected exception
+Exception.tests.cpp:<line number>
+      </error>
+      <failure message="CHECK_THROWS_AS(thisDoesntThrow(), std::domain_error)">
+FAILED:
+	CHECK_THROWS_AS( thisDoesntThrow(), std::domain_error )
+Exception.tests.cpp:<line number>
+      </failure>
+      <error message="CHECK_NOTHROW(thisThrows())">
+FAILED:
+	CHECK_NOTHROW( thisThrows() )
+expected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Mismatching exception messages failing the test" duration="{duration}">
+      <failure message="REQUIRE_THROWS_WITH(thisThrows(), &quot;should fail&quot;)">
+FAILED:
+	REQUIRE_THROWS_WITH( thisThrows(), "should fail" )
+with expansion:
+	"expected exception" equals: "should fail"
+Exception.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Non-std exceptions can be translated" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+custom exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Thrown string literals are translated" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+For some reason someone is throwing a string literal!
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Unexpected exceptions can be translated" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+3.14
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="When checked exceptions are thrown they can be expected or unexpected" duration="{duration}"/>
+    <testCase name="When unchecked exceptions are thrown directly they are always failures" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+unexpected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="When unchecked exceptions are thrown during a CHECK the test should continue" duration="{duration}">
+      <error message="CHECK(thisThrows() == 0)">
+FAILED:
+	CHECK( thisThrows() == 0 )
+expected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="When unchecked exceptions are thrown during a REQUIRE the test should abort fail" duration="{duration}">
+      <error message="REQUIRE(thisThrows() == 0)">
+FAILED:
+	REQUIRE( thisThrows() == 0 )
+expected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="When unchecked exceptions are thrown from functions they are always failures" duration="{duration}">
+      <error message="CHECK(thisThrows() == 0)">
+FAILED:
+	CHECK( thisThrows() == 0 )
+expected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="When unchecked exceptions are thrown from sections they are always failures/section name" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+unexpected exception
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="thrown std::strings are translated" duration="{duration}">
+      <error message="TEST_CASE()">
+FAILED:
+Why would you throw a std::string?
+Exception.tests.cpp:<line number>
+      </error>
+    </testCase>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Generators.tests.cpp">
+    <testCase name="3x3x3 ints" duration="{duration}"/>
+    <testCase name="Copy and then generate a range/from var and iterators" duration="{duration}"/>
+    <testCase name="Copy and then generate a range/From a temporary container" duration="{duration}"/>
+    <testCase name="Copy and then generate a range/Final validation" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Filtering by predicate/Basic usage" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Filtering by predicate/Throws if there are no matching values" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Shortening a range" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Transforming elements/Same type" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Transforming elements/Different type" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Transforming elements/Different deduced type" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Repeating a generator" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Chunking a generator into sized pieces/Number of elements in source is divisible by chunk size" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Chunking a generator into sized pieces/Number of elements in source is not divisible by chunk size" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Chunking a generator into sized pieces/Chunk size of zero" duration="{duration}"/>
+    <testCase name="Generators -- adapters/Chunking a generator into sized pieces/Throws on too small generators" duration="{duration}"/>
+    <testCase name="Generators -- simple/one" duration="{duration}"/>
+    <testCase name="Generators -- simple/two" duration="{duration}"/>
+    <testCase name="Nested generators and captured variables" duration="{duration}"/>
+    <testCase name="strlen3" duration="{duration}"/>
+    <testCase name="tables" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Matchers.tests.cpp">
+    <testCase name="Arbitrary predicate matcher/Function pointer" duration="{duration}"/>
+    <testCase name="Arbitrary predicate matcher/Lambdas + different type" duration="{duration}"/>
+    <testCase name="Contains string matcher" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), Contains(&quot;not there&quot;, Catch::CaseSensitive::No))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Contains("not there", Catch::CaseSensitive::No) )
+with expansion:
+	"this string contains 'abc' as a substring" contains: "not there" (case insensitive)
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), Contains(&quot;STRING&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Contains("STRING") )
+with expansion:
+	"this string contains 'abc' as a substring" contains: "STRING"
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="EndsWith string matcher" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), EndsWith(&quot;Substring&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), EndsWith("Substring") )
+with expansion:
+	"this string contains 'abc' as a substring" ends with: "Substring"
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), EndsWith(&quot;this&quot;, Catch::CaseSensitive::No))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), EndsWith("this", Catch::CaseSensitive::No) )
+with expansion:
+	"this string contains 'abc' as a substring" ends with: "this" (case insensitive)
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Equals" duration="{duration}"/>
+    <testCase name="Equals string matcher" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), Equals(&quot;this string contains 'ABC' as a substring&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Equals("this string contains 'ABC' as a substring") )
+with expansion:
+	"this string contains 'abc' as a substring" equals: "this string contains 'ABC' as a substring"
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), Equals(&quot;something else&quot;, Catch::CaseSensitive::No))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Equals("something else", Catch::CaseSensitive::No) )
+with expansion:
+	"this string contains 'abc' as a substring" equals: "something else" (case insensitive)
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Exception matchers that fail/No exception" duration="{duration}">
+      <failure message="CHECK_THROWS_MATCHES(doesNotThrow(), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	CHECK_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{1} )
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="REQUIRE_THROWS_MATCHES(doesNotThrow(), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	REQUIRE_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{1} )
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Exception matchers that fail/Type mismatch" duration="{duration}">
+      <error message="CHECK_THROWS_MATCHES(throwsAsInt(1), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	CHECK_THROWS_MATCHES( throwsAsInt(1), SpecialException, ExceptionMatcher{1} )
+Unknown exception
+Matchers.tests.cpp:<line number>
+      </error>
+      <error message="REQUIRE_THROWS_MATCHES(throwsAsInt(1), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	REQUIRE_THROWS_MATCHES( throwsAsInt(1), SpecialException, ExceptionMatcher{1} )
+Unknown exception
+Matchers.tests.cpp:<line number>
+      </error>
+    </testCase>
+    <testCase name="Exception matchers that fail/Contents are wrong" duration="{duration}">
+      <failure message="CHECK_THROWS_MATCHES(throwsSpecialException(3), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	CHECK_THROWS_MATCHES( throwsSpecialException(3), SpecialException, ExceptionMatcher{1} )
+with expansion:
+	SpecialException::what special exception has value of 1
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="REQUIRE_THROWS_MATCHES(throwsSpecialException(4), SpecialException, ExceptionMatcher{1})">
+FAILED:
+	REQUIRE_THROWS_MATCHES( throwsSpecialException(4), SpecialException, ExceptionMatcher{1} )
+with expansion:
+	SpecialException::what special exception has value of 1
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Exception matchers that succeed" duration="{duration}"/>
+    <testCase name="Exceptions matchers" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/Relative" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/Relative/Some subnormal values" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/Margin" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/ULPs" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/Composed" duration="{duration}"/>
+    <testCase name="Floating point matchers: double/Constructor validation" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/Relative" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/Relative/Some subnormal values" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/Margin" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/ULPs" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/Composed" duration="{duration}"/>
+    <testCase name="Floating point matchers: float/Constructor validation" duration="{duration}"/>
+    <testCase name="Matchers can be (AllOf) composed with the &amp;&amp; operator" duration="{duration}"/>
+    <testCase name="Matchers can be (AnyOf) composed with the || operator" duration="{duration}"/>
+    <testCase name="Matchers can be composed with both &amp;&amp; and ||" duration="{duration}"/>
+    <testCase name="Matchers can be composed with both &amp;&amp; and || - failing" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), (Contains(&quot;string&quot;) || Contains(&quot;different&quot;)) &amp;&amp; Contains(&quot;random&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), (Contains("string") || Contains("different")) &amp;&amp; Contains("random") )
+with expansion:
+	"this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "random" )
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Matchers can be negated (Not) with the ! operator" duration="{duration}"/>
+    <testCase name="Matchers can be negated (Not) with the ! operator - failing" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), !Contains(&quot;substring&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), !Contains("substring") )
+with expansion:
+	"this string contains 'abc' as a substring" not contains: "substring"
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Predicate matcher can accept const char*" duration="{duration}"/>
+    <testCase name="Regex string matcher" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), Matches(&quot;this STRING contains 'abc' as a substring&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Matches("this STRING contains 'abc' as a substring") )
+with expansion:
+	"this string contains 'abc' as a substring" matches "this STRING contains 'abc' as a substring" case sensitively
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), Matches(&quot;contains 'abc' as a substring&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Matches("contains 'abc' as a substring") )
+with expansion:
+	"this string contains 'abc' as a substring" matches "contains 'abc' as a substring" case sensitively
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), Matches(&quot;this string contains 'abc' as a&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), Matches("this string contains 'abc' as a") )
+with expansion:
+	"this string contains 'abc' as a substring" matches "this string contains 'abc' as a" case sensitively
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Regression test #1" duration="{duration}"/>
+    <testCase name="StartsWith string matcher" duration="{duration}">
+      <failure message="CHECK_THAT(testStringForMatching(), StartsWith(&quot;This String&quot;))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), StartsWith("This String") )
+with expansion:
+	"this string contains 'abc' as a substring" starts with: "This String"
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(testStringForMatching(), StartsWith(&quot;string&quot;, Catch::CaseSensitive::No))">
+FAILED:
+	CHECK_THAT( testStringForMatching(), StartsWith("string", Catch::CaseSensitive::No) )
+with expansion:
+	"this string contains 'abc' as a substring" starts with: "string" (case insensitive)
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="String matchers" duration="{duration}"/>
+    <testCase name="Vector Approx matcher/Empty vector is roughly equal to an empty vector" duration="{duration}"/>
+    <testCase name="Vector Approx matcher/Vectors with elements/A vector is approx equal to itself" duration="{duration}"/>
+    <testCase name="Vector Approx matcher/Vectors with elements/Different length" duration="{duration}"/>
+    <testCase name="Vector Approx matcher/Vectors with elements/Same length, different elements" duration="{duration}"/>
+    <testCase name="Vector Approx matcher -- failing/Empty and non empty vectors are not approx equal" duration="{duration}">
+      <failure message="CHECK_THAT(empty, Approx(t1))">
+FAILED:
+	CHECK_THAT( empty, Approx(t1) )
+with expansion:
+	{  } is approx: { 1.0, 2.0 }
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Vector Approx matcher -- failing/Just different vectors" duration="{duration}">
+      <failure message="CHECK_THAT(v1, Approx(v2))">
+FAILED:
+	CHECK_THAT( v1, Approx(v2) )
+with expansion:
+	{ 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Vector matchers/Contains (element)" duration="{duration}"/>
+    <testCase name="Vector matchers/Contains (vector)" duration="{duration}"/>
+    <testCase name="Vector matchers/Contains (element), composed" duration="{duration}"/>
+    <testCase name="Vector matchers/Equals" duration="{duration}"/>
+    <testCase name="Vector matchers/UnorderedEquals" duration="{duration}"/>
+    <testCase name="Vector matchers that fail/Contains (element)" duration="{duration}">
+      <failure message="CHECK_THAT(v, VectorContains(-1))">
+FAILED:
+	CHECK_THAT( v, VectorContains(-1) )
+with expansion:
+	{ 1, 2, 3 } Contains: -1
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(empty, VectorContains(1))">
+FAILED:
+	CHECK_THAT( empty, VectorContains(1) )
+with expansion:
+	{  } Contains: 1
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Vector matchers that fail/Contains (vector)" duration="{duration}">
+      <failure message="CHECK_THAT(empty, Contains(v))">
+FAILED:
+	CHECK_THAT( empty, Contains(v) )
+with expansion:
+	{  } Contains: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(v, Contains(v2))">
+FAILED:
+	CHECK_THAT( v, Contains(v2) )
+with expansion:
+	{ 1, 2, 3 } Contains: { 1, 2, 4 }
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Vector matchers that fail/Equals" duration="{duration}">
+      <failure message="CHECK_THAT(v, Equals(v2))">
+FAILED:
+	CHECK_THAT( v, Equals(v2) )
+with expansion:
+	{ 1, 2, 3 } Equals: { 1, 2 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(v2, Equals(v))">
+FAILED:
+	CHECK_THAT( v2, Equals(v) )
+with expansion:
+	{ 1, 2 } Equals: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(empty, Equals(v))">
+FAILED:
+	CHECK_THAT( empty, Equals(v) )
+with expansion:
+	{  } Equals: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(v, Equals(empty))">
+FAILED:
+	CHECK_THAT( v, Equals(empty) )
+with expansion:
+	{ 1, 2, 3 } Equals: {  }
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Vector matchers that fail/UnorderedEquals" duration="{duration}">
+      <failure message="CHECK_THAT(v, UnorderedEquals(empty))">
+FAILED:
+	CHECK_THAT( v, UnorderedEquals(empty) )
+with expansion:
+	{ 1, 2, 3 } UnorderedEquals: {  }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(empty, UnorderedEquals(v))">
+FAILED:
+	CHECK_THAT( empty, UnorderedEquals(v) )
+with expansion:
+	{  } UnorderedEquals: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(permuted, UnorderedEquals(v))">
+FAILED:
+	CHECK_THAT( permuted, UnorderedEquals(v) )
+with expansion:
+	{ 1, 3 } UnorderedEquals: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK_THAT(permuted, UnorderedEquals(v))">
+FAILED:
+	CHECK_THAT( permuted, UnorderedEquals(v) )
+with expansion:
+	{ 3, 1 } UnorderedEquals: { 1, 2, 3 }
+Matchers.tests.cpp:<line number>
+      </failure>
+    </testCase>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Message.tests.cpp">
+    <testCase name="#1455 - INFO and WARN can start with a linebreak" duration="{duration}"/>
+    <testCase name="CAPTURE can deal with complex expressions" duration="{duration}"/>
+    <testCase name="CAPTURE can deal with complex expressions involving commas" duration="{duration}"/>
+    <testCase name="CAPTURE parses string and character constants" duration="{duration}"/>
+    <testCase name="FAIL aborts the test" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+This is a failure
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="FAIL does not require an argument" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="FAIL_CHECK does not abort the test" duration="{duration}">
+      <failure message="FAIL_CHECK()">
+FAILED:
+This is a failure
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="INFO and WARN do not abort tests" duration="{duration}"/>
+    <testCase name="INFO gets logged on failure" duration="{duration}">
+      <failure message="REQUIRE(a == 1)">
+FAILED:
+	REQUIRE( a == 1 )
+with expansion:
+	2 == 1
+this message should be logged
+so should this
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="INFO gets logged on failure, even if captured before successful assertions" duration="{duration}">
+      <failure message="CHECK(a == 1)">
+FAILED:
+	CHECK( a == 1 )
+with expansion:
+	2 == 1
+this message may be logged later
+this message should be logged
+Message.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(a == 0)">
+FAILED:
+	CHECK( a == 0 )
+with expansion:
+	2 == 0
+this message may be logged later
+this message should be logged
+and this, but later
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="INFO is reset for each loop" duration="{duration}">
+      <failure message="REQUIRE(i &lt; 10)">
+FAILED:
+	REQUIRE( i &lt; 10 )
+with expansion:
+	10 &lt; 10
+current counter 10
+i := 10
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Output from all sections is reported/one" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+Message from section one
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Output from all sections is reported/two" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+Message from section two
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="SUCCEED counts as a test pass" duration="{duration}"/>
+    <testCase name="SUCCEED does not require an argument" duration="{duration}"/>
+    <testCase name="Standard output from all sections is reported/two" duration="{duration}"/>
+    <testCase name="The NO_FAIL macro reports a failure but does not fail the test" duration="{duration}"/>
+    <testCase name="just failure" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+Previous info should not be seen
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="just failure after unscoped info" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+previous unscoped info SHOULD not be seen
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="mix info, unscoped info and warning" duration="{duration}"/>
+    <testCase name="not prints unscoped info from previous failures" duration="{duration}">
+      <failure message="REQUIRE(false)">
+FAILED:
+	REQUIRE( false )
+this SHOULD be seen
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="print unscoped info if passing unscoped info is printed" duration="{duration}"/>
+    <testCase name="prints unscoped info on failure" duration="{duration}">
+      <failure message="REQUIRE(false)">
+FAILED:
+	REQUIRE( false )
+this SHOULD be seen
+this SHOULD also be seen
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="prints unscoped info only for the first assertion" duration="{duration}">
+      <failure message="CHECK(false)">
+FAILED:
+	CHECK( false )
+this SHOULD be seen only ONCE
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="sends information to INFO" duration="{duration}">
+      <failure message="REQUIRE(false)">
+FAILED:
+	REQUIRE( false )
+hi
+i := 7
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="stacks unscoped info in loops" duration="{duration}">
+      <failure message="CHECK(false)">
+FAILED:
+	CHECK( false )
+Count 1 to 3...
+1
+2
+3
+Message.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(false)">
+FAILED:
+	CHECK( false )
+Count 4 to 6...
+4
+5
+6
+Message.tests.cpp:<line number>
+      </failure>
+    </testCase>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Misc.tests.cpp">
+    <testCase name="# A test name that starts with a #" duration="{duration}"/>
+    <testCase name="#1175 - Hidden Test" duration="{duration}"/>
+    <testCase name="#835 -- errno should not be touched by Catch" duration="{duration}">
+      <skipped message="CHECK(f() == 0)">
+FAILED:
+	CHECK( f() == 0 )
+with expansion:
+	1 == 0
+Misc.tests.cpp:<line number>
+      </skipped>
+    </testCase>
+    <testCase name="#961 -- Dynamically created sections should all be reported/Looped section 0" duration="{duration}"/>
+    <testCase name="#961 -- Dynamically created sections should all be reported/Looped section 1" duration="{duration}"/>
+    <testCase name="#961 -- Dynamically created sections should all be reported/Looped section 2" duration="{duration}"/>
+    <testCase name="#961 -- Dynamically created sections should all be reported/Looped section 3" duration="{duration}"/>
+    <testCase name="#961 -- Dynamically created sections should all be reported/Looped section 4" duration="{duration}"/>
+    <testCase name="A Template product test case - Foo&lt;float>" duration="{duration}"/>
+    <testCase name="A Template product test case - Foo&lt;int>" duration="{duration}"/>
+    <testCase name="A Template product test case - std::vector&lt;float>" duration="{duration}"/>
+    <testCase name="A Template product test case - std::vector&lt;int>" duration="{duration}"/>
+    <testCase name="A Template product test case with array signature - Bar&lt;float, 42>" duration="{duration}"/>
+    <testCase name="A Template product test case with array signature - Bar&lt;int, 9>" duration="{duration}"/>
+    <testCase name="A Template product test case with array signature - std::array&lt;float, 42>" duration="{duration}"/>
+    <testCase name="A Template product test case with array signature - std::array&lt;int, 9>" duration="{duration}"/>
+    <testCase name="A couple of nested sections followed by a failure" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+to infinity and beyond
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="A couple of nested sections followed by a failure/Outer/Inner" duration="{duration}"/>
+    <testCase name="Factorials are computed" duration="{duration}"/>
+    <testCase name="ManuallyRegistered" duration="{duration}"/>
+    <testCase name="Nice descriptive name" duration="{duration}"/>
+    <testCase name="Product with differing arities - std::tuple&lt;int, double, float>" duration="{duration}"/>
+    <testCase name="Product with differing arities - std::tuple&lt;int, double>" duration="{duration}"/>
+    <testCase name="Product with differing arities - std::tuple&lt;int>" duration="{duration}"/>
+    <testCase name="Sends stuff to stdout and stderr" duration="{duration}"/>
+    <testCase name="Tabs and newlines show in output" duration="{duration}">
+      <failure message="CHECK(s1 == s2)">
+FAILED:
+	CHECK( s1 == s2 )
+with expansion:
+	"if ($b == 10) {
+		$a	= 20;
+}"
+==
+"if ($b == 10) {
+	$a = 20;
+}
+"
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside std::tuple - MyTypes - 0" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside std::tuple - MyTypes - 1" duration="{duration}"/>
+    <testCase name="Template test case with test types specified inside std::tuple - MyTypes - 2" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - float/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - int/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::string/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTest: vectors can be sized and resized - std::tuple&lt;int,float>/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - (std::tuple&lt;int, float>), 6/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - float,4/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - int,5/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="TemplateTestSig: vectors can be sized and resized - std::string,15/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="This test 'should' fail but doesn't" duration="{duration}"/>
+    <testCase name="atomic if" duration="{duration}"/>
+    <testCase name="checkedElse" duration="{duration}"/>
+    <testCase name="checkedElse, failing" duration="{duration}">
+      <failure message="CHECKED_ELSE(flag)">
+FAILED:
+	CHECKED_ELSE( flag )
+with expansion:
+	false
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="REQUIRE(testCheckedElse( false ))">
+FAILED:
+	REQUIRE( testCheckedElse( false ) )
+with expansion:
+	false
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="checkedIf" duration="{duration}"/>
+    <testCase name="checkedIf, failing" duration="{duration}">
+      <failure message="CHECKED_IF(flag)">
+FAILED:
+	CHECKED_IF( flag )
+with expansion:
+	false
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="REQUIRE(testCheckedIf( false ))">
+FAILED:
+	REQUIRE( testCheckedIf( false ) )
+with expansion:
+	false
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="even more nested SECTION tests/c/d (leaf)" duration="{duration}"/>
+    <testCase name="even more nested SECTION tests/c/e (leaf)" duration="{duration}"/>
+    <testCase name="even more nested SECTION tests/f (leaf)" duration="{duration}"/>
+    <testCase name="long long" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 0" duration="{duration}">
+      <failure message="CHECK(b > a)">
+FAILED:
+	CHECK( b > a )
+with expansion:
+	0 > 1
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="looped SECTION tests/b is currently: 1" duration="{duration}">
+      <failure message="CHECK(b > a)">
+FAILED:
+	CHECK( b > a )
+with expansion:
+	1 > 1
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="looped SECTION tests/b is currently: 2" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 3" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 4" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 5" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 6" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 7" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 8" duration="{duration}"/>
+    <testCase name="looped SECTION tests/b is currently: 9" duration="{duration}"/>
+    <testCase name="looped tests" duration="{duration}">
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[0] (1) is even
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[1] (1) is even
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[3] (3) is even
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[4] (5) is even
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[6] (13) is even
+Misc.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(( fib[i] % 2 ) == 0)">
+FAILED:
+	CHECK( ( fib[i] % 2 ) == 0 )
+with expansion:
+	1 == 0
+Testing if fib[7] (21) is even
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="more nested SECTION tests/equal/doesn't equal" duration="{duration}">
+      <failure message="REQUIRE(a == b)">
+FAILED:
+	REQUIRE( a == b )
+with expansion:
+	1 == 2
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="more nested SECTION tests/doesn't equal/not equal" duration="{duration}"/>
+    <testCase name="more nested SECTION tests/doesn't equal/less than" duration="{duration}"/>
+    <testCase name="nested SECTION tests/doesn't equal" duration="{duration}"/>
+    <testCase name="nested SECTION tests/doesn't equal/not equal" duration="{duration}"/>
+    <testCase name="not allowed" duration="{duration}"/>
+    <testCase name="null strings" duration="{duration}"/>
+    <testCase name="random SECTION tests/doesn't equal" duration="{duration}"/>
+    <testCase name="random SECTION tests/not equal" duration="{duration}"/>
+    <testCase name="send a single char to INFO" duration="{duration}">
+      <failure message="REQUIRE(false)">
+FAILED:
+	REQUIRE( false )
+3
+Misc.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="toString on const wchar_t const pointer returns the string contents" duration="{duration}"/>
+    <testCase name="toString on const wchar_t pointer returns the string contents" duration="{duration}"/>
+    <testCase name="toString on wchar_t const pointer returns the string contents" duration="{duration}"/>
+    <testCase name="toString on wchar_t returns the string contents" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized/resizing bigger changes size and capacity" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized/resizing smaller changes size but not capacity" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized/resizing smaller changes size but not capacity/We can use the 'swap trick' to reset the capacity" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized/reserving bigger changes capacity but not size" duration="{duration}"/>
+    <testCase name="vectors can be sized and resized/reserving smaller does not change size or capacity" duration="{duration}"/>
+    <testCase name="xmlentitycheck/embedded xml: &lt;test>it should be possible to embed xml characters, such as &lt;, &quot; or &amp;, or even whole &lt;xml>documents&lt;/xml> within an attribute&lt;/test>" duration="{duration}"/>
+    <testCase name="xmlentitycheck/encoded chars: these should all be encoded: &amp;&amp;&amp;&quot;&quot;&quot;&lt;&lt;&lt;&amp;&quot;&lt;&lt;&amp;&quot;" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringChrono.tests.cpp">
+    <testCase name="Stringifying std::chrono::duration helpers" duration="{duration}"/>
+    <testCase name="Stringifying std::chrono::duration with weird ratios" duration="{duration}"/>
+    <testCase name="Stringifying std::chrono::time_point&lt;system_clock>" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringGeneral.tests.cpp">
+    <testCase name="Capture and info messages/Capture should stringify like assertions" duration="{duration}"/>
+    <testCase name="Capture and info messages/Info should NOT stringify the way assertions do" duration="{duration}"/>
+    <testCase name="Character pretty printing/Specifically escaped" duration="{duration}"/>
+    <testCase name="Character pretty printing/General chars" duration="{duration}"/>
+    <testCase name="Character pretty printing/Low ASCII" duration="{duration}"/>
+    <testCase name="Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified" duration="{duration}"/>
+    <testCase name="Precision of floating point stringification can be set/Floats" duration="{duration}"/>
+    <testCase name="Precision of floating point stringification can be set/Double" duration="{duration}"/>
+    <testCase name="Static arrays are convertible to string/Single item" duration="{duration}"/>
+    <testCase name="Static arrays are convertible to string/Multiple" duration="{duration}"/>
+    <testCase name="Static arrays are convertible to string/Non-trivial inner items" duration="{duration}"/>
+    <testCase name="std::map is convertible string/empty" duration="{duration}"/>
+    <testCase name="std::map is convertible string/single item" duration="{duration}"/>
+    <testCase name="std::map is convertible string/several items" duration="{duration}"/>
+    <testCase name="std::set is convertible string/empty" duration="{duration}"/>
+    <testCase name="std::set is convertible string/single item" duration="{duration}"/>
+    <testCase name="std::set is convertible string/several items" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringPair.tests.cpp">
+    <testCase name="pair&lt;pair&lt;int,const char *,pair&lt;std::string,int> > -> toString" duration="{duration}"/>
+    <testCase name="std::pair&lt;int,const std::string> -> toString" duration="{duration}"/>
+    <testCase name="std::pair&lt;int,std::string> -> toString" duration="{duration}"/>
+    <testCase name="std::vector&lt;std::pair&lt;std::string,int> > -> toString" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringTuple.tests.cpp">
+    <testCase name="tuple&lt;>" duration="{duration}"/>
+    <testCase name="tuple&lt;float,int>" duration="{duration}"/>
+    <testCase name="tuple&lt;int>" duration="{duration}"/>
+    <testCase name="tuple&lt;0,int,const char *>" duration="{duration}"/>
+    <testCase name="tuple&lt;string,string>" duration="{duration}"/>
+    <testCase name="tuple&lt;tuple&lt;int>,tuple&lt;>,float>" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringVector.tests.cpp">
+    <testCase name="array&lt;int, N> -> toString" duration="{duration}"/>
+    <testCase name="vec&lt;vec&lt;string,alloc>> -> toString" duration="{duration}"/>
+    <testCase name="vector&lt;bool> -> toString" duration="{duration}"/>
+    <testCase name="vector&lt;int,allocator> -> toString" duration="{duration}"/>
+    <testCase name="vector&lt;int> -> toString" duration="{duration}"/>
+    <testCase name="vector&lt;string> -> toString" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/ToStringWhich.tests.cpp">
+    <testCase name="stringify ranges" duration="{duration}"/>
+    <testCase name="stringify( has_maker )" duration="{duration}"/>
+    <testCase name="stringify( has_maker_and_operator )" duration="{duration}"/>
+    <testCase name="stringify( has_neither )" duration="{duration}"/>
+    <testCase name="stringify( has_operator )" duration="{duration}"/>
+    <testCase name="stringify( has_template_operator )" duration="{duration}"/>
+    <testCase name="stringify( vectors&lt;has_maker> )" duration="{duration}"/>
+    <testCase name="stringify( vectors&lt;has_maker_and_operator> )" duration="{duration}"/>
+    <testCase name="stringify( vectors&lt;has_operator> )" duration="{duration}"/>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/Tricky.tests.cpp">
+    <testCase name="#1514: stderr/stdout is not captured in tests aborted by an exception" duration="{duration}">
+      <failure message="FAIL()">
+FAILED:
+1514
+Tricky.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="(unimplemented) static bools can be evaluated/compare to true" duration="{duration}"/>
+    <testCase name="(unimplemented) static bools can be evaluated/compare to false" duration="{duration}"/>
+    <testCase name="(unimplemented) static bools can be evaluated/negation" duration="{duration}"/>
+    <testCase name="(unimplemented) static bools can be evaluated/double negation" duration="{duration}"/>
+    <testCase name="(unimplemented) static bools can be evaluated/direct" duration="{duration}"/>
+    <testCase name="A failing expression with a non streamable type is still captured" duration="{duration}">
+      <failure message="CHECK(&amp;o1 == &amp;o2)">
+FAILED:
+	CHECK( &amp;o1 == &amp;o2 )
+with expansion:
+	0x<hex digits> == 0x<hex digits>
+Tricky.tests.cpp:<line number>
+      </failure>
+      <failure message="CHECK(o1 == o2)">
+FAILED:
+	CHECK( o1 == o2 )
+with expansion:
+	{?} == {?}
+Tricky.tests.cpp:<line number>
+      </failure>
+    </testCase>
+    <testCase name="An expression with side-effects should only be evaluated once" duration="{duration}"/>
+    <testCase name="Assertions then sections" duration="{duration}"/>
+    <testCase name="Assertions then sections/A section" duration="{duration}"/>
+    <testCase name="Assertions then sections/A section/Another section" duration="{duration}"/>
+    <testCase name="Assertions then sections/A section/Another other section" duration="{duration}"/>
+    <testCase name="Commas in various macros are allowed" duration="{duration}"/>
+    <testCase name="Comparing function pointers" duration="{duration}"/>
+    <testCase name="Objects that evaluated in boolean contexts can be checked" duration="{duration}"/>
+    <testCase name="Test enum bit values" duration="{duration}"/>
+    <testCase name="Where the LHS is not a simple value" duration="{duration}"/>
+    <testCase name="Where there is more to the expression after the RHS" duration="{duration}"/>
+    <testCase name="X/level/0/a" duration="{duration}"/>
+    <testCase name="X/level/0/b" duration="{duration}"/>
+    <testCase name="X/level/1/a" duration="{duration}"/>
+    <testCase name="X/level/1/b" duration="{duration}"/>
+    <testCase name="boolean member" duration="{duration}"/>
+    <testCase name="non streamable - with conv. op" duration="{duration}"/>
+    <testCase name="non-copyable objects" duration="{duration}"/>
+    <testCase name="null_ptr" duration="{duration}"/>
+    <testCase name="pointer to class" duration="{duration}"/>
+    <testCase name="string literals of different sizes can be compared" duration="{duration}">
+      <failure message="REQUIRE(std::string( &quot;first&quot; ) == &quot;second&quot;)">
+FAILED:
+	REQUIRE( std::string( "first" ) == "second" )
+with expansion:
+	"first" == "second"
+Tricky.tests.cpp:<line number>
+      </failure>
+    </testCase>
+  </file>
+  <file path="projects/<exe-name>/UsageTests/VariadicMacros.tests.cpp">
+    <testCase name="Anonymous test case 1" duration="{duration}"/>
+    <testCase name="Test case with one argument" duration="{duration}"/>
+    <testCase name="Variadic macros/Section with one argument" duration="{duration}"/>
+  </file>
+</testExecutions>
diff --git a/projects/SelfTest/TestMain.cpp b/projects/SelfTest/TestMain.cpp
index 1c023ce..a16f0c2 100644
--- a/projects/SelfTest/TestMain.cpp
+++ b/projects/SelfTest/TestMain.cpp
@@ -13,6 +13,7 @@
 #include "reporters/catch_reporter_teamcity.hpp"
 #include "reporters/catch_reporter_tap.hpp"
 #include "reporters/catch_reporter_automake.hpp"
+#include "reporters/catch_reporter_sonarqube.hpp"
 
 
 // Some example tag aliases
diff --git a/scripts/approvalTests.py b/scripts/approvalTests.py
index bb01e6d..dad2a96 100755
--- a/scripts/approvalTests.py
+++ b/scripts/approvalTests.py
@@ -29,6 +29,7 @@
 lineNumberParser = re.compile(r' line="[0-9]*"')
 hexParser = re.compile(r'\b(0[xX][0-9a-fA-F]+)\b')
 durationsParser = re.compile(r' time="[0-9]*\.[0-9]*"')
+sonarqubeDurationParser = re.compile(r' duration="[0-9]+"')
 timestampsParser = re.compile(r'\d{4}-\d{2}-\d{2}T\d{2}\:\d{2}\:\d{2}Z')
 versionParser = re.compile(r'Catch v[0-9]+\.[0-9]+\.[0-9]+(-develop\.[0-9]+)?')
 nullParser = re.compile(r'\b(__null|nullptr)\b')
@@ -138,6 +139,7 @@
 
     # strip durations and timestamps
     line = durationsParser.sub(' time="{duration}"', line)
+    line = sonarqubeDurationParser.sub(' duration="{duration}"', line)
     line = timestampsParser.sub('{iso8601-timestamp}', line)
     line = specialCaseParser.sub('file:\g<1>', line)
     line = errnoParser.sub('errno', line)
@@ -204,6 +206,8 @@
 approve("xml.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-r", "xml", "--order", "lex", "--rng-seed", "1"])
 # compact reporter, include passes, warn about No Assertions
 approve('compact.sw', ['~[!nonportable]~[!benchmark]~[approvals]', '-s', '-w', 'NoAssertions', '-r', 'compact', '--order', 'lex', "--rng-seed", "1"])
+# sonarqube reporter, include passes, warn about No Assertions
+approve("sonarqube.sw", ["~[!nonportable]~[!benchmark]~[approvals]", "-s", "-w", "NoAssertions", "-r", "sonarqube", "--order", "lex", "--rng-seed", "1"])
 
 if overallResult != 0:
     print("If these differences are expected, run approve.py to approve new baselines.")
diff --git a/scripts/releaseCommon.py b/scripts/releaseCommon.py
index 102fe46..283337d 100644
--- a/scripts/releaseCommon.py
+++ b/scripts/releaseCommon.py
@@ -156,7 +156,7 @@
     # We probably should have some kind of convention to select which reporters need to be copied automagically,
     # but this works for now
     import shutil
-    for rep in ('automake', 'tap', 'teamcity'):
+    for rep in ('automake', 'tap', 'teamcity', 'sonarqube'):
         sourceFile = os.path.join(catchPath, 'include/reporters/catch_reporter_{}.hpp'.format(rep))
         destFile = os.path.join(catchPath, 'single_include', 'catch2', 'catch_reporter_{}.hpp'.format(rep))
         shutil.copyfile(sourceFile, destFile)
diff --git a/docs/generators.md b/docs/generators.md
index 61276f3..d0147d7 100644
--- a/docs/generators.md
+++ b/docs/generators.md
@@ -49,7 +49,7 @@
 * 4 specific purpose generators
   * `RandomIntegerGenerator<Integral>` -- generates random Integrals from range
   * `RandomFloatGenerator<Float>` -- generates random Floats from range
-  * `RangeGenerator<T>` -- generates all values inside a specific range
+  * `RangeGenerator<T>` -- generates all values inside an arithmetic range
   * `IteratorGenerator<T>` -- copies and returns values from an iterator range
 
 > `ChunkGenerator<T>`, `RandomIntegerGenerator<Integral>`, `RandomFloatGenerator<Float>` and `RangeGenerator<T>` were introduced in Catch 2.7.0.
@@ -69,8 +69,8 @@
 * `map<T>(func, GeneratorWrapper<U>&&)` for `MapGenerator<T, U, Func>` (map `U` to `T`)
 * `chunk(chunk-size, GeneratorWrapper<T>&&)` for `ChunkGenerator<T>`
 * `random(IntegerOrFloat a, IntegerOrFloat b)` for `RandomIntegerGenerator` or `RandomFloatGenerator`
-* `range(start, end)` for `RangeGenerator<T>` with a step size of `1`
-* `range(start, end, step)` for `RangeGenerator<T>` with a custom step size
+* `range(Arithemtic start, Arithmetic end)` for `RangeGenerator<Arithmetic>` with a step size of `1`
+* `range(Arithmetic start, Arithmetic end, Arithmetic step)` for `RangeGenerator<Arithmetic>` with a custom step size
 * `from_range(InputIterator from, InputIterator to)` for `IteratorGenerator<T>`
 * `from_range(Container const&)` for `IteratorGenerator<T>`
 
@@ -78,6 +78,8 @@
 
 > `from_range` has been introduced in Catch 2.10.0
 
+> `range()` for floating point numbers has been introduced in Catch X.Y.Z
+
 And can be used as shown in the example below to create a generator
 that returns 100 odd random number:
 
diff --git a/include/internal/catch_generators_specific.hpp b/include/internal/catch_generators_specific.hpp
index f57d29b..dee8e71 100644
--- a/include/internal/catch_generators_specific.hpp
+++ b/include/internal/catch_generators_specific.hpp
@@ -117,7 +117,7 @@
 
 template <typename T>
 GeneratorWrapper<T> range(T const& start, T const& end, T const& step) {
-    static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, "Type must be an integer");
+    static_assert(std::is_arithmetic<T>::value && !std::is_same<T, bool>::value, "Type must be numeric");
     return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end, step));
 }
 
diff --git a/projects/SelfTest/Baselines/compact.sw.approved.txt b/projects/SelfTest/Baselines/compact.sw.approved.txt
index 4090d70..a65f15a 100644
--- a/projects/SelfTest/Baselines/compact.sw.approved.txt
+++ b/projects/SelfTest/Baselines/compact.sw.approved.txt
@@ -631,6 +631,74 @@
 GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true
 GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == 5 for: 5 == 5
 GeneratorsImpl.tests.cpp:<line number>: passed: !(gen.next()) for: !false
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -1.0 == Approx( -1.0 ) with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.9 == Approx( -0.9 ) with 1 message: 'Current expected value is -0.9'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.9'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.8 == Approx( -0.8 ) with 1 message: 'Current expected value is -0.8'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.8'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.7 == Approx( -0.7 ) with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.6 == Approx( -0.6 ) with 1 message: 'Current expected value is -0.6'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.6'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.5 == Approx( -0.5 ) with 1 message: 'Current expected value is -0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.4 == Approx( -0.4 ) with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.3 == Approx( -0.3 ) with 1 message: 'Current expected value is -0.3'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.3'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.2 == Approx( -0.2 ) with 1 message: 'Current expected value is -0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.1 == Approx( -0.1 ) with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.0 == Approx( -0.0 ) with 1 message: 'Current expected value is -1.38778e-16'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -1.38778e-16'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.1 == Approx( 0.1 ) with 1 message: 'Current expected value is 0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.2 == Approx( 0.2 ) with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.3 == Approx( 0.3 ) with 1 message: 'Current expected value is 0.3'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.3'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.4 == Approx( 0.4 ) with 1 message: 'Current expected value is 0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.5 == Approx( 0.5 ) with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.6 == Approx( 0.6 ) with 1 message: 'Current expected value is 0.6'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.6'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.7 == Approx( 0.7 ) with 1 message: 'Current expected value is 0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.8 == Approx( 0.8 ) with 1 message: 'Current expected value is 0.8'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.8'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.9 == Approx( 0.9 ) with 1 message: 'Current expected value is 0.9'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.9'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx( rangeEnd ) for: 1.0 == Approx( 1.0 )
+GeneratorsImpl.tests.cpp:<line number>: passed: !(gen.next()) for: !false
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -1.0 == Approx( -1.0 ) with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.7 == Approx( -0.7 ) with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.4 == Approx( -0.4 ) with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.1 == Approx( -0.1 ) with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.2 == Approx( 0.2 ) with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.5 == Approx( 0.5 ) with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: !(gen.next()) for: !false
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -1.0 == Approx( -1.0 ) with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.7 == Approx( -0.7 ) with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.7'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.4 == Approx( -0.4 ) with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.4'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: -0.1 == Approx( -0.1 ) with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is -0.1'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.2 == Approx( 0.2 ) with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.2'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == Approx(expected) for: 0.5 == Approx( 0.5 ) with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true with 1 message: 'Current expected value is 0.5'
+GeneratorsImpl.tests.cpp:<line number>: passed: !(gen.next()) for: !false
 GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == 5 for: 5 == 5
 GeneratorsImpl.tests.cpp:<line number>: passed: gen.next() for: true
 GeneratorsImpl.tests.cpp:<line number>: passed: gen.get() == 2 for: 2 == 2
diff --git a/projects/SelfTest/Baselines/console.std.approved.txt b/projects/SelfTest/Baselines/console.std.approved.txt
index f6f4344..d43063f 100644
--- a/projects/SelfTest/Baselines/console.std.approved.txt
+++ b/projects/SelfTest/Baselines/console.std.approved.txt
@@ -1381,5 +1381,5 @@
 
 ===============================================================================
 test cases:  305 |  231 passed |  70 failed |  4 failed as expected
-assertions: 1627 | 1475 passed | 131 failed | 21 failed as expected
+assertions: 1695 | 1543 passed | 131 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/console.sw.approved.txt b/projects/SelfTest/Baselines/console.sw.approved.txt
index 0e7f716..d321bd9 100644
--- a/projects/SelfTest/Baselines/console.sw.approved.txt
+++ b/projects/SelfTest/Baselines/console.sw.approved.txt
@@ -4777,6 +4777,504 @@
 -------------------------------------------------------------------------------
 Generators internals
   Range
+  Positive manual step
+  Floating Point
+  Exact
+-------------------------------------------------------------------------------
+GeneratorsImpl.tests.cpp:<line number>
+...............................................................................
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -1.0 == Approx( -1.0 )
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.9 == Approx( -0.9 )
+with message:
+  Current expected value is -0.9
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.9
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.8 == Approx( -0.8 )
+with message:
+  Current expected value is -0.8
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.8
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.7 == Approx( -0.7 )
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.6 == Approx( -0.6 )
+with message:
+  Current expected value is -0.6
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.6
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.5 == Approx( -0.5 )
+with message:
+  Current expected value is -0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.4 == Approx( -0.4 )
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.3 == Approx( -0.3 )
+with message:
+  Current expected value is -0.3
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.3
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.2 == Approx( -0.2 )
+with message:
+  Current expected value is -0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.1 == Approx( -0.1 )
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.0 == Approx( -0.0 )
+with message:
+  Current expected value is -1.38778e-16
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -1.38778e-16
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.1 == Approx( 0.1 )
+with message:
+  Current expected value is 0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.2 == Approx( 0.2 )
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.3 == Approx( 0.3 )
+with message:
+  Current expected value is 0.3
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.3
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.4 == Approx( 0.4 )
+with message:
+  Current expected value is 0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.5 == Approx( 0.5 )
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.6 == Approx( 0.6 )
+with message:
+  Current expected value is 0.6
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.6
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.7 == Approx( 0.7 )
+with message:
+  Current expected value is 0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.8 == Approx( 0.8 )
+with message:
+  Current expected value is 0.8
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.8
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.9 == Approx( 0.9 )
+with message:
+  Current expected value is 0.9
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.9
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx( rangeEnd ) )
+with expansion:
+  1.0 == Approx( 1.0 )
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE_FALSE( gen.next() )
+with expansion:
+  !false
+
+-------------------------------------------------------------------------------
+Generators internals
+  Range
+  Positive manual step
+  Floating Point
+  Slightly over end
+-------------------------------------------------------------------------------
+GeneratorsImpl.tests.cpp:<line number>
+...............................................................................
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -1.0 == Approx( -1.0 )
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.7 == Approx( -0.7 )
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.4 == Approx( -0.4 )
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.1 == Approx( -0.1 )
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.2 == Approx( 0.2 )
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.5 == Approx( 0.5 )
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE_FALSE( gen.next() )
+with expansion:
+  !false
+
+-------------------------------------------------------------------------------
+Generators internals
+  Range
+  Positive manual step
+  Floating Point
+  Slightly under end
+-------------------------------------------------------------------------------
+GeneratorsImpl.tests.cpp:<line number>
+...............................................................................
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -1.0 == Approx( -1.0 )
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.7 == Approx( -0.7 )
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.7
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.4 == Approx( -0.4 )
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.4
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  -0.1 == Approx( -0.1 )
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is -0.1
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.2 == Approx( 0.2 )
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.2
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.get() == Approx(expected) )
+with expansion:
+  0.5 == Approx( 0.5 )
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE( gen.next() )
+with expansion:
+  true
+with message:
+  Current expected value is 0.5
+
+GeneratorsImpl.tests.cpp:<line number>: PASSED:
+  REQUIRE_FALSE( gen.next() )
+with expansion:
+  !false
+
+-------------------------------------------------------------------------------
+Generators internals
+  Range
   Negative manual step
   Integer
   Exact
@@ -12967,5 +13465,5 @@
 
 ===============================================================================
 test cases:  305 |  215 passed |  86 failed |  4 failed as expected
-assertions: 1644 | 1475 passed | 148 failed | 21 failed as expected
+assertions: 1712 | 1543 passed | 148 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/junit.sw.approved.txt b/projects/SelfTest/Baselines/junit.sw.approved.txt
index 61b364f..82bf925 100644
--- a/projects/SelfTest/Baselines/junit.sw.approved.txt
+++ b/projects/SelfTest/Baselines/junit.sw.approved.txt
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <testsuitesloose text artifact
 >
-  <testsuite name="<exe-name>" errors="17" failures="132" tests="1645" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
+  <testsuite name="<exe-name>" errors="17" failures="132" tests="1713" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
     <properties>
       <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals]"/>
       <property name="random-seed" value="1"/>
@@ -444,6 +444,9 @@
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Exact" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Slightly over end" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Integer/Slightly under end" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Floating Point/Exact" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Floating Point/Slightly over end" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="Generators internals/Range/Positive manual step/Floating Point/Slightly under end" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Exact" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Slightly over end" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Generators internals/Range/Negative manual step/Integer/Slightly under end" time="{duration}"/>
diff --git a/projects/SelfTest/Baselines/xml.sw.approved.txt b/projects/SelfTest/Baselines/xml.sw.approved.txt
index 4b67b80..3564025 100644
--- a/projects/SelfTest/Baselines/xml.sw.approved.txt
+++ b/projects/SelfTest/Baselines/xml.sw.approved.txt
@@ -5813,6 +5813,778 @@
         <OverallResults successes="10" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="Range" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+        <Section name="Positive manual step" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+          <Section name="Floating Point" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+            <Section name="Exact" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -1.0 == Approx( -1.0 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.9
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.9 == Approx( -0.9 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.9
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.8
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.8 == Approx( -0.8 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.8
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.7 == Approx( -0.7 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.6
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.6 == Approx( -0.6 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.6
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.5 == Approx( -0.5 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.4 == Approx( -0.4 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.3
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.3 == Approx( -0.3 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.3
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.2 == Approx( -0.2 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.1 == Approx( -0.1 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -1.38778e-16
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.0 == Approx( -0.0 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -1.38778e-16
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.1 == Approx( 0.1 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.2 == Approx( 0.2 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.3
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.3 == Approx( 0.3 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.3
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.4 == Approx( 0.4 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.5 == Approx( 0.5 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.6
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.6 == Approx( 0.6 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.6
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.7 == Approx( 0.7 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.8
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.8 == Approx( 0.8 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.8
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.9
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.9 == Approx( 0.9 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.9
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx( rangeEnd )
+                </Original>
+                <Expanded>
+                  1.0 == Approx( 1.0 )
+                </Expanded>
+              </Expression>
+              <Expression success="true" type="REQUIRE_FALSE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  !(gen.next())
+                </Original>
+                <Expanded>
+                  !false
+                </Expanded>
+              </Expression>
+              <OverallResults successes="42" failures="0" expectedFailures="0"/>
+            </Section>
+            <OverallResults successes="42" failures="0" expectedFailures="0"/>
+          </Section>
+          <OverallResults successes="42" failures="0" expectedFailures="0"/>
+        </Section>
+        <OverallResults successes="42" failures="0" expectedFailures="0"/>
+      </Section>
+      <Section name="Range" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+        <Section name="Positive manual step" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+          <Section name="Floating Point" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+            <Section name="Slightly over end" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -1.0 == Approx( -1.0 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.7 == Approx( -0.7 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.4 == Approx( -0.4 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.1 == Approx( -0.1 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.2 == Approx( 0.2 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.5 == Approx( 0.5 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Expression success="true" type="REQUIRE_FALSE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  !(gen.next())
+                </Original>
+                <Expanded>
+                  !false
+                </Expanded>
+              </Expression>
+              <OverallResults successes="13" failures="0" expectedFailures="0"/>
+            </Section>
+            <OverallResults successes="13" failures="0" expectedFailures="0"/>
+          </Section>
+          <OverallResults successes="13" failures="0" expectedFailures="0"/>
+        </Section>
+        <OverallResults successes="13" failures="0" expectedFailures="0"/>
+      </Section>
+      <Section name="Range" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+        <Section name="Positive manual step" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+          <Section name="Floating Point" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+            <Section name="Slightly under end" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -1.0 == Approx( -1.0 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.7 == Approx( -0.7 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.7
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.4 == Approx( -0.4 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.4
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  -0.1 == Approx( -0.1 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is -0.1
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.2 == Approx( 0.2 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.2
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.get() == Approx(expected)
+                </Original>
+                <Expanded>
+                  0.5 == Approx( 0.5 )
+                </Expanded>
+              </Expression>
+              <Info>
+                Current expected value is 0.5
+              </Info>
+              <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  gen.next()
+                </Original>
+                <Expanded>
+                  true
+                </Expanded>
+              </Expression>
+              <Expression success="true" type="REQUIRE_FALSE" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
+                <Original>
+                  !(gen.next())
+                </Original>
+                <Expanded>
+                  !false
+                </Expanded>
+              </Expression>
+              <OverallResults successes="13" failures="0" expectedFailures="0"/>
+            </Section>
+            <OverallResults successes="13" failures="0" expectedFailures="0"/>
+          </Section>
+          <OverallResults successes="13" failures="0" expectedFailures="0"/>
+        </Section>
+        <OverallResults successes="13" failures="0" expectedFailures="0"/>
+      </Section>
+      <Section name="Range" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
         <Section name="Negative manual step" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
           <Section name="Integer" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
             <Section name="Exact" filename="projects/<exe-name>/IntrospectiveTests/GeneratorsImpl.tests.cpp" >
@@ -15390,7 +16162,7 @@
       </Section>
       <OverallResult success="true"/>
     </TestCase>
-    <OverallResults successes="1475" failures="149" expectedFailures="21"/>
+    <OverallResults successes="1543" failures="149" expectedFailures="21"/>
   </Group>
-  <OverallResults successes="1475" failures="148" expectedFailures="21"/>
+  <OverallResults successes="1543" failures="148" expectedFailures="21"/>
 </Catch>
diff --git a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
index 076c91a..9cbe893 100644
--- a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
+++ b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp
@@ -173,6 +173,58 @@
                     REQUIRE_FALSE(gen.next());
                 }
             }
+
+            SECTION("Floating Point") {
+                SECTION("Exact") {
+                    const auto rangeStart = -1.;
+                    const auto rangeEnd = 1.;
+                    const auto step = .1;
+
+                    auto gen = range(rangeStart, rangeEnd, step);
+                    auto expected = rangeStart; 
+                    while( (rangeEnd - expected) > step ) {
+                        INFO( "Current expected value is " << expected )
+                        REQUIRE(gen.get() == Approx(expected));
+                        REQUIRE(gen.next());
+
+                        expected += step;
+                    }
+                    REQUIRE(gen.get() == Approx( rangeEnd ) );
+                    REQUIRE_FALSE(gen.next());
+                }
+                SECTION("Slightly over end") {
+                    const auto rangeStart = -1.;
+                    const auto rangeEnd = 1.;
+                    const auto step = .3;
+
+                    auto gen = range(rangeStart, rangeEnd, step);
+                    auto expected = rangeStart; 
+                    while( (rangeEnd - expected) > step ) {
+                       INFO( "Current expected value is " << expected )
+                       REQUIRE(gen.get() == Approx(expected));
+                       REQUIRE(gen.next());
+
+                       expected += step;
+                    }
+                    REQUIRE_FALSE(gen.next());
+                }
+                SECTION("Slightly under end") {
+                    const auto rangeStart = -1.;
+                    const auto rangeEnd = .9;
+                    const auto step = .3;
+
+                    auto gen = range(rangeStart, rangeEnd, step);
+                    auto expected = rangeStart; 
+                    while( (rangeEnd - expected) > step ) {
+                       INFO( "Current expected value is " << expected )
+                       REQUIRE(gen.get() == Approx(expected));
+                       REQUIRE(gen.next());
+
+                       expected += step;
+                    }
+                    REQUIRE_FALSE(gen.next());
+                }                
+            }
         }
         SECTION("Negative manual step") {
             SECTION("Integer") {
diff --git a/docs/matchers.md b/docs/matchers.md
index af2071e..bdb7dac 100644
--- a/docs/matchers.md
+++ b/docs/matchers.md
@@ -17,7 +17,7 @@
 using Catch::Matchers::EndsWith; // or Catch::EndsWith
 std::string str = getStringFromSomewhere();
 REQUIRE_THAT( str, EndsWith( "as a service" ) );
- ```
+```
 
 The matcher objects can take multiple arguments, allowing more fine tuning.
 The built-in string matchers, for example, take a second argument specifying whether the comparison is
@@ -35,6 +35,22 @@
     (StartsWith( "Big data" ) && !Contains( "web scale" ) ) );
 ```
 
+_The combining operators do not take ownership of the matcher objects.
+This means that if you store the combined object, you have to ensure that
+the matcher objects outlive its last use. What this means is that code
+like this leads to a use-after-free and (hopefully) a crash:_
+
+```cpp
+TEST_CASE("Bugs, bugs, bugs", "[Bug]"){
+    std::string str = "Bugs as a service";
+
+    auto match_expression = Catch::EndsWith( "as a service" ) ||
+        (Catch::StartsWith( "Big data" ) && !Catch::Contains( "web scale" ) );
+    REQUIRE_THAT(str, match_expression);
+}
+```
+
+
 ## Built in matchers
 Catch2 provides some matchers by default. They can be found in the
 `Catch::Matchers::foo` namespace and are imported into the `Catch`
diff --git a/include/internal/catch_stringref.cpp b/include/internal/catch_stringref.cpp
index b46414a..215feef 100644
--- a/include/internal/catch_stringref.cpp
+++ b/include/internal/catch_stringref.cpp
@@ -5,14 +5,10 @@
  *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
  */
 
-
-#if defined(__clang__)
-#    pragma clang diagnostic push
-#    pragma clang diagnostic ignored "-Wexit-time-destructors"
-#endif
-
+#include "catch_enforce.h"
 #include "catch_stringref.h"
 
+#include <algorithm>
 #include <ostream>
 #include <cstring>
 #include <cstdint>
@@ -22,63 +18,33 @@
     : StringRef( rawChars, static_cast<StringRef::size_type>(std::strlen(rawChars) ) )
     {}
 
-    void StringRef::swap( StringRef& other ) noexcept {
-        std::swap( m_start, other.m_start );
-        std::swap( m_size, other.m_size );
-        std::swap( m_data, other.m_data );
-    }
-
     auto StringRef::c_str() const -> char const* {
-        if( !isSubstring() )
-            return m_start;
-
-        const_cast<StringRef *>( this )->takeOwnership();
-        return m_data;
+        CATCH_ENFORCE(isNullTerminated(), "Called StringRef::c_str() on a non-null-terminated instance");
+        return m_start;
     }
-    auto StringRef::currentData() const noexcept -> char const* {
+    auto StringRef::data() const noexcept -> char const* {
         return m_start;
     }
 
-    auto StringRef::isOwned() const noexcept -> bool {
-        return m_data != nullptr;
-    }
-    auto StringRef::isSubstring() const noexcept -> bool {
-        return m_start[m_size] != '\0';
-    }
-
-    void StringRef::takeOwnership() {
-        if( !isOwned() ) {
-            m_data = new char[m_size+1];
-            memcpy( m_data, m_start, m_size );
-            m_data[m_size] = '\0';
+    auto StringRef::substr( size_type start, size_type size ) const noexcept -> StringRef {
+        if (start < m_size) {
+            return StringRef(m_start + start, (std::min)(m_size - start, size));
+        } else {
+            return StringRef();
         }
     }
-    auto StringRef::substr( size_type start, size_type size ) const noexcept -> StringRef {
-        if( start < m_size )
-            return StringRef( m_start+start, size );
-        else
-            return StringRef();
-    }
     auto StringRef::operator == ( StringRef const& other ) const noexcept -> bool {
-        return
-            size() == other.size() &&
-            (std::strncmp( m_start, other.m_start, size() ) == 0);
-    }
-    auto StringRef::operator != ( StringRef const& other ) const noexcept -> bool {
-        return !operator==( other );
+        return m_size == other.m_size
+            && (std::memcmp( m_start, other.m_start, m_size ) == 0);
     }
 
     auto operator << ( std::ostream& os, StringRef const& str ) -> std::ostream& {
-        return os.write(str.currentData(), str.size());
+        return os.write(str.data(), str.size());
     }
 
     auto operator+=( std::string& lhs, StringRef const& rhs ) -> std::string& {
-        lhs.append(rhs.currentData(), rhs.size());
+        lhs.append(rhs.data(), rhs.size());
         return lhs;
     }
 
 } // namespace Catch
-
-#if defined(__clang__)
-#    pragma clang diagnostic pop
-#endif
diff --git a/include/internal/catch_stringref.h b/include/internal/catch_stringref.h
index a45147d..dc2e748 100644
--- a/include/internal/catch_stringref.h
+++ b/include/internal/catch_stringref.h
@@ -16,49 +16,24 @@
 
     /// A non-owning string class (similar to the forthcoming std::string_view)
     /// Note that, because a StringRef may be a substring of another string,
-    /// it may not be null terminated. c_str() must return a null terminated
-    /// string, however, and so the StringRef will internally take ownership
-    /// (taking a copy), if necessary. In theory this ownership is not externally
-    /// visible - but it does mean (substring) StringRefs should not be shared between
-    /// threads.
+    /// it may not be null terminated.
     class StringRef {
     public:
         using size_type = std::size_t;
         using const_iterator = const char*;
 
     private:
-        friend struct StringRefTestAccess;
-
-        char const* m_start;
-        size_type m_size;
-
-        char* m_data = nullptr;
-
-        void takeOwnership();
-
         static constexpr char const* const s_empty = "";
 
-    public: // construction/ assignment
-        StringRef() noexcept
-        :   StringRef( s_empty, 0 )
-        {}
+        char const* m_start = s_empty;
+        size_type m_size = 0;
 
-        StringRef( StringRef const& other ) noexcept
-        :   m_start( other.m_start ),
-            m_size( other.m_size )
-        {}
-
-        StringRef( StringRef&& other ) noexcept
-        :   m_start( other.m_start ),
-            m_size( other.m_size ),
-            m_data( other.m_data )
-        {
-            other.m_data = nullptr;
-        }
+    public: // construction
+        constexpr StringRef() noexcept = default;
 
         StringRef( char const* rawChars ) noexcept;
 
-        StringRef( char const* rawChars, size_type size ) noexcept
+        constexpr StringRef( char const* rawChars, size_type size ) noexcept
         :   m_start( rawChars ),
             m_size( size )
         {}
@@ -68,27 +43,15 @@
             m_size( stdString.size() )
         {}
 
-        ~StringRef() noexcept {
-            delete[] m_data;
-        }
-
-        auto operator = ( StringRef const &other ) noexcept -> StringRef& {
-            delete[] m_data;
-            m_data = nullptr;
-            m_start = other.m_start;
-            m_size = other.m_size;
-            return *this;
-        }
-
         explicit operator std::string() const {
             return std::string(m_start, m_size);
         }
 
-        void swap( StringRef& other ) noexcept;
-
     public: // operators
         auto operator == ( StringRef const& other ) const noexcept -> bool;
-        auto operator != ( StringRef const& other ) const noexcept -> bool;
+        auto operator != (StringRef const& other) const noexcept -> bool {
+            return !(*this == other);
+        }
 
         auto operator[] ( size_type index ) const noexcept -> char {
             assert(index < m_size);
@@ -96,42 +59,45 @@
         }
 
     public: // named queries
-        auto empty() const noexcept -> bool {
+        constexpr auto empty() const noexcept -> bool {
             return m_size == 0;
         }
-        auto size() const noexcept -> size_type {
+        constexpr auto size() const noexcept -> size_type {
             return m_size;
         }
 
+        // Returns the current start pointer. If the StringRef is not
+        // null-terminated, throws std::domain_exception
         auto c_str() const -> char const*;
 
     public: // substrings and searches
-        auto substr( size_type start, size_type size ) const noexcept -> StringRef;
+        // Returns a substring of [start, start + length).
+        // If start + length > size(), then the substring is [start, size()).
+        // If start > size(), then the substring is empty.
+        auto substr( size_type start, size_type length ) const noexcept -> StringRef;
 
-        // Returns the current start pointer.
-        // Note that the pointer can change when if the StringRef is a substring
-        auto currentData() const noexcept -> char const*;
+        // Returns the current start pointer. May not be null-terminated.
+        auto data() const noexcept -> char const*;
+
+        constexpr auto isNullTerminated() const noexcept -> bool {
+            return m_start[m_size] == '\0';
+        }
 
     public: // iterators
-        const_iterator begin() const { return m_start; }
-        const_iterator end() const { return m_start + m_size; }
-
-    private: // ownership queries - may not be consistent between calls
-        auto isOwned() const noexcept -> bool;
-        auto isSubstring() const noexcept -> bool;
+        constexpr const_iterator begin() const { return m_start; }
+        constexpr const_iterator end() const { return m_start + m_size; }
     };
 
     auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;
     auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;
 
 
-    inline auto operator "" _sr( char const* rawChars, std::size_t size ) noexcept -> StringRef {
+    constexpr auto operator "" _sr( char const* rawChars, std::size_t size ) noexcept -> StringRef {
         return StringRef( rawChars, size );
     }
-
 } // namespace Catch
 
-inline auto operator "" _catch_sr( char const* rawChars, std::size_t size ) noexcept -> Catch::StringRef {
+constexpr auto operator "" _catch_sr( char const* rawChars, std::size_t size ) noexcept -> Catch::StringRef {
     return Catch::StringRef( rawChars, size );
 }
 
diff --git a/projects/SelfTest/Baselines/compact.sw.approved.txt b/projects/SelfTest/Baselines/compact.sw.approved.txt
index 311183b..4090d70 100644
--- a/projects/SelfTest/Baselines/compact.sw.approved.txt
+++ b/projects/SelfTest/Baselines/compact.sw.approved.txt
@@ -1095,37 +1095,32 @@
 Matchers.tests.cpp:<line number>: passed: testStringForMatching(), EndsWith(" SuBsTrInG", Catch::CaseSensitive::No) for: "this string contains 'abc' as a substring" ends with: " substring" (case insensitive)
 String.tests.cpp:<line number>: passed: empty.empty() for: true
 String.tests.cpp:<line number>: passed: empty.size() == 0 for: 0 == 0
+String.tests.cpp:<line number>: passed: empty.isNullTerminated() for: true
 String.tests.cpp:<line number>: passed: std::strcmp( empty.c_str(), "" ) == 0 for: 0 == 0
 String.tests.cpp:<line number>: passed: s.empty() == false for: false == false
 String.tests.cpp:<line number>: passed: s.size() == 5 for: 5 == 5
-String.tests.cpp:<line number>: passed: isSubstring( s ) == false for: false == false
+String.tests.cpp:<line number>: passed: s.isNullTerminated() for: true
 String.tests.cpp:<line number>: passed: std::strcmp( rawChars, "hello" ) == 0 for: 0 == 0
-String.tests.cpp:<line number>: passed: isOwned( s ) == false for: false == false
+String.tests.cpp:<line number>: passed: s.c_str()
 String.tests.cpp:<line number>: passed: s.c_str() == rawChars for: "hello" == "hello"
-String.tests.cpp:<line number>: passed: isOwned( s ) == false for: false == false
+String.tests.cpp:<line number>: passed: s.data() == rawChars for: "hello" == "hello"
 String.tests.cpp:<line number>: passed: original == "original"
-String.tests.cpp:<line number>: passed: isSubstring( original ) for: true
-String.tests.cpp:<line number>: passed: isOwned( original ) == false for: false == false
-String.tests.cpp:<line number>: passed: isOwned( original ) for: true
+String.tests.cpp:<line number>: passed: !(original.isNullTerminated()) for: !false
+String.tests.cpp:<line number>: passed: original.c_str()
+String.tests.cpp:<line number>: passed: original.data()
 String.tests.cpp:<line number>: passed: ss.empty() == false for: false == false
 String.tests.cpp:<line number>: passed: ss.size() == 5 for: 5 == 5
-String.tests.cpp:<line number>: passed: std::strcmp( ss.c_str(), "hello" ) == 0 for: 0 == 0
+String.tests.cpp:<line number>: passed: std::strncmp( ss.data(), "hello", 5 ) == 0 for: 0 == 0
 String.tests.cpp:<line number>: passed: ss == "hello" for: hello == "hello"
-String.tests.cpp:<line number>: passed: isSubstring( ss ) for: true
-String.tests.cpp:<line number>: passed: isOwned( ss ) == false for: false == false
-String.tests.cpp:<line number>: passed: rawChars == s.currentData() for: "hello world!" == "hello world!"
-String.tests.cpp:<line number>: passed: ss.c_str() != rawChars for: "hello" != "hello world!"
-String.tests.cpp:<line number>: passed: isOwned( ss ) for: true
-String.tests.cpp:<line number>: passed: isOwned(ss) == false for: false == false
-String.tests.cpp:<line number>: passed: ss == "hello" for: hello == "hello"
-String.tests.cpp:<line number>: passed: rawChars == ss.currentData() for: "hello world!" == "hello world!"
 String.tests.cpp:<line number>: passed: ss.size() == 6 for: 6 == 6
 String.tests.cpp:<line number>: passed: std::strcmp( ss.c_str(), "world!" ) == 0 for: 0 == 0
-String.tests.cpp:<line number>: passed: s.c_str() == s2.c_str() for: "hello world!" == "hello world!"
-String.tests.cpp:<line number>: passed: s.c_str() != ss.c_str() for: "hello world!" != "hello"
+String.tests.cpp:<line number>: passed: s.data() == s2.data() for: "hello world!" == "hello world!"
+String.tests.cpp:<line number>: passed: s.data() == ss.data() for: "hello world!" == "hello world!"
 String.tests.cpp:<line number>: passed: s.substr(s.size() + 1, 123).empty() for: true
-String.tests.cpp:<line number>: passed: StringRef("hello") == StringRef("hello") for: hello == hello
-String.tests.cpp:<line number>: passed: StringRef("hello") != StringRef("cello") for: hello != cello
+String.tests.cpp:<line number>: passed: std::strcmp(ss.c_str(), "world!") == 0 for: 0 == 0
+String.tests.cpp:<line number>: passed: buffer1 != buffer2 for: "Hello" != "Hello"
+String.tests.cpp:<line number>: passed: left == right for: Hello == Hello
+String.tests.cpp:<line number>: passed: left != left.substr(0, 3) for: Hello != Hel
 String.tests.cpp:<line number>: passed: sr == "a standard string" for: a standard string == "a standard string"
 String.tests.cpp:<line number>: passed: sr.size() == stdStr.size() for: 17 == 17
 String.tests.cpp:<line number>: passed: sr == "a standard string" for: a standard string == "a standard string"
@@ -1136,6 +1131,17 @@
 String.tests.cpp:<line number>: passed: stdStr.size() == sr.size() for: 11 == 11
 String.tests.cpp:<line number>: passed: stdStr == "a stringref" for: "a stringref" == "a stringref"
 String.tests.cpp:<line number>: passed: stdStr.size() == sr.size() for: 11 == 11
+String.tests.cpp:<line number>: passed: with 1 message: 'StringRef{}.size() == 0'
+String.tests.cpp:<line number>: passed: with 1 message: 'StringRef{ "abc", 3 }.size() == 3'
+String.tests.cpp:<line number>: passed: with 1 message: 'StringRef{ "abc", 3 }.isNullTerminated()'
+String.tests.cpp:<line number>: passed: with 1 message: 'StringRef{ "abc", 2 }.size() == 2'
+String.tests.cpp:<line number>: passed: with 1 message: '!(StringRef{ "abc", 2 }.isNullTerminated())'
+String.tests.cpp:<line number>: passed: with 1 message: '!(sr1.empty())'
+String.tests.cpp:<line number>: passed: with 1 message: 'sr1.size() == 3'
+String.tests.cpp:<line number>: passed: with 1 message: 'sr1.isNullTerminated()'
+String.tests.cpp:<line number>: passed: with 1 message: 'sr2.empty()'
+String.tests.cpp:<line number>: passed: with 1 message: 'sr2.size() == 0'
+String.tests.cpp:<line number>: passed: with 1 message: 'sr2.isNullTerminated()'
 ToStringChrono.tests.cpp:<line number>: passed: minute == seconds for: 1 m == 60 s
 ToStringChrono.tests.cpp:<line number>: passed: hour != seconds for: 1 h != 60 s
 ToStringChrono.tests.cpp:<line number>: passed: micro != milli for: 1 us != 1 ms
diff --git a/projects/SelfTest/Baselines/console.std.approved.txt b/projects/SelfTest/Baselines/console.std.approved.txt
index fd405a8..f6f4344 100644
--- a/projects/SelfTest/Baselines/console.std.approved.txt
+++ b/projects/SelfTest/Baselines/console.std.approved.txt
@@ -1380,6 +1380,6 @@
   Why would you throw a std::string?
 
 ===============================================================================
-test cases:  304 |  230 passed |  70 failed |  4 failed as expected
-assertions: 1621 | 1469 passed | 131 failed | 21 failed as expected
+test cases:  305 |  231 passed |  70 failed |  4 failed as expected
+assertions: 1627 | 1475 passed | 131 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/console.sw.approved.txt b/projects/SelfTest/Baselines/console.sw.approved.txt
index f234f88..0e7f716 100644
--- a/projects/SelfTest/Baselines/console.sw.approved.txt
+++ b/projects/SelfTest/Baselines/console.sw.approved.txt
@@ -7996,6 +7996,11 @@
   0 == 0
 
 String.tests.cpp:<line number>: PASSED:
+  REQUIRE( empty.isNullTerminated() )
+with expansion:
+  true
+
+String.tests.cpp:<line number>: PASSED:
   REQUIRE( std::strcmp( empty.c_str(), "" ) == 0 )
 with expansion:
   0 == 0
@@ -8018,27 +8023,17 @@
   5 == 5
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isSubstring( s ) == false )
+  REQUIRE( s.isNullTerminated() )
 with expansion:
-  false == false
+  true
 
 String.tests.cpp:<line number>: PASSED:
   REQUIRE( std::strcmp( rawChars, "hello" ) == 0 )
 with expansion:
   0 == 0
 
--------------------------------------------------------------------------------
-StringRef
-  From string literal
-  c_str() does not cause copy
--------------------------------------------------------------------------------
-String.tests.cpp:<line number>
-...............................................................................
-
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( s ) == false )
-with expansion:
-  false == false
+  REQUIRE_NOTHROW( s.c_str() )
 
 String.tests.cpp:<line number>: PASSED:
   REQUIRE( s.c_str() == rawChars )
@@ -8046,9 +8041,9 @@
   "hello" == "hello"
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( s ) == false )
+  REQUIRE( s.data() == rawChars )
 with expansion:
-  false == false
+  "hello" == "hello"
 
 -------------------------------------------------------------------------------
 StringRef
@@ -8061,19 +8056,15 @@
   REQUIRE( original == "original" )
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isSubstring( original ) )
+  REQUIRE_FALSE( original.isNullTerminated() )
 with expansion:
-  true
+  !false
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( original ) == false )
-with expansion:
-  false == false
+  REQUIRE_THROWS( original.c_str() )
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( original ) )
-with expansion:
-  true
+  REQUIRE_NOTHROW( original.data() )
 
 -------------------------------------------------------------------------------
 StringRef
@@ -8094,7 +8085,7 @@
   5 == 5
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( std::strcmp( ss.c_str(), "hello" ) == 0 )
+  REQUIRE( std::strncmp( ss.data(), "hello", 5 ) == 0 )
 with expansion:
   0 == 0
 
@@ -8102,63 +8093,6 @@
   REQUIRE( ss == "hello" )
 with expansion:
   hello == "hello"
-
--------------------------------------------------------------------------------
-StringRef
-  Substrings
-  c_str() causes copy
--------------------------------------------------------------------------------
-String.tests.cpp:<line number>
-...............................................................................
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isSubstring( ss ) )
-with expansion:
-  true
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( ss ) == false )
-with expansion:
-  false == false
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( rawChars == s.currentData() )
-with expansion:
-  "hello world!" == "hello world!"
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( ss.c_str() != rawChars )
-with expansion:
-  "hello" != "hello world!"
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned( ss ) )
-with expansion:
-  true
-
--------------------------------------------------------------------------------
-StringRef
-  Substrings
-  c_str() causes copy
-  Self-assignment after substring
--------------------------------------------------------------------------------
-String.tests.cpp:<line number>
-...............................................................................
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( isOwned(ss) == false )
-with expansion:
-  false == false
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( ss == "hello" )
-with expansion:
-  hello == "hello"
-
-String.tests.cpp:<line number>: PASSED:
-  REQUIRE( rawChars == ss.currentData() )
-with expansion:
-  "hello world!" == "hello world!"
 
 -------------------------------------------------------------------------------
 StringRef
@@ -8187,22 +8121,22 @@
 ...............................................................................
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( s.c_str() == s2.c_str() )
+  REQUIRE( s.data() == s2.data() )
 with expansion:
   "hello world!" == "hello world!"
 
 -------------------------------------------------------------------------------
 StringRef
   Substrings
-  Pointer values of substring refs should not match
+  Pointer values of substring refs should also match
 -------------------------------------------------------------------------------
 String.tests.cpp:<line number>
 ...............................................................................
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( s.c_str() != ss.c_str() )
+  REQUIRE( s.data() == ss.data() )
 with expansion:
-  "hello world!" != "hello"
+  "hello world!" == "hello world!"
 
 -------------------------------------------------------------------------------
 StringRef
@@ -8219,20 +8153,38 @@
 
 -------------------------------------------------------------------------------
 StringRef
-  Comparisons
+  Substrings
+  Substring off the end are trimmed
 -------------------------------------------------------------------------------
 String.tests.cpp:<line number>
 ...............................................................................
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( StringRef("hello") == StringRef("hello") )
+  REQUIRE( std::strcmp(ss.c_str(), "world!") == 0 )
 with expansion:
-  hello == hello
+  0 == 0
+
+-------------------------------------------------------------------------------
+StringRef
+  Comparisons are deep
+-------------------------------------------------------------------------------
+String.tests.cpp:<line number>
+...............................................................................
 
 String.tests.cpp:<line number>: PASSED:
-  REQUIRE( StringRef("hello") != StringRef("cello") )
+  CHECK( buffer1 != buffer2 )
 with expansion:
-  hello != cello
+  "Hello" != "Hello"
+
+String.tests.cpp:<line number>: PASSED:
+  REQUIRE( left == right )
+with expansion:
+  Hello == Hello
+
+String.tests.cpp:<line number>: PASSED:
+  REQUIRE( left != left.substr(0, 3) )
+with expansion:
+  Hello != Hel
 
 -------------------------------------------------------------------------------
 StringRef
@@ -8323,6 +8275,64 @@
   REQUIRE( stdStr.size() == sr.size() )
 with expansion:
   11 == 11
+
+-------------------------------------------------------------------------------
+StringRef at compilation time
+  Simple constructors
+-------------------------------------------------------------------------------
+String.tests.cpp:<line number>
+...............................................................................
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  StringRef{}.size() == 0
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  StringRef{ "abc", 3 }.size() == 3
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  StringRef{ "abc", 3 }.isNullTerminated()
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  StringRef{ "abc", 2 }.size() == 2
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  !(StringRef{ "abc", 2 }.isNullTerminated())
+
+-------------------------------------------------------------------------------
+StringRef at compilation time
+  UDL construction
+-------------------------------------------------------------------------------
+String.tests.cpp:<line number>
+...............................................................................
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  !(sr1.empty())
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  sr1.size() == 3
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  sr1.isNullTerminated()
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  sr2.empty()
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  sr2.size() == 0
+
+String.tests.cpp:<line number>: PASSED:
+with message:
+  sr2.isNullTerminated()
 
 -------------------------------------------------------------------------------
 Stringifying std::chrono::duration helpers
@@ -12956,6 +12966,6 @@
 Misc.tests.cpp:<line number>: PASSED:
 
 ===============================================================================
-test cases:  304 |  214 passed |  86 failed |  4 failed as expected
-assertions: 1638 | 1469 passed | 148 failed | 21 failed as expected
+test cases:  305 |  215 passed |  86 failed |  4 failed as expected
+assertions: 1644 | 1475 passed | 148 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/junit.sw.approved.txt b/projects/SelfTest/Baselines/junit.sw.approved.txt
index bfacb03..61b364f 100644
--- a/projects/SelfTest/Baselines/junit.sw.approved.txt
+++ b/projects/SelfTest/Baselines/junit.sw.approved.txt
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <testsuitesloose text artifact
 >
-  <testsuite name="<exe-name>" errors="17" failures="132" tests="1639" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
+  <testsuite name="<exe-name>" errors="17" failures="132" tests="1645" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
     <properties>
       <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals]"/>
       <property name="random-seed" value="1"/>
@@ -726,21 +726,21 @@
     <testcase classname="<exe-name>.global" name="String matchers" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/Empty string" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/From string literal" time="{duration}"/>
-    <testcase classname="<exe-name>.global" name="StringRef/From string literal/c_str() does not cause copy" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/From sub-string" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/Substrings/zero-based substring" time="{duration}"/>
-    <testcase classname="<exe-name>.global" name="StringRef/Substrings/c_str() causes copy" time="{duration}"/>
-    <testcase classname="<exe-name>.global" name="StringRef/Substrings/c_str() causes copy/Self-assignment after substring" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/Substrings/non-zero-based substring" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/Substrings/Pointer values of full refs should match" time="{duration}"/>
-    <testcase classname="<exe-name>.global" name="StringRef/Substrings/Pointer values of substring refs should not match" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="StringRef/Substrings/Pointer values of substring refs should also match" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/Substrings/Past the end substring" time="{duration}"/>
-    <testcase classname="<exe-name>.global" name="StringRef/Comparisons" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="StringRef/Substrings/Substring off the end are trimmed" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="StringRef/Comparisons are deep" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/from std::string/implicitly constructed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/from std::string/explicitly constructed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/from std::string/assigned" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/to std::string/explicitly constructed" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="StringRef/to std::string/assigned" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="StringRef at compilation time/Simple constructors" time="{duration}"/>
+    <testcase classname="<exe-name>.global" name="StringRef at compilation time/UDL construction" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Stringifying std::chrono::duration helpers" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Stringifying std::chrono::duration with weird ratios" time="{duration}"/>
     <testcase classname="<exe-name>.global" name="Stringifying std::chrono::time_point&lt;system_clock>" time="{duration}"/>
diff --git a/projects/SelfTest/Baselines/xml.sw.approved.txt b/projects/SelfTest/Baselines/xml.sw.approved.txt
index 6193dfb..4b67b80 100644
--- a/projects/SelfTest/Baselines/xml.sw.approved.txt
+++ b/projects/SelfTest/Baselines/xml.sw.approved.txt
@@ -9848,13 +9848,21 @@
         </Expression>
         <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
+            empty.isNullTerminated()
+          </Original>
+          <Expanded>
+            true
+          </Expanded>
+        </Expression>
+        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Original>
             std::strcmp( empty.c_str(), "" ) == 0
           </Original>
           <Expanded>
             0 == 0
           </Expanded>
         </Expression>
-        <OverallResults successes="3" failures="0" expectedFailures="0"/>
+        <OverallResults successes="4" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="From string literal" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
         <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
@@ -9875,10 +9883,10 @@
         </Expression>
         <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            isSubstring( s ) == false
+            s.isNullTerminated()
           </Original>
           <Expanded>
-            false == false
+            true
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
@@ -9889,33 +9897,30 @@
             0 == 0
           </Expanded>
         </Expression>
-        <Section name="c_str() does not cause copy" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              isOwned( s ) == false
-            </Original>
-            <Expanded>
-              false == false
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              s.c_str() == rawChars
-            </Original>
-            <Expanded>
-              "hello" == "hello"
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              isOwned( s ) == false
-            </Original>
-            <Expanded>
-              false == false
-            </Expanded>
-          </Expression>
-          <OverallResults successes="3" failures="0" expectedFailures="0"/>
-        </Section>
+        <Expression success="true" type="REQUIRE_NOTHROW" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Original>
+            s.c_str()
+          </Original>
+          <Expanded>
+            s.c_str()
+          </Expanded>
+        </Expression>
+        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Original>
+            s.c_str() == rawChars
+          </Original>
+          <Expanded>
+            "hello" == "hello"
+          </Expanded>
+        </Expression>
+        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Original>
+            s.data() == rawChars
+          </Original>
+          <Expanded>
+            "hello" == "hello"
+          </Expanded>
+        </Expression>
         <OverallResults successes="7" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="From sub-string" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
@@ -9927,28 +9932,28 @@
             original == "original"
           </Expanded>
         </Expression>
-        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Expression success="true" type="REQUIRE_FALSE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            isSubstring( original )
+            !(original.isNullTerminated())
           </Original>
           <Expanded>
-            true
+            !false
           </Expanded>
         </Expression>
-        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Expression success="true" type="REQUIRE_THROWS" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            isOwned( original ) == false
+            original.c_str()
           </Original>
           <Expanded>
-            false == false
+            original.c_str()
           </Expanded>
         </Expression>
-        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Expression success="true" type="REQUIRE_NOTHROW" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            isOwned( original )
+            original.data()
           </Original>
           <Expanded>
-            true
+            original.data()
           </Expanded>
         </Expression>
         <OverallResults successes="4" failures="0" expectedFailures="0"/>
@@ -9973,7 +9978,7 @@
           </Expression>
           <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
             <Original>
-              std::strcmp( ss.c_str(), "hello" ) == 0
+              std::strncmp( ss.data(), "hello", 5 ) == 0
             </Original>
             <Expanded>
               0 == 0
@@ -9990,79 +9995,6 @@
           <OverallResults successes="4" failures="0" expectedFailures="0"/>
         </Section>
         <OverallResults successes="4" failures="0" expectedFailures="0"/>
-      </Section>
-      <Section name="Substrings" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-        <Section name="c_str() causes copy" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              isSubstring( ss )
-            </Original>
-            <Expanded>
-              true
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              isOwned( ss ) == false
-            </Original>
-            <Expanded>
-              false == false
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              rawChars == s.currentData()
-            </Original>
-            <Expanded>
-              "hello world!" == "hello world!"
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              ss.c_str() != rawChars
-            </Original>
-            <Expanded>
-              "hello" != "hello world!"
-            </Expanded>
-          </Expression>
-          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Original>
-              isOwned( ss )
-            </Original>
-            <Expanded>
-              true
-            </Expanded>
-          </Expression>
-          <Section name="Self-assignment after substring" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-            <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-              <Original>
-                isOwned(ss) == false
-              </Original>
-              <Expanded>
-                false == false
-              </Expanded>
-            </Expression>
-            <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-              <Original>
-                ss == "hello"
-              </Original>
-              <Expanded>
-                hello == "hello"
-              </Expanded>
-            </Expression>
-            <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-              <Original>
-                rawChars == ss.currentData()
-              </Original>
-              <Expanded>
-                "hello world!" == "hello world!"
-              </Expanded>
-            </Expression>
-            <OverallResults successes="3" failures="0" expectedFailures="0"/>
-          </Section>
-          <OverallResults successes="8" failures="0" expectedFailures="0"/>
-        </Section>
-        <OverallResults successes="8" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="Substrings" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
         <Section name="non-zero-based substring" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
@@ -10090,7 +10022,7 @@
         <Section name="Pointer values of full refs should match" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
             <Original>
-              s.c_str() == s2.c_str()
+              s.data() == s2.data()
             </Original>
             <Expanded>
               "hello world!" == "hello world!"
@@ -10101,13 +10033,13 @@
         <OverallResults successes="1" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="Substrings" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-        <Section name="Pointer values of substring refs should not match" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Section name="Pointer values of substring refs should also match" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
             <Original>
-              s.c_str() != ss.c_str()
+              s.data() == ss.data()
             </Original>
             <Expanded>
-              "hello world!" != "hello"
+              "hello world!" == "hello world!"
             </Expanded>
           </Expression>
           <OverallResults successes="1" failures="0" expectedFailures="0"/>
@@ -10128,24 +10060,46 @@
         </Section>
         <OverallResults successes="1" failures="0" expectedFailures="0"/>
       </Section>
-      <Section name="Comparisons" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
-        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+      <Section name="Substrings" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Section name="Substring off the end are trimmed" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+            <Original>
+              std::strcmp(ss.c_str(), "world!") == 0
+            </Original>
+            <Expanded>
+              0 == 0
+            </Expanded>
+          </Expression>
+          <OverallResults successes="1" failures="0" expectedFailures="0"/>
+        </Section>
+        <OverallResults successes="1" failures="0" expectedFailures="0"/>
+      </Section>
+      <Section name="Comparisons are deep" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <Expression success="true" type="CHECK" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            StringRef("hello") == StringRef("hello")
+            buffer1 != buffer2
           </Original>
           <Expanded>
-            hello == hello
+            "Hello" != "Hello"
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
           <Original>
-            StringRef("hello") != StringRef("cello")
+            left == right
           </Original>
           <Expanded>
-            hello != cello
+            Hello == Hello
           </Expanded>
         </Expression>
-        <OverallResults successes="2" failures="0" expectedFailures="0"/>
+        <Expression success="true" type="REQUIRE" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+          <Original>
+            left != left.substr(0, 3)
+          </Original>
+          <Expanded>
+            Hello != Hel
+          </Expanded>
+        </Expression>
+        <OverallResults successes="3" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="from std::string" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
         <Section name="implicitly constructed" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
@@ -10256,6 +10210,15 @@
           <OverallResults successes="2" failures="0" expectedFailures="0"/>
         </Section>
         <OverallResults successes="2" failures="0" expectedFailures="0"/>
+      </Section>
+      <OverallResult success="true"/>
+    </TestCase>
+    <TestCase name="StringRef at compilation time" tags="[StringRef][Strings][constexpr]" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+      <Section name="Simple constructors" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <OverallResults successes="5" failures="0" expectedFailures="0"/>
+      </Section>
+      <Section name="UDL construction" filename="projects/<exe-name>/IntrospectiveTests/String.tests.cpp" >
+        <OverallResults successes="6" failures="0" expectedFailures="0"/>
       </Section>
       <OverallResult success="true"/>
     </TestCase>
@@ -15427,7 +15390,7 @@
       </Section>
       <OverallResult success="true"/>
     </TestCase>
-    <OverallResults successes="1469" failures="149" expectedFailures="21"/>
+    <OverallResults successes="1475" failures="149" expectedFailures="21"/>
   </Group>
-  <OverallResults successes="1469" failures="148" expectedFailures="21"/>
+  <OverallResults successes="1475" failures="148" expectedFailures="21"/>
 </Catch>
diff --git a/projects/SelfTest/IntrospectiveTests/String.tests.cpp b/projects/SelfTest/IntrospectiveTests/String.tests.cpp
index 456dd4a..91a2b4a 100644
--- a/projects/SelfTest/IntrospectiveTests/String.tests.cpp
+++ b/projects/SelfTest/IntrospectiveTests/String.tests.cpp
@@ -4,39 +4,15 @@
 
 #include <cstring>
 
-namespace Catch {
-
-    // Implementation of test accessors
-    struct StringRefTestAccess {
-        static auto isOwned( StringRef const& stringRef ) -> bool {
-            return stringRef.isOwned();
-        }
-        static auto isSubstring( StringRef const& stringRef ) -> bool {
-            return stringRef.isSubstring();
-        }
-    };
-
-
-    namespace {
-    auto isOwned( StringRef const& stringRef ) -> bool {
-        return StringRefTestAccess::isOwned( stringRef );
-    }
-    auto isSubstring( StringRef const& stringRef ) -> bool {
-        return StringRefTestAccess::isSubstring( stringRef );
-    }
-    } // end anonymous namespace
-
-} // namespace Catch
-
 TEST_CASE( "StringRef", "[Strings][StringRef]" ) {
 
     using Catch::StringRef;
-    using Catch::isOwned; using Catch::isSubstring;
 
     SECTION( "Empty string" ) {
         StringRef empty;
         REQUIRE( empty.empty() );
         REQUIRE( empty.size() == 0 );
+        REQUIRE( empty.isNullTerminated() );
         REQUIRE( std::strcmp( empty.c_str(), "" ) == 0 );
     }
 
@@ -44,28 +20,22 @@
         StringRef s = "hello";
         REQUIRE( s.empty() == false );
         REQUIRE( s.size() == 5 );
-        REQUIRE( isSubstring( s ) == false );
+        REQUIRE( s.isNullTerminated() );
 
-        auto rawChars = s.currentData();
+        auto rawChars = s.data();
         REQUIRE( std::strcmp( rawChars, "hello" ) == 0 );
 
-        SECTION( "c_str() does not cause copy" ) {
-            REQUIRE( isOwned( s ) == false );
-
-            REQUIRE( s.c_str() == rawChars );
-
-            REQUIRE( isOwned( s ) == false );
-        }
+        REQUIRE_NOTHROW(s.c_str());
+        REQUIRE(s.c_str() == rawChars);
+        REQUIRE(s.data() == rawChars);
     }
     SECTION( "From sub-string" ) {
         StringRef original = StringRef( "original string" ).substr(0, 8);
         REQUIRE( original == "original" );
-        REQUIRE( isSubstring( original ) );
-        REQUIRE( isOwned( original ) == false );
 
-        original.c_str(); // Forces it to take ownership
-
-        REQUIRE( isOwned( original ) );
+        REQUIRE_FALSE(original.isNullTerminated());
+        REQUIRE_THROWS(original.c_str());
+        REQUIRE_NOTHROW(original.data());
     }
 
 
@@ -76,25 +46,8 @@
         SECTION( "zero-based substring" ) {
             REQUIRE( ss.empty() == false );
             REQUIRE( ss.size() == 5 );
-            REQUIRE( std::strcmp( ss.c_str(), "hello" ) == 0 );
+            REQUIRE( std::strncmp( ss.data(), "hello", 5 ) == 0 );
             REQUIRE( ss == "hello" );
-        }
-        SECTION( "c_str() causes copy" ) {
-            REQUIRE( isSubstring( ss ) );
-            REQUIRE( isOwned( ss ) == false );
-
-            auto rawChars = ss.currentData();
-            REQUIRE( rawChars == s.currentData() ); // same pointer value
-            REQUIRE( ss.c_str() != rawChars );
-
-            REQUIRE( isOwned( ss ) );
-
-            SECTION( "Self-assignment after substring" ) {
-                ss = *&ss; // the *& are there to suppress warnings (see: "Improvements to Clang's diagnostics" in https://rev.ng/gitlab/revng-bar-2019/clang/raw/master/docs/ReleaseNotes.rst)
-                REQUIRE( isOwned(ss) == false );
-                REQUIRE( ss == "hello" );
-                REQUIRE( rawChars == ss.currentData() ); // same pointer value
-            }
         }
 
         SECTION( "non-zero-based substring") {
@@ -105,21 +58,32 @@
 
         SECTION( "Pointer values of full refs should match" ) {
             StringRef s2 = s;
-            REQUIRE( s.c_str() == s2.c_str() );
+            REQUIRE( s.data() == s2.data() );
         }
 
-        SECTION( "Pointer values of substring refs should not match" ) {
-            REQUIRE( s.c_str() != ss.c_str() );
+        SECTION( "Pointer values of substring refs should also match" ) {
+            REQUIRE( s.data() == ss.data() );
         }
 
         SECTION("Past the end substring") {
             REQUIRE(s.substr(s.size() + 1, 123).empty());
         }
+
+        SECTION("Substring off the end are trimmed") {
+            ss = s.substr(6, 123);
+            REQUIRE(std::strcmp(ss.c_str(), "world!") == 0);
+        }
+        // TODO: substring into string + size is longer than end
     }
 
-    SECTION( "Comparisons" ) {
-        REQUIRE( StringRef("hello") == StringRef("hello") );
-        REQUIRE( StringRef("hello") != StringRef("cello") );
+    SECTION( "Comparisons are deep" ) {
+        char buffer1[] = "Hello";
+        char buffer2[] = "Hello";
+        CHECK(buffer1 != buffer2);
+
+        StringRef left(buffer1), right(buffer2);
+        REQUIRE( left == right );
+        REQUIRE(left != left.substr(0, 3));
     }
 
     SECTION( "from std::string" ) {
@@ -159,3 +123,28 @@
         }
     }
 }
+
+TEST_CASE("StringRef at compilation time", "[Strings][StringRef][constexpr]") {
+    using Catch::StringRef;
+    SECTION("Simple constructors") {
+        STATIC_REQUIRE(StringRef{}.size() == 0);
+
+        STATIC_REQUIRE(StringRef{ "abc", 3 }.size() == 3);
+        STATIC_REQUIRE(StringRef{ "abc", 3 }.isNullTerminated());
+
+        STATIC_REQUIRE(StringRef{ "abc", 2 }.size() == 2);
+        STATIC_REQUIRE_FALSE(StringRef{ "abc", 2 }.isNullTerminated());
+    }
+    SECTION("UDL construction") {
+        constexpr auto sr1 = "abc"_catch_sr;
+        STATIC_REQUIRE_FALSE(sr1.empty());
+        STATIC_REQUIRE(sr1.size() == 3);
+        STATIC_REQUIRE(sr1.isNullTerminated());
+
+        using Catch::operator"" _sr;
+        constexpr auto sr2 = ""_sr;
+        STATIC_REQUIRE(sr2.empty());
+        STATIC_REQUIRE(sr2.size() == 0);
+        STATIC_REQUIRE(sr2.isNullTerminated());
+    }
+}
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 385a594..8aa5b58 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,7 +14,7 @@
 endif()
 
 
-project(Catch2 LANGUAGES CXX VERSION 2.10.1)
+project(Catch2 LANGUAGES CXX VERSION 2.10.2)
 
 # Provide path for scripts
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")
diff --git a/README.md b/README.md
index f5d7017..ebf6190 100644
--- a/README.md
+++ b/README.md
@@ -5,11 +5,11 @@
 [![Build Status](https://travis-ci.org/catchorg/Catch2.svg?branch=master)](https://travis-ci.org/catchorg/Catch2)
 [![Build status](https://ci.appveyor.com/api/projects/status/github/catchorg/Catch2?svg=true)](https://ci.appveyor.com/project/catchorg/catch2)
 [![codecov](https://codecov.io/gh/catchorg/Catch2/branch/master/graph/badge.svg)](https://codecov.io/gh/catchorg/Catch2)
-[![Try online](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/oT2uthEb4CcTd0hb)
+[![Try online](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/LzYWgcPrcy9yQmed)
 [![Join the chat in Discord: https://discord.gg/4CWS9zD](https://img.shields.io/badge/Discord-Chat!-brightgreen.svg)](https://discord.gg/4CWS9zD)
 
 
-<a href="https://github.com/catchorg/Catch2/releases/download/v2.10.1/catch.hpp">The latest version of the single header can be downloaded directly using this link</a>
+<a href="https://github.com/catchorg/Catch2/releases/download/v2.10.2/catch.hpp">The latest version of the single header can be downloaded directly using this link</a>
 
 ## Catch2 is released!
 
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 8f8823a..aef09bf 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -2,6 +2,7 @@
 
 # Release notes
 **Contents**<br>
+[2.10.2](#2102)<br>
 [2.10.1](#2101)<br>
 [2.10.0](#2100)<br>
 [2.9.2](#292)<br>
@@ -30,6 +31,17 @@
 [Even Older versions](#even-older-versions)<br>
 
 
+## 2.10.2
+
+### Improvements
+* Catch2 will now compile on platform where `INFINITY` is double (#1782)
+
+
+### Fixes
+* Warning suppressed during listener registration will no longer leak
+
+
+
 ## 2.10.1
 
 ### Improvements
diff --git a/include/catch.hpp b/include/catch.hpp
index 0831a1b..805939a 100644
--- a/include/catch.hpp
+++ b/include/catch.hpp
@@ -11,7 +11,7 @@
 
 #define CATCH_VERSION_MAJOR 2
 #define CATCH_VERSION_MINOR 10
-#define CATCH_VERSION_PATCH 1
+#define CATCH_VERSION_PATCH 2
 
 #ifdef __clang__
 #    pragma clang system_header
diff --git a/include/internal/catch_version.cpp b/include/internal/catch_version.cpp
index b64212c..625e115 100644
--- a/include/internal/catch_version.cpp
+++ b/include/internal/catch_version.cpp
@@ -37,7 +37,7 @@
     }
 
     Version const& libraryVersion() {
-        static Version version( 2, 10, 1, "", 0 );
+        static Version version( 2, 10, 2, "", 0 );
         return version;
     }
 
diff --git a/single_include/catch2/catch.hpp b/single_include/catch2/catch.hpp
index 5d104bc..1b9b06e 100644
--- a/single_include/catch2/catch.hpp
+++ b/single_include/catch2/catch.hpp
@@ -1,6 +1,6 @@
 /*
- *  Catch v2.10.1
- *  Generated: 2019-10-20 20:52:21.372334
+ *  Catch v2.10.2
+ *  Generated: 2019-10-24 17:49:11.459934
  *  ----------------------------------------------------------
  *  This file has been merged from multiple headers. Please don't edit it directly
  *  Copyright (c) 2019 Two Blue Cubes Ltd. All rights reserved.
@@ -15,7 +15,7 @@
 
 #define CATCH_VERSION_MAJOR 2
 #define CATCH_VERSION_MINOR 10
-#define CATCH_VERSION_PATCH 1
+#define CATCH_VERSION_PATCH 2
 
 #ifdef __clang__
 #    pragma clang system_header
@@ -6073,9 +6073,9 @@
     CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 
 #define CATCH_REGISTER_LISTENER( listenerType ) \
-     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
-     namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
-     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
+    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
+    namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
+    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 #else // CATCH_CONFIG_DISABLE
 
 #define CATCH_REGISTER_REPORTER(name, reporterType)
@@ -11431,9 +11431,10 @@
             ret << ", ";
             write(ret, step(m_target, static_cast<double>( INFINITY), m_ulps));
         } else {
-            write(ret, step(static_cast<float>(m_target), -INFINITY, m_ulps));
+            // We have to cast INFINITY to float because of MinGW, see #1782
+            write(ret, step(static_cast<float>(m_target), static_cast<float>(-INFINITY), m_ulps));
             ret << ", ";
-            write(ret, step(static_cast<float>(m_target),  INFINITY, m_ulps));
+            write(ret, step(static_cast<float>(m_target), static_cast<float>( INFINITY), m_ulps));
         }
         ret << "])";
 
@@ -14987,7 +14988,7 @@
     }
 
     Version const& libraryVersion() {
-        static Version version( 2, 10, 1, "", 0 );
+        static Version version( 2, 10, 2, "", 0 );
         return version;
     }
 
diff --git a/include/internal/catch_reporter_registrars.hpp b/include/internal/catch_reporter_registrars.hpp
index 660f554..459caef 100644
--- a/include/internal/catch_reporter_registrars.hpp
+++ b/include/internal/catch_reporter_registrars.hpp
@@ -63,9 +63,9 @@
     CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 
 #define CATCH_REGISTER_LISTENER( listenerType ) \
-     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
-     namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
-     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
+    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
+    namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
+    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 #else // CATCH_CONFIG_DISABLE
 
 #define CATCH_REGISTER_REPORTER(name, reporterType)
diff --git a/docs/command-line.md b/docs/command-line.md
index d204da0..742d84b 100644
--- a/docs/command-line.md
+++ b/docs/command-line.md
@@ -99,6 +99,7 @@
 ~*private*              Matches all tests except those that contain 'private'
 a* ~ab* abc             Matches all tests that start with 'a', except those that
                         start with 'ab', except 'abc', which is included
+-# [#somefile]          Matches all tests from the file 'somefile.cpp'
 </pre>
 
 Names within square brackets are interpreted as tags.
diff --git a/include/internal/catch_matchers_floating.cpp b/include/internal/catch_matchers_floating.cpp
index 68fd1bd..c226fc5 100644
--- a/include/internal/catch_matchers_floating.cpp
+++ b/include/internal/catch_matchers_floating.cpp
@@ -188,9 +188,10 @@
             ret << ", ";
             write(ret, step(m_target, static_cast<double>( INFINITY), m_ulps));
         } else {
-            write(ret, step(static_cast<float>(m_target), -INFINITY, m_ulps));
+            // We have to cast INFINITY to float because of MinGW, see #1782
+            write(ret, step(static_cast<float>(m_target), static_cast<float>(-INFINITY), m_ulps));
             ret << ", ";
-            write(ret, step(static_cast<float>(m_target),  INFINITY, m_ulps));
+            write(ret, step(static_cast<float>(m_target), static_cast<float>( INFINITY), m_ulps));
         }
         ret << "])";
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2ead675..385a594 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,7 +14,7 @@
 endif()
 
 
-project(Catch2 LANGUAGES CXX VERSION 2.10.0)
+project(Catch2 LANGUAGES CXX VERSION 2.10.1)
 
 # Provide path for scripts
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")
diff --git a/README.md b/README.md
index 2b806cd..f5d7017 100644
--- a/README.md
+++ b/README.md
@@ -5,11 +5,11 @@
 [![Build Status](https://travis-ci.org/catchorg/Catch2.svg?branch=master)](https://travis-ci.org/catchorg/Catch2)
 [![Build status](https://ci.appveyor.com/api/projects/status/github/catchorg/Catch2?svg=true)](https://ci.appveyor.com/project/catchorg/catch2)
 [![codecov](https://codecov.io/gh/catchorg/Catch2/branch/master/graph/badge.svg)](https://codecov.io/gh/catchorg/Catch2)
-[![Try online](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/00GdTUbFWaV3bNah)
+[![Try online](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/oT2uthEb4CcTd0hb)
 [![Join the chat in Discord: https://discord.gg/4CWS9zD](https://img.shields.io/badge/Discord-Chat!-brightgreen.svg)](https://discord.gg/4CWS9zD)
 
 
-<a href="https://github.com/catchorg/Catch2/releases/download/v2.10.0/catch.hpp">The latest version of the single header can be downloaded directly using this link</a>
+<a href="https://github.com/catchorg/Catch2/releases/download/v2.10.1/catch.hpp">The latest version of the single header can be downloaded directly using this link</a>
 
 ## Catch2 is released!
 
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 0af35c6..8f8823a 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -2,6 +2,7 @@
 
 # Release notes
 **Contents**<br>
+[2.10.1](#2101)<br>
 [2.10.0](#2100)<br>
 [2.9.2](#292)<br>
 [2.9.1](#291)<br>
@@ -29,6 +30,23 @@
 [Even Older versions](#even-older-versions)<br>
 
 
+## 2.10.1
+
+### Improvements
+* Catch2 now guards itself against `min` and `max` macros from `windows.h` (#1772)
+* Templated tests will now compile with ICC (#1748)
+* `WithinULP` matcher now uses scientific notation for stringification (#1760)
+
+
+### Fixes
+* Templated tests no longer trigger `-Wunused-templates` (#1762)
+* Suppressed clang-analyzer false positive in context getter (#1230, #1735)
+
+
+### Miscellaneous
+* CMake no longer prohibits in-tree build when Catch2 is used as a subproject (#1773, #1774)
+
+
 
 ## 2.10.0
 
diff --git a/include/catch.hpp b/include/catch.hpp
index 5d38092..0831a1b 100644
--- a/include/catch.hpp
+++ b/include/catch.hpp
@@ -11,7 +11,7 @@
 
 #define CATCH_VERSION_MAJOR 2
 #define CATCH_VERSION_MINOR 10
-#define CATCH_VERSION_PATCH 0
+#define CATCH_VERSION_PATCH 1
 
 #ifdef __clang__
 #    pragma clang system_header
diff --git a/include/internal/catch_version.cpp b/include/internal/catch_version.cpp
index bb5b061..b64212c 100644
--- a/include/internal/catch_version.cpp
+++ b/include/internal/catch_version.cpp
@@ -37,7 +37,7 @@
     }
 
     Version const& libraryVersion() {
-        static Version version( 2, 10, 0, "", 0 );
+        static Version version( 2, 10, 1, "", 0 );
         return version;
     }
 
diff --git a/single_include/catch2/catch.hpp b/single_include/catch2/catch.hpp
index 391db53..5d104bc 100644
--- a/single_include/catch2/catch.hpp
+++ b/single_include/catch2/catch.hpp
@@ -1,6 +1,6 @@
 /*
- *  Catch v2.10.0
- *  Generated: 2019-10-13 22:24:46.755734
+ *  Catch v2.10.1
+ *  Generated: 2019-10-20 20:52:21.372334
  *  ----------------------------------------------------------
  *  This file has been merged from multiple headers. Please don't edit it directly
  *  Copyright (c) 2019 Two Blue Cubes Ltd. All rights reserved.
@@ -15,7 +15,7 @@
 
 #define CATCH_VERSION_MAJOR 2
 #define CATCH_VERSION_MINOR 10
-#define CATCH_VERSION_PATCH 0
+#define CATCH_VERSION_PATCH 1
 
 #ifdef __clang__
 #    pragma clang system_header
@@ -163,6 +163,11 @@
 #       define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
             _Pragma( "clang diagnostic pop" )
 
+#       define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+            _Pragma( "clang diagnostic push" ) \
+            _Pragma( "clang diagnostic ignored \"-Wunused-template\"" )
+#       define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
+            _Pragma( "clang diagnostic pop" )
 #endif // __clang__
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -407,6 +412,19 @@
 #if !defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)
 #   define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS
 #   define CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS
+#endif
+
+#if defined(__APPLE__) && defined(__apple_build_version__) && (__clang_major__ < 10)
+#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
+#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
+#elif defined(__clang__) && (__clang_major__ < 5)
+#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
+#   undef CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
+#endif
+
+#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS)
+#   define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
+#   define CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS
 #endif
 
 #if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
@@ -775,35 +793,49 @@
     template<typename...> struct TypeList {};\
     template<typename...Ts>\
     constexpr auto get_wrapper() noexcept -> TypeList<Ts...> { return {}; }\
+    template<template<typename...> class...> struct TemplateTypeList{};\
+    template<template<typename...> class...Cs>\
+    constexpr auto get_wrapper() noexcept -> TemplateTypeList<Cs...> { return {}; }\
+    template<typename...>\
+    struct append;\
+    template<typename...>\
+    struct rewrap;\
+    template<template<typename...> class, typename...>\
+    struct create;\
+    template<template<typename...> class, typename>\
+    struct convert;\
     \
-    template<template<typename...> class L1, typename...E1, template<typename...> class L2, typename...E2> \
-    constexpr auto append(L1<E1...>, L2<E2...>) noexcept -> L1<E1...,E2...> { return {}; }\
+    template<typename T> \
+    struct append<T> { using type = T; };\
     template< template<typename...> class L1, typename...E1, template<typename...> class L2, typename...E2, typename...Rest>\
-    constexpr auto append(L1<E1...>, L2<E2...>, Rest...) noexcept -> decltype(append(L1<E1...,E2...>{}, Rest{}...)) { return {}; }\
+    struct append<L1<E1...>, L2<E2...>, Rest...> { using type = typename append<L1<E1...,E2...>, Rest...>::type; };\
     template< template<typename...> class L1, typename...E1, typename...Rest>\
-    constexpr auto append(L1<E1...>, TypeList<mpl_::na>, Rest...) noexcept -> L1<E1...> { return {}; }\
+    struct append<L1<E1...>, TypeList<mpl_::na>, Rest...> { using type = L1<E1...>; };\
     \
     template< template<typename...> class Container, template<typename...> class List, typename...elems>\
-    constexpr auto rewrap(List<elems...>) noexcept -> TypeList<Container<elems...>> { return {}; }\
+    struct rewrap<TemplateTypeList<Container>, List<elems...>> { using type = TypeList<Container<elems...>>; };\
     template< template<typename...> class Container, template<typename...> class List, class...Elems, typename...Elements>\
-    constexpr auto rewrap(List<Elems...>,Elements...) noexcept -> decltype(append(TypeList<Container<Elems...>>{}, rewrap<Container>(Elements{}...))) { return {}; }\
+    struct rewrap<TemplateTypeList<Container>, List<Elems...>, Elements...> { using type = typename append<TypeList<Container<Elems...>>, typename rewrap<TemplateTypeList<Container>, Elements...>::type>::type; };\
     \
     template<template <typename...> class Final, template< typename...> class...Containers, typename...Types>\
-    constexpr auto create(TypeList<Types...>) noexcept -> decltype(append(Final<>{}, rewrap<Containers>(Types{}...)...)) { return {}; }\
+    struct create<Final, TemplateTypeList<Containers...>, TypeList<Types...>> { using type = typename append<Final<>, typename rewrap<TemplateTypeList<Containers>, Types...>::type...>::type; };\
     template<template <typename...> class Final, template <typename...> class List, typename...Ts>\
-    constexpr auto convert(const List<Ts...>& ) noexcept -> decltype(append(Final<>{},TypeList<Ts>{}...)) { return {}; }
+    struct convert<Final, List<Ts...>> { using type = typename append<Final<>,TypeList<Ts>...>::type; };
 
 #define INTERNAL_CATCH_NTTP_1(signature, ...)\
     template<INTERNAL_CATCH_REMOVE_PARENS(signature)> struct Nttp{};\
     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\
     constexpr auto get_wrapper() noexcept -> Nttp<__VA_ARGS__> { return {}; } \
+    template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...> struct NttpTemplateTypeList{};\
+    template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Cs>\
+    constexpr auto get_wrapper() noexcept -> NttpTemplateTypeList<Cs...> { return {}; } \
     \
     template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature)>\
-    constexpr auto rewrap(List<__VA_ARGS__>) noexcept -> TypeList<Container<__VA_ARGS__>> { return {}; }\
+    struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>> { using type = TypeList<Container<__VA_ARGS__>>; };\
     template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature), typename...Elements>\
-    constexpr auto rewrap(List<__VA_ARGS__>,Elements...elems) noexcept -> decltype(append(TypeList<Container<__VA_ARGS__>>{}, rewrap<Container>(elems...))) { return {}; }\
+    struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>, Elements...> { using type = typename append<TypeList<Container<__VA_ARGS__>>, typename rewrap<NttpTemplateTypeList<Container>, Elements...>::type>::type; };\
     template<template <typename...> class Final, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Containers, typename...Types>\
-    constexpr auto create(TypeList<Types...>) noexcept -> decltype(append(Final<>{}, rewrap<Containers>(Types{}...)...)) { return {}; }
+    struct create<Final, NttpTemplateTypeList<Containers...>, TypeList<Types...>> { using type = typename append<Final<>, typename rewrap<NttpTemplateTypeList<Containers>, Types...>::type...>::type; };
 
 #define INTERNAL_CATCH_DECLARE_SIG_TEST0(TestName)
 #define INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName, signature)\
@@ -1050,6 +1082,7 @@
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName, TestFunc, Name, Tags, Signature, ... )\
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
         namespace {\
         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
@@ -1073,6 +1106,7 @@
         }\
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
@@ -1094,6 +1128,7 @@
     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName, TestFuncName, Name, Tags, Signature, TmplTypes, TypesList) \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                      \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS                \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS                       \
         template<typename TestType> static void TestFuncName();       \
         namespace {\
         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                     \
@@ -1111,7 +1146,7 @@
                 }                                                     \
             };                                                        \
             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \
-                using TestInit = decltype(create<TestName, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>(TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>{})); \
+                using TestInit = typename create<TestName, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type; \
                 TestInit t;                                           \
                 t.reg_tests();                                        \
                 return 0;                                             \
@@ -1120,6 +1155,7 @@
         }                                                             \
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
         CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS              \
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS                     \
         template<typename TestType>                                   \
         static void TestFuncName()
 
@@ -1141,6 +1177,7 @@
 
     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName, TestFunc, Name, Tags, TmplList)\
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> static void TestFunc();       \
         namespace {\
         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
@@ -1154,13 +1191,14 @@
             }                                                     \
         };\
         static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \
-                using TestInit = decltype(convert<TestName>(std::declval<TmplList>())); \
+                using TestInit = typename convert<TestName, TmplList>::type; \
                 TestInit t;                                           \
                 t.reg_tests();                                        \
                 return 0;                                             \
             }();                                                        \
         }}\
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS                    \
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType>                                   \
         static void TestFunc()
 
@@ -1170,6 +1208,7 @@
     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... ) \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         namespace {\
         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \
             INTERNAL_CATCH_TYPE_GEN\
@@ -1193,6 +1232,7 @@
         }\
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS\
         CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS\
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS\
         INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))
 
 #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
@@ -1214,6 +1254,7 @@
     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass, TestName, ClassName, Name, Tags, Signature, TmplTypes, TypesList)\
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> \
             struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) { \
                 void test();\
@@ -1234,7 +1275,7 @@
                 }\
             };\
             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
-                using TestInit = decltype(create<TestNameClass, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>(TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>{}));\
+                using TestInit = typename create<TestNameClass, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type;\
                 TestInit t;\
                 t.reg_tests();\
                 return 0;\
@@ -1243,6 +1284,7 @@
         }\
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
         CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS \
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> \
         void TestName<TestType>::test()
 
@@ -1264,6 +1306,7 @@
 
     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, TmplList) \
         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
+        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> \
         struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) { \
             void test();\
@@ -1280,13 +1323,14 @@
                 }\
             };\
             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
-                using TestInit = decltype(convert<TestNameClass>(std::declval<TmplList>()));\
+                using TestInit = typename convert<TestNameClass, TmplList>::type;\
                 TestInit t;\
                 t.reg_tests();\
                 return 0;\
             }(); \
         }}\
         CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
+        CATCH_INTERNAL_UNSUPPRESS_UNUSED_TEMPLATE_WARNINGS \
         template<typename TestType> \
         void TestName<TestType>::test()
 
@@ -4311,6 +4355,7 @@
     {
         if( !IMutableContext::currentContext )
             IMutableContext::createContext();
+        // NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)
         return *IMutableContext::currentContext;
     }
 
@@ -4484,10 +4529,10 @@
         using state_type = std::uint64_t;
     public:
         using result_type = std::uint32_t;
-        static constexpr result_type min() {
+        static constexpr result_type (min)() {
             return 0;
         }
-        static constexpr result_type max() {
+        static constexpr result_type (max)() {
             return static_cast<result_type>(-1);
         }
 
@@ -5082,14 +5127,16 @@
             std::vector<TestCase const*> tests;
         };
         using Matches = std::vector<FilterMatch>;
+        using vectorStrings = std::vector<std::string>;
 
         bool hasFilters() const;
         bool matches( TestCaseInfo const& testCase ) const;
         Matches matchesByFilter( std::vector<TestCase> const& testCases, IConfig const& config ) const;
+        const vectorStrings & getInvalidArgs() const;
 
     private:
         std::vector<Filter> m_filters;
-
+        std::vector<std::string> m_invalidArgs;
         friend class TestSpecParser;
     };
 }
@@ -5143,7 +5190,7 @@
         TestSpec testSpec();
 
     private:
-        void visitChar( char c );
+        bool visitChar( char c );
         void startNewMode( Mode mode );
         bool processNoneChar( char c );
         void processNameChar( char c );
@@ -5153,6 +5200,8 @@
         bool isControlChar( char c ) const;
         void saveLastMode();
         void revertBackToLastMode();
+        void addFilter();
+        bool separate();
 
         template<typename T>
         void addPattern() {
@@ -5176,7 +5225,12 @@
             m_mode = None;
         }
 
-        void addFilter();
+        inline void addCharToPattern(char c) {
+            m_substring += c;
+            m_patternName += c;
+            m_realPatternPos++;
+        }
+
     };
     TestSpec parseTestSpec( std::string const& arg );
 
@@ -5584,6 +5638,8 @@
 
         virtual void noMatchingTestCases( std::string const& spec ) = 0;
 
+        virtual void reportInvalidArguments(std::string const&) {}
+
         virtual void testRunStarting( TestRunInfo const& testRunInfo ) = 0;
         virtual void testGroupStarting( GroupInfo const& groupInfo ) = 0;
 
@@ -5675,6 +5731,8 @@
         ~StreamingReporterBase() override = default;
 
         void noMatchingTestCases(std::string const&) override {}
+
+        void reportInvalidArguments(std::string const&) override {}
 
         void testRunStarting(TestRunInfo const& _testRunInfo) override {
             currentTestRunInfo = _testRunInfo;
@@ -6078,6 +6136,8 @@
         static std::string getDescription();
 
         void noMatchingTestCases(std::string const& spec) override;
+
+        void reportInvalidArguments(std::string const&arg) override;
 
         void assertionStarting(AssertionInfo const&) override;
 
@@ -9544,9 +9604,15 @@
                     if( !line.empty() && !startsWith( line, '#' ) ) {
                         if( !startsWith( line, '"' ) )
                             line = '"' + line + '"';
-                        config.testsOrTags.push_back( line + ',' );
+                        config.testsOrTags.push_back( line );
+                        config.testsOrTags.push_back( "," );
+
                     }
                 }
+                //Remove comma in the end
+                if(!config.testsOrTags.empty())
+                    config.testsOrTags.erase( config.testsOrTags.end()-1 );
+
                 return ParserResult::ok( ParseResultType::Matched );
             };
         auto const setTestOrder = [&]( std::string const& order ) {
@@ -10755,6 +10821,8 @@
 
         void noMatchingTestCases( std::string const& spec ) override;
 
+        void reportInvalidArguments(std::string const&arg) override;
+
         static std::set<Verbosity> getSupportedVerbosities();
 
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
@@ -11278,14 +11346,17 @@
     return start;
 }
 
-namespace {
+// Performs equivalent check of std::fabs(lhs - rhs) <= margin
+// But without the subtraction to allow for INFINITY in comparison
+bool marginComparison(double lhs, double rhs, double margin) {
+    return (lhs + margin >= rhs) && (rhs + margin >= lhs);
+}
 
-    // Performs equivalent check of std::fabs(lhs - rhs) <= margin
-    // But without the subtraction to allow for INFINITY in comparison
-    bool marginComparison(double lhs, double rhs, double margin) {
-        return (lhs + margin >= rhs) && (rhs + margin >= lhs);
-    }
-
+template <typename FloatingPoint>
+void write(std::ostream& out, FloatingPoint num) {
+    out << std::scientific
+        << std::setprecision(std::numeric_limits<FloatingPoint>::max_digits10 - 1)
+        << num;
 }
 
 } // end anonymous namespace
@@ -11317,7 +11388,7 @@
     WithinUlpsMatcher::WithinUlpsMatcher(double target, uint64_t ulps, FloatingPointKind baseType)
         :m_target{ target }, m_ulps{ ulps }, m_type{ baseType } {
         CATCH_ENFORCE(m_type == FloatingPointKind::Double
-                   || m_ulps < std::numeric_limits<uint32_t>::max(),
+                   || m_ulps < (std::numeric_limits<uint32_t>::max)(),
             "Provided ULP is impossibly large for a float comparison.");
     }
 
@@ -11345,27 +11416,28 @@
     std::string WithinUlpsMatcher::describe() const {
         std::stringstream ret;
 
-        ret << "is within " << m_ulps << " ULPs of " << ::Catch::Detail::stringify(m_target);
+        ret << "is within " << m_ulps << " ULPs of ";
 
         if (m_type == FloatingPointKind::Float) {
+            write(ret, static_cast<float>(m_target));
             ret << 'f';
+        } else {
+            write(ret, m_target);
         }
 
         ret << " ([";
-        ret << std::fixed << std::setprecision(std::numeric_limits<double>::max_digits10);
         if (m_type == FloatingPointKind::Double) {
-            ret << step(m_target, static_cast<double>(-INFINITY), m_ulps)
-                << ", "
-                << step(m_target, static_cast<double>(INFINITY), m_ulps);
+            write(ret, step(m_target, static_cast<double>(-INFINITY), m_ulps));
+            ret << ", ";
+            write(ret, step(m_target, static_cast<double>( INFINITY), m_ulps));
         } else {
-            ret << step<float>(static_cast<float>(m_target), -INFINITY, m_ulps)
-                << ", "
-                << step<float>(static_cast<float>(m_target), INFINITY, m_ulps);
+            write(ret, step(static_cast<float>(m_target), -INFINITY, m_ulps));
+            ret << ", ";
+            write(ret, step(static_cast<float>(m_target),  INFINITY, m_ulps));
         }
         ret << "])";
 
         return ret.str();
-        //return "is within " + Catch::to_string(m_ulps) + " ULPs of " + ::Catch::Detail::stringify(m_target) + ((m_type == FloatingPointKind::Float)? "f" : "");
     }
 
     WithinRelMatcher::WithinRelMatcher(double target, double epsilon):
@@ -11376,7 +11448,7 @@
     }
 
     bool WithinRelMatcher::match(double const& matchee) const {
-        const auto relMargin = m_epsilon * std::max(std::fabs(matchee), std::fabs(m_target));
+        const auto relMargin = m_epsilon * (std::max)(std::fabs(matchee), std::fabs(m_target));
         return marginComparison(matchee, m_target,
                                 std::isinf(relMargin)? 0 : relMargin);
     }
@@ -12983,8 +13055,9 @@
             {
                 auto const& allTestCases = getAllTestCasesSorted(*m_config);
                 m_matches = m_config->testSpec().matchesByFilter(allTestCases, *m_config);
+                auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
 
-                if (m_matches.empty()) {
+                if (m_matches.empty() && invalidArgs.empty()) {
                     for (auto const& test : allTestCases)
                         if (!test.isHidden())
                             m_tests.emplace(&test);
@@ -12995,6 +13068,7 @@
             }
 
             Totals execute() {
+                auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
                 Totals totals;
                 m_context.testGroupStarting(m_config->name(), 1, 1);
                 for (auto const& testCase : m_tests) {
@@ -13010,6 +13084,12 @@
                         totals.error = -1;
                     }
                 }
+
+                if (!invalidArgs.empty()) {
+                    for (auto const& invalidArg: invalidArgs)
+                         m_context.reporter().reportInvalidArguments(invalidArg);
+                }
+
                 m_context.testGroupEnded(m_config->name(), totals, 1, 1);
                 return totals;
             }
@@ -14305,6 +14385,10 @@
         return matches;
     }
 
+    const TestSpec::vectorStrings& TestSpec::getInvalidArgs() const{
+        return  (m_invalidArgs);
+    }
+
 }
 // end catch_test_spec.cpp
 // start catch_test_spec_parser.cpp
@@ -14321,8 +14405,13 @@
         m_substring.reserve(m_arg.size());
         m_patternName.reserve(m_arg.size());
         m_realPatternPos = 0;
+
         for( m_pos = 0; m_pos < m_arg.size(); ++m_pos )
-            visitChar( m_arg[m_pos] );
+          //if visitChar fails
+           if( !visitChar( m_arg[m_pos] ) ){
+               m_testSpec.m_invalidArgs.push_back(arg);
+               break;
+           }
         endMode();
         return *this;
     }
@@ -14330,38 +14419,32 @@
         addFilter();
         return m_testSpec;
     }
-    void TestSpecParser::visitChar( char c ) {
+    bool TestSpecParser::visitChar( char c ) {
         if( (m_mode != EscapedName) && (c == '\\') ) {
             escape();
-            m_substring += c;
-            m_patternName += c;
-            m_realPatternPos++;
-            return;
+            addCharToPattern(c);
+            return true;
         }else if((m_mode != EscapedName) && (c == ',') )  {
-            endMode();
-            addFilter();
-            return;
+            return separate();
         }
 
         switch( m_mode ) {
         case None:
             if( processNoneChar( c ) )
-                return;
+                return true;
             break;
         case Name:
             processNameChar( c );
             break;
         case EscapedName:
             endMode();
-            m_substring += c;
-            m_patternName += c;
-            m_realPatternPos++;
-            return;
+            addCharToPattern(c);
+            return true;
         default:
         case Tag:
         case QuotedName:
             if( processOtherChar( c ) )
-                return;
+                return true;
             break;
         }
 
@@ -14370,6 +14453,7 @@
             m_patternName += c;
             m_realPatternPos++;
         }
+        return true;
     }
     // Two of the processing methods return true to signal the caller to return
     // without adding the given character to the current pattern strings
@@ -14460,6 +14544,20 @@
 
     void TestSpecParser::revertBackToLastMode() {
       m_mode = lastMode;
+    }
+
+    bool TestSpecParser::separate() {
+      if( (m_mode==QuotedName) || (m_mode==Tag) ){
+         //invalid argument, signal failure to previous scope.
+         m_mode = None;
+         m_pos = m_arg.size();
+         m_substring.clear();
+         m_patternName.clear();
+         return false;
+      }
+      endMode();
+      addFilter();
+      return true; //success
     }
 
     TestSpec parseTestSpec( std::string const& arg ) {
@@ -14889,7 +14987,7 @@
     }
 
     Version const& libraryVersion() {
-        static Version version( 2, 10, 0, "", 0 );
+        static Version version( 2, 10, 1, "", 0 );
         return version;
     }
 
@@ -15926,6 +16024,10 @@
     stream << "No test cases matched '" << spec << '\'' << std::endl;
 }
 
+void ConsoleReporter::reportInvalidArguments(std::string const&arg){
+    stream << "Invalid Filter: " << arg << std::endl;
+}
+
 void ConsoleReporter::assertionStarting(AssertionInfo const&) {}
 
 bool ConsoleReporter::assertionEnded(AssertionStats const& _assertionStats) {
@@ -16526,6 +16628,13 @@
         m_reporter->noMatchingTestCases( spec );
     }
 
+    void ListeningReporter::reportInvalidArguments(std::string const&arg){
+        for ( auto const& listener : m_listeners ) {
+            listener->reportInvalidArguments( arg );
+        }
+        m_reporter->reportInvalidArguments( arg );
+    }
+
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
     void ListeningReporter::benchmarkPreparing( std::string const& name ) {
 		for (auto const& listener : m_listeners) {
diff --git a/docs/limitations.md b/docs/limitations.md
index c7a7733..65483b8 100644
--- a/docs/limitations.md
+++ b/docs/limitations.md
@@ -50,7 +50,7 @@
 Compiling Catch2 with MinGW can be exceedingly slow, especially during
 the linking step. As far as we can tell, this is caused by deficiencies
 in its default linker. If you can tell MinGW to instead use lld, via
-`-fuse-ld=ldd`, the link time should drop down to reasonable length
+`-fuse-ld=lld`, the link time should drop down to reasonable length
 again.
 
 
diff --git a/scripts/updateWandbox.py b/scripts/updateWandbox.py
index 564f948..b448713 100644
--- a/scripts/updateWandbox.py
+++ b/scripts/updateWandbox.py
@@ -41,7 +41,7 @@
         'save': True
     })
 
-    if 'status' in response and 'compiler_error' not in response:
+    if 'url' in response and 'compiler_error' not in response:
         return True, response['url']
     else:
         return False, response
diff --git a/docs/limitations.md b/docs/limitations.md
index b95cd87..c7a7733 100644
--- a/docs/limitations.md
+++ b/docs/limitations.md
@@ -45,6 +45,15 @@
 more sections in that test case and must run the test case again.
 
 
+### MinGW/CygWin compilation (linking) is extremely slow
+
+Compiling Catch2 with MinGW can be exceedingly slow, especially during
+the linking step. As far as we can tell, this is caused by deficiencies
+in its default linker. If you can tell MinGW to instead use lld, via
+`-fuse-ld=ldd`, the link time should drop down to reasonable length
+again.
+
+
 ## Features
 This section outlines some missing features, what is their status and their possible workarounds.
 
diff --git a/include/internal/catch_context.h b/include/internal/catch_context.h
index 436621f..c579c39 100644
--- a/include/internal/catch_context.h
+++ b/include/internal/catch_context.h
@@ -46,6 +46,7 @@
     {
         if( !IMutableContext::currentContext )
             IMutableContext::createContext();
+        // NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)
         return *IMutableContext::currentContext;
     }
 
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index 0a14006..cbe21fc 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -435,11 +435,20 @@
 add_test(NAME EscapeSpecialCharactersInTestNames COMMAND $<TARGET_FILE:SelfTest> "Test with special\\, characters \"in name")
 set_tests_properties(EscapeSpecialCharactersInTestNames PROPERTIES PASS_REGULAR_EXPRESSION "1 assertion in 1 test case")
 
-add_test(NAME SpecialCharactersInTestNamesFromFile COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/special-characters-in-file.input")
-set_tests_properties(SpecialCharactersInTestNamesFromFile PROPERTIES PASS_REGULAR_EXPRESSION "1 assertion in 1 test case")
+add_test(NAME TestsInFile::SimpleSpecs COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/plain-old-tests.input")
+set_tests_properties(TestsInFile::SimpleSpecs PROPERTIES PASS_REGULAR_EXPRESSION "6 assertions in 2 test cases")
 
-add_test(NAME RunningTestsFromFile COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/plain-old-tests.input")
-set_tests_properties(RunningTestsFromFile PROPERTIES PASS_REGULAR_EXPRESSION "6 assertions in 2 test cases")
+add_test(NAME TestsInFile::EscapeSpecialCharacters COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/special-characters-in-file.input")
+set_tests_properties(TestsInFile::EscapeSpecialCharacters PROPERTIES PASS_REGULAR_EXPRESSION "1 assertion in 1 test case")
+
+# CTest does not allow us to create an AND of required regular expressions,
+# so we have to split the test into 2 parts and look for parts of the expected
+# output separately.
+add_test(NAME TestsInFile::InvalidTestNames-1 COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/invalid-test-names.input")
+set_tests_properties(TestsInFile::InvalidTestNames-1 PROPERTIES PASS_REGULAR_EXPRESSION "Invalid Filter: \"Test with special, characters in \\\\\" name\"")
+
+add_test(NAME TestsInFile::InvalidTestNames-2 COMMAND $<TARGET_FILE:SelfTest> "-f ${CATCH_DIR}/projects/SelfTest/Misc/invalid-test-names.input")
+set_tests_properties(TestsInFile::InvalidTestNames-2 PROPERTIES PASS_REGULAR_EXPRESSION "No tests ran")
 
 
 if (CATCH_USE_VALGRIND)
diff --git a/projects/SelfTest/Misc/invalid-test-names.input b/projects/SelfTest/Misc/invalid-test-names.input
new file mode 100644
index 0000000..e2bc88e
--- /dev/null
+++ b/projects/SelfTest/Misc/invalid-test-names.input
@@ -0,0 +1 @@
+Test with special, characters in \" name
diff --git a/include/internal/catch_matchers_floating.cpp b/include/internal/catch_matchers_floating.cpp
index cdc0f0c..68fd1bd 100644
--- a/include/internal/catch_matchers_floating.cpp
+++ b/include/internal/catch_matchers_floating.cpp
@@ -101,14 +101,17 @@
     return start;
 }
 
-namespace {
+// Performs equivalent check of std::fabs(lhs - rhs) <= margin
+// But without the subtraction to allow for INFINITY in comparison
+bool marginComparison(double lhs, double rhs, double margin) {
+    return (lhs + margin >= rhs) && (rhs + margin >= lhs);
+}
 
-    // Performs equivalent check of std::fabs(lhs - rhs) <= margin
-    // But without the subtraction to allow for INFINITY in comparison
-    bool marginComparison(double lhs, double rhs, double margin) {
-        return (lhs + margin >= rhs) && (rhs + margin >= lhs);
-    }
-
+template <typename FloatingPoint>
+void write(std::ostream& out, FloatingPoint num) {
+    out << std::scientific
+        << std::setprecision(std::numeric_limits<FloatingPoint>::max_digits10 - 1)
+        << num;
 }
 
 } // end anonymous namespace
@@ -170,27 +173,28 @@
     std::string WithinUlpsMatcher::describe() const {
         std::stringstream ret;
 
-        ret << "is within " << m_ulps << " ULPs of " << ::Catch::Detail::stringify(m_target);
+        ret << "is within " << m_ulps << " ULPs of ";
 
         if (m_type == FloatingPointKind::Float) {
+            write(ret, static_cast<float>(m_target));
             ret << 'f';
+        } else {
+            write(ret, m_target);
         }
 
         ret << " ([";
-        ret << std::fixed << std::setprecision(std::numeric_limits<double>::max_digits10);
         if (m_type == FloatingPointKind::Double) {
-            ret << step(m_target, static_cast<double>(-INFINITY), m_ulps)
-                << ", "
-                << step(m_target, static_cast<double>(INFINITY), m_ulps);
+            write(ret, step(m_target, static_cast<double>(-INFINITY), m_ulps));
+            ret << ", ";
+            write(ret, step(m_target, static_cast<double>( INFINITY), m_ulps));
         } else {
-            ret << step<float>(static_cast<float>(m_target), -INFINITY, m_ulps)
-                << ", "
-                << step<float>(static_cast<float>(m_target), INFINITY, m_ulps);
+            write(ret, step(static_cast<float>(m_target), -INFINITY, m_ulps));
+            ret << ", ";
+            write(ret, step(static_cast<float>(m_target),  INFINITY, m_ulps));
         }
         ret << "])";
 
         return ret.str();
-        //return "is within " + Catch::to_string(m_ulps) + " ULPs of " + ::Catch::Detail::stringify(m_target) + ((m_type == FloatingPointKind::Float)? "f" : "");
     }
 
     WithinRelMatcher::WithinRelMatcher(double target, double epsilon):
diff --git a/projects/SelfTest/Baselines/compact.sw.approved.txt b/projects/SelfTest/Baselines/compact.sw.approved.txt
index 30bdd58..311183b 100644
--- a/projects/SelfTest/Baselines/compact.sw.approved.txt
+++ b/projects/SelfTest/Baselines/compact.sw.approved.txt
@@ -424,14 +424,15 @@
 Matchers.tests.cpp:<line number>: passed: 10., !WithinAbs(11., 0.5) for: 10.0 not is within 0.5 of 11.0
 Matchers.tests.cpp:<line number>: passed: -10., WithinAbs(-10., 0.5) for: -10.0 is within 0.5 of -10.0
 Matchers.tests.cpp:<line number>: passed: -10., WithinAbs(-9.6, 0.5) for: -10.0 is within 0.5 of -9.6
-Matchers.tests.cpp:<line number>: passed: 1., WithinULP(1., 0) for: 1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: nextafter(1., 2.), WithinULP(1., 1) for: 1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
-Matchers.tests.cpp:<line number>: passed: nextafter(1., 0.), WithinULP(1., 1) for: 1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
-Matchers.tests.cpp:<line number>: passed: nextafter(1., 2.), !WithinULP(1., 0) for: 1.0 not is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: 1., WithinULP(1., 0) for: 1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: -0., WithinULP(0., 0) for: -0.0 is within 0 ULPs of 0.0 ([0.00000000000000000, 0.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: 1., WithinAbs(1., 0.5) || WithinULP(2., 1) for: 1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0 ([1.99999999999999978, 2.00000000000000044]) )
-Matchers.tests.cpp:<line number>: passed: 1., WithinAbs(2., 0.5) || WithinULP(1., 0) for: 1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000]) )
+Matchers.tests.cpp:<line number>: passed: 1., WithinULP(1., 0) for: 1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
+Matchers.tests.cpp:<line number>: passed: nextafter(1., 2.), WithinULP(1., 1) for: 1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.0000000000000002e+00])
+Matchers.tests.cpp:<line number>: passed: 0., WithinULP(nextafter(0., 1.), 1) for: 0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.8813129168249309e-324])
+Matchers.tests.cpp:<line number>: passed: 1., WithinULP(nextafter(1., 0.), 1) for: 1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.0000000000000000e+00])
+Matchers.tests.cpp:<line number>: passed: 1., !WithinULP(nextafter(1., 2.), 0) for: 1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00, 1.0000000000000002e+00])
+Matchers.tests.cpp:<line number>: passed: 1., WithinULP(1., 0) for: 1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
+Matchers.tests.cpp:<line number>: passed: -0., WithinULP(0., 0) for: -0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.0000000000000000e+00])
+Matchers.tests.cpp:<line number>: passed: 1., WithinAbs(1., 0.5) || WithinULP(2., 1) for: 1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.9999999999999998e+00, 2.0000000000000004e+00]) )
+Matchers.tests.cpp:<line number>: passed: 1., WithinAbs(2., 0.5) || WithinULP(1., 0) for: 1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00]) )
 Matchers.tests.cpp:<line number>: passed: 0.0001, WithinAbs(0., 0.001) || WithinRel(0., 0.1) for: 0.0001 ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
 Matchers.tests.cpp:<line number>: passed: WithinAbs(1., 0.)
 Matchers.tests.cpp:<line number>: passed: WithinAbs(1., -1.), std::domain_error
@@ -453,14 +454,15 @@
 Matchers.tests.cpp:<line number>: passed: 10.f, !WithinAbs(11.f, 0.5f) for: 10.0f not is within 0.5 of 11.0
 Matchers.tests.cpp:<line number>: passed: -10.f, WithinAbs(-10.f, 0.5f) for: -10.0f is within 0.5 of -10.0
 Matchers.tests.cpp:<line number>: passed: -10.f, WithinAbs(-9.6f, 0.5f) for: -10.0f is within 0.5 of -9.6000003815
-Matchers.tests.cpp:<line number>: passed: 1.f, WithinULP(1.f, 0) for: 1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: nextafter(1.f, 2.f), WithinULP(1.f, 1) for: 1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
-Matchers.tests.cpp:<line number>: passed: nextafter(1.f, 0.f), WithinULP(1.f, 1) for: 1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
-Matchers.tests.cpp:<line number>: passed: nextafter(1.f, 2.f), !WithinULP(1.f, 0) for: 1.0f not is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: 1.f, WithinULP(1.f, 0) for: 1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: -0.f, WithinULP(0.f, 0) for: -0.0f is within 0 ULPs of 0.0f ([0.00000000000000000, 0.00000000000000000])
-Matchers.tests.cpp:<line number>: passed: 1.f, WithinAbs(1.f, 0.5) || WithinULP(1.f, 1) for: 1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955]) )
-Matchers.tests.cpp:<line number>: passed: 1.f, WithinAbs(2.f, 0.5) || WithinULP(1.f, 0) for: 1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000]) )
+Matchers.tests.cpp:<line number>: passed: 1.f, WithinULP(1.f, 0) for: 1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
+Matchers.tests.cpp:<line number>: passed: nextafter(1.f, 2.f), WithinULP(1.f, 1) for: 1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
+Matchers.tests.cpp:<line number>: passed: 0.f, WithinULP(nextafter(0.f, 1.f), 1) for: 0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
+Matchers.tests.cpp:<line number>: passed: 1.f, WithinULP(nextafter(1.f, 0.f), 1) for: 1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
+Matchers.tests.cpp:<line number>: passed: 1.f, !WithinULP(nextafter(1.f, 2.f), 0) for: 1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+00])
+Matchers.tests.cpp:<line number>: passed: 1.f, WithinULP(1.f, 0) for: 1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
+Matchers.tests.cpp:<line number>: passed: -0.f, WithinULP(0.f, 0) for: -0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
+Matchers.tests.cpp:<line number>: passed: 1.f, WithinAbs(1.f, 0.5) || WithinULP(1.f, 1) for: 1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00]) )
+Matchers.tests.cpp:<line number>: passed: 1.f, WithinAbs(2.f, 0.5) || WithinULP(1.f, 0) for: 1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00]) )
 Matchers.tests.cpp:<line number>: passed: 0.0001f, WithinAbs(0.f, 0.001f) || WithinRel(0.f, 0.1f) for: 0.0001f ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
 Matchers.tests.cpp:<line number>: passed: WithinAbs(1.f, 0.f)
 Matchers.tests.cpp:<line number>: passed: WithinAbs(1.f, -1.f), std::domain_error
diff --git a/projects/SelfTest/Baselines/console.std.approved.txt b/projects/SelfTest/Baselines/console.std.approved.txt
index 77acca0..fd405a8 100644
--- a/projects/SelfTest/Baselines/console.std.approved.txt
+++ b/projects/SelfTest/Baselines/console.std.approved.txt
@@ -1381,5 +1381,5 @@
 
 ===============================================================================
 test cases:  304 |  230 passed |  70 failed |  4 failed as expected
-assertions: 1619 | 1467 passed | 131 failed | 21 failed as expected
+assertions: 1621 | 1469 passed | 131 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/console.sw.approved.txt b/projects/SelfTest/Baselines/console.sw.approved.txt
index c7f1d4c..f234f88 100644
--- a/projects/SelfTest/Baselines/console.sw.approved.txt
+++ b/projects/SelfTest/Baselines/console.sw.approved.txt
@@ -3211,32 +3211,44 @@
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1., WithinULP(1., 0) )
 with expansion:
-  1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+  1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.
+  0000000000000000e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( nextafter(1., 2.), WithinULP(1., 1) )
 with expansion:
-  1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
+  1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.
+  0000000000000002e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
-  REQUIRE_THAT( nextafter(1., 0.), WithinULP(1., 1) )
+  REQUIRE_THAT( 0., WithinULP(nextafter(0., 1.), 1) )
 with expansion:
-  1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
+  0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.
+  8813129168249309e-324])
 
 Matchers.tests.cpp:<line number>: PASSED:
-  REQUIRE_THAT( nextafter(1., 2.), !WithinULP(1., 0) )
+  REQUIRE_THAT( 1., WithinULP(nextafter(1., 0.), 1) )
 with expansion:
-  1.0 not is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+  1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.
+  0000000000000000e+00])
+
+Matchers.tests.cpp:<line number>: PASSED:
+  REQUIRE_THAT( 1., !WithinULP(nextafter(1., 2.), 0) )
+with expansion:
+  1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00,
+  1.0000000000000002e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1., WithinULP(1., 0) )
 with expansion:
-  1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+  1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.
+  0000000000000000e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( -0., WithinULP(0., 0) )
 with expansion:
-  -0.0 is within 0 ULPs of 0.0 ([0.00000000000000000, 0.00000000000000000])
+  -0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.
+  0000000000000000e+00])
 
 -------------------------------------------------------------------------------
 Floating point matchers: double
@@ -3248,14 +3260,14 @@
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1., WithinAbs(1., 0.5) || WithinULP(2., 1) )
 with expansion:
-  1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0 ([1.99999999999999978,
-  2.00000000000000044]) )
+  1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.
+  9999999999999998e+00, 2.0000000000000004e+00]) )
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1., WithinAbs(2., 0.5) || WithinULP(1., 0) )
 with expansion:
-  1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0 ([1.00000000000000000,
-  1.00000000000000000]) )
+  1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.
+  0000000000000000e+00, 1.0000000000000000e+00]) )
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 0.0001, WithinAbs(0., 0.001) || WithinRel(0., 0.1) )
@@ -3389,33 +3401,38 @@
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1.f, WithinULP(1.f, 0) )
 with expansion:
-  1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
+  1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( nextafter(1.f, 2.f), WithinULP(1.f, 1) )
 with expansion:
-  1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
+  1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
-  REQUIRE_THAT( nextafter(1.f, 0.f), WithinULP(1.f, 1) )
+  REQUIRE_THAT( 0.f, WithinULP(nextafter(0.f, 1.f), 1) )
 with expansion:
-  1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
+  0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
 
 Matchers.tests.cpp:<line number>: PASSED:
-  REQUIRE_THAT( nextafter(1.f, 2.f), !WithinULP(1.f, 0) )
+  REQUIRE_THAT( 1.f, WithinULP(nextafter(1.f, 0.f), 1) )
 with expansion:
-  1.0f not is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000]
-  )
+  1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
+
+Matchers.tests.cpp:<line number>: PASSED:
+  REQUIRE_THAT( 1.f, !WithinULP(nextafter(1.f, 2.f), 0) )
+with expansion:
+  1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+
+  00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1.f, WithinULP(1.f, 0) )
 with expansion:
-  1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
+  1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( -0.f, WithinULP(0.f, 0) )
 with expansion:
-  -0.0f is within 0 ULPs of 0.0f ([0.00000000000000000, 0.00000000000000000])
+  -0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
 
 -------------------------------------------------------------------------------
 Floating point matchers: float
@@ -3427,14 +3444,14 @@
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1.f, WithinAbs(1.f, 0.5) || WithinULP(1.f, 1) )
 with expansion:
-  1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.0f ([0.
-  99999994039535522, 1.00000011920928955]) )
+  1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.
+  99999940e-01, 1.00000012e+00]) )
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 1.f, WithinAbs(2.f, 0.5) || WithinULP(1.f, 0) )
 with expansion:
-  1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0f ([1.
-  00000000000000000, 1.00000000000000000]) )
+  1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.
+  00000000e+00, 1.00000000e+00]) )
 
 Matchers.tests.cpp:<line number>: PASSED:
   REQUIRE_THAT( 0.0001f, WithinAbs(0.f, 0.001f) || WithinRel(0.f, 0.1f) )
@@ -12940,5 +12957,5 @@
 
 ===============================================================================
 test cases:  304 |  214 passed |  86 failed |  4 failed as expected
-assertions: 1636 | 1467 passed | 148 failed | 21 failed as expected
+assertions: 1638 | 1469 passed | 148 failed | 21 failed as expected
 
diff --git a/projects/SelfTest/Baselines/junit.sw.approved.txt b/projects/SelfTest/Baselines/junit.sw.approved.txt
index 247816c..bfacb03 100644
--- a/projects/SelfTest/Baselines/junit.sw.approved.txt
+++ b/projects/SelfTest/Baselines/junit.sw.approved.txt
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <testsuitesloose text artifact
 >
-  <testsuite name="<exe-name>" errors="17" failures="132" tests="1637" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
+  <testsuite name="<exe-name>" errors="17" failures="132" tests="1639" hostname="tbd" time="{duration}" timestamp="{iso8601-timestamp}">
     <properties>
       <property name="filters" value="~[!nonportable]~[!benchmark]~[approvals]"/>
       <property name="random-seed" value="1"/>
diff --git a/projects/SelfTest/Baselines/xml.sw.approved.txt b/projects/SelfTest/Baselines/xml.sw.approved.txt
index 2de31a4..6193dfb 100644
--- a/projects/SelfTest/Baselines/xml.sw.approved.txt
+++ b/projects/SelfTest/Baselines/xml.sw.approved.txt
@@ -3811,7 +3811,7 @@
             1., WithinULP(1., 0)
           </Original>
           <Expanded>
-            1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+            1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -3819,23 +3819,31 @@
             nextafter(1., 2.), WithinULP(1., 1)
           </Original>
           <Expanded>
-            1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
+            1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.0000000000000002e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
           <Original>
-            nextafter(1., 0.), WithinULP(1., 1)
+            0., WithinULP(nextafter(0., 1.), 1)
           </Original>
           <Expanded>
-            1.0 is within 1 ULPs of 1.0 ([0.99999999999999989, 1.00000000000000022])
+            0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.8813129168249309e-324])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
           <Original>
-            nextafter(1., 2.), !WithinULP(1., 0)
+            1., WithinULP(nextafter(1., 0.), 1)
           </Original>
           <Expanded>
-            1.0 not is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+            1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.0000000000000000e+00])
+          </Expanded>
+        </Expression>
+        <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
+          <Original>
+            1., !WithinULP(nextafter(1., 2.), 0)
+          </Original>
+          <Expanded>
+            1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00, 1.0000000000000002e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -3843,7 +3851,7 @@
             1., WithinULP(1., 0)
           </Original>
           <Expanded>
-            1.0 is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000])
+            1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -3851,10 +3859,10 @@
             -0., WithinULP(0., 0)
           </Original>
           <Expanded>
-            -0.0 is within 0 ULPs of 0.0 ([0.00000000000000000, 0.00000000000000000])
+            -0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.0000000000000000e+00])
           </Expanded>
         </Expression>
-        <OverallResults successes="6" failures="0" expectedFailures="0"/>
+        <OverallResults successes="7" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="Composed" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -3862,7 +3870,7 @@
             1., WithinAbs(1., 0.5) || WithinULP(2., 1)
           </Original>
           <Expanded>
-            1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0 ([1.99999999999999978, 2.00000000000000044]) )
+            1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.9999999999999998e+00, 2.0000000000000004e+00]) )
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -3870,7 +3878,7 @@
             1., WithinAbs(2., 0.5) || WithinULP(1., 0)
           </Original>
           <Expanded>
-            1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0 ([1.00000000000000000, 1.00000000000000000]) )
+            1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00]) )
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4064,7 +4072,7 @@
             1.f, WithinULP(1.f, 0)
           </Original>
           <Expanded>
-            1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
+            1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4072,23 +4080,31 @@
             nextafter(1.f, 2.f), WithinULP(1.f, 1)
           </Original>
           <Expanded>
-            1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
+            1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
           <Original>
-            nextafter(1.f, 0.f), WithinULP(1.f, 1)
+            0.f, WithinULP(nextafter(0.f, 1.f), 1)
           </Original>
           <Expanded>
-            1.0f is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955])
+            0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
           <Original>
-            nextafter(1.f, 2.f), !WithinULP(1.f, 0)
+            1.f, WithinULP(nextafter(1.f, 0.f), 1)
           </Original>
           <Expanded>
-            1.0f not is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
+            1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
+          </Expanded>
+        </Expression>
+        <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
+          <Original>
+            1.f, !WithinULP(nextafter(1.f, 2.f), 0)
+          </Original>
+          <Expanded>
+            1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4096,7 +4112,7 @@
             1.f, WithinULP(1.f, 0)
           </Original>
           <Expanded>
-            1.0f is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000])
+            1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4104,10 +4120,10 @@
             -0.f, WithinULP(0.f, 0)
           </Original>
           <Expanded>
-            -0.0f is within 0 ULPs of 0.0f ([0.00000000000000000, 0.00000000000000000])
+            -0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
           </Expanded>
         </Expression>
-        <OverallResults successes="6" failures="0" expectedFailures="0"/>
+        <OverallResults successes="7" failures="0" expectedFailures="0"/>
       </Section>
       <Section name="Composed" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4115,7 +4131,7 @@
             1.f, WithinAbs(1.f, 0.5) || WithinULP(1.f, 1)
           </Original>
           <Expanded>
-            1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.0f ([0.99999994039535522, 1.00000011920928955]) )
+            1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00]) )
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -4123,7 +4139,7 @@
             1.f, WithinAbs(2.f, 0.5) || WithinULP(1.f, 0)
           </Original>
           <Expanded>
-            1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0f ([1.00000000000000000, 1.00000000000000000]) )
+            1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00]) )
           </Expanded>
         </Expression>
         <Expression success="true" type="REQUIRE_THAT" filename="projects/<exe-name>/UsageTests/Matchers.tests.cpp" >
@@ -15411,7 +15427,7 @@
       </Section>
       <OverallResult success="true"/>
     </TestCase>
-    <OverallResults successes="1467" failures="149" expectedFailures="21"/>
+    <OverallResults successes="1469" failures="149" expectedFailures="21"/>
   </Group>
-  <OverallResults successes="1467" failures="148" expectedFailures="21"/>
+  <OverallResults successes="1469" failures="148" expectedFailures="21"/>
 </Catch>
diff --git a/projects/SelfTest/UsageTests/Matchers.tests.cpp b/projects/SelfTest/UsageTests/Matchers.tests.cpp
index 6f954ca..80e0420 100644
--- a/projects/SelfTest/UsageTests/Matchers.tests.cpp
+++ b/projects/SelfTest/UsageTests/Matchers.tests.cpp
@@ -382,8 +382,9 @@
                 REQUIRE_THAT(1.f, WithinULP(1.f, 0));
 
                 REQUIRE_THAT(nextafter(1.f, 2.f), WithinULP(1.f, 1));
-                REQUIRE_THAT(nextafter(1.f, 0.f), WithinULP(1.f, 1));
-                REQUIRE_THAT(nextafter(1.f, 2.f), !WithinULP(1.f, 0));
+                REQUIRE_THAT(0.f, WithinULP(nextafter(0.f, 1.f), 1));
+                REQUIRE_THAT(1.f, WithinULP(nextafter(1.f, 0.f), 1));
+                REQUIRE_THAT(1.f, !WithinULP(nextafter(1.f, 2.f), 0));
 
                 REQUIRE_THAT(1.f, WithinULP(1.f, 0));
                 REQUIRE_THAT(-0.f, WithinULP(0.f, 0));
@@ -437,8 +438,9 @@
                 REQUIRE_THAT(1., WithinULP(1., 0));
 
                 REQUIRE_THAT(nextafter(1., 2.), WithinULP(1., 1));
-                REQUIRE_THAT(nextafter(1., 0.), WithinULP(1., 1));
-                REQUIRE_THAT(nextafter(1., 2.), !WithinULP(1., 0));
+                REQUIRE_THAT(0.,  WithinULP(nextafter(0., 1.), 1));
+                REQUIRE_THAT(1.,  WithinULP(nextafter(1., 0.), 1));
+                REQUIRE_THAT(1., !WithinULP(nextafter(1., 2.), 0));
 
                 REQUIRE_THAT(1., WithinULP(1., 0));
                 REQUIRE_THAT(-0., WithinULP(0., 0));
diff --git a/include/internal/catch_commandline.cpp b/include/internal/catch_commandline.cpp
index 0359272..365a3c9 100644
--- a/include/internal/catch_commandline.cpp
+++ b/include/internal/catch_commandline.cpp
@@ -49,9 +49,15 @@
                     if( !line.empty() && !startsWith( line, '#' ) ) {
                         if( !startsWith( line, '"' ) )
                             line = '"' + line + '"';
-                        config.testsOrTags.push_back( line + ',' );
+                        config.testsOrTags.push_back( line );
+                        config.testsOrTags.push_back( "," );
+                        
                     }
                 }
+                //Remove comma in the end
+                if(!config.testsOrTags.empty())
+                    config.testsOrTags.erase( config.testsOrTags.end()-1 );
+                
                 return ParserResult::ok( ParseResultType::Matched );
             };
         auto const setTestOrder = [&]( std::string const& order ) {
diff --git a/include/internal/catch_interfaces_reporter.h b/include/internal/catch_interfaces_reporter.h
index e54a24a..751ef2c 100644
--- a/include/internal/catch_interfaces_reporter.h
+++ b/include/internal/catch_interfaces_reporter.h
@@ -214,6 +214,8 @@
 
         virtual void noMatchingTestCases( std::string const& spec ) = 0;
 
+        virtual void reportInvalidArguments(std::string const&) {}
+        
         virtual void testRunStarting( TestRunInfo const& testRunInfo ) = 0;
         virtual void testGroupStarting( GroupInfo const& groupInfo ) = 0;
 
diff --git a/include/internal/catch_session.cpp b/include/internal/catch_session.cpp
index 94db459..b1d7a40 100644
--- a/include/internal/catch_session.cpp
+++ b/include/internal/catch_session.cpp
@@ -68,8 +68,9 @@
             {
                 auto const& allTestCases = getAllTestCasesSorted(*m_config);
                 m_matches = m_config->testSpec().matchesByFilter(allTestCases, *m_config);
-
-                if (m_matches.empty()) {
+                auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
+                
+                if (m_matches.empty() && invalidArgs.empty()) {
                     for (auto const& test : allTestCases)
                         if (!test.isHidden())
                             m_tests.emplace(&test);
@@ -80,6 +81,7 @@
             }
 
             Totals execute() {
+                auto const& invalidArgs = m_config->testSpec().getInvalidArgs();
                 Totals totals;
                 m_context.testGroupStarting(m_config->name(), 1, 1);
                 for (auto const& testCase : m_tests) {
@@ -95,6 +97,12 @@
                         totals.error = -1;
                     }
                 }
+                
+                if (!invalidArgs.empty()) {
+                    for (auto const& invalidArg: invalidArgs)                   
+                         m_context.reporter().reportInvalidArguments(invalidArg);
+                }   
+                
                 m_context.testGroupEnded(m_config->name(), totals, 1, 1);
                 return totals;
             }
diff --git a/include/internal/catch_test_spec.cpp b/include/internal/catch_test_spec.cpp
index 4c80c56..65d34d0 100644
--- a/include/internal/catch_test_spec.cpp
+++ b/include/internal/catch_test_spec.cpp
@@ -91,5 +91,9 @@
         } );
         return matches;
     }
+    
+    const TestSpec::vectorStrings& TestSpec::getInvalidArgs() const{
+        return  (m_invalidArgs);
+    }
 
 }
diff --git a/include/internal/catch_test_spec.h b/include/internal/catch_test_spec.h
index d0e7ea9..2e54646 100644
--- a/include/internal/catch_test_spec.h
+++ b/include/internal/catch_test_spec.h
@@ -73,14 +73,16 @@
             std::vector<TestCase const*> tests;
         };
         using Matches = std::vector<FilterMatch>;
+        using vectorStrings = std::vector<std::string>;
 
         bool hasFilters() const;
         bool matches( TestCaseInfo const& testCase ) const;
         Matches matchesByFilter( std::vector<TestCase> const& testCases, IConfig const& config ) const;
+        const vectorStrings & getInvalidArgs() const;
 
     private:
         std::vector<Filter> m_filters;
-
+        std::vector<std::string> m_invalidArgs;
         friend class TestSpecParser;
     };
 }
diff --git a/include/internal/catch_test_spec_parser.cpp b/include/internal/catch_test_spec_parser.cpp
index 718185f..b872b19 100644
--- a/include/internal/catch_test_spec_parser.cpp
+++ b/include/internal/catch_test_spec_parser.cpp
@@ -20,8 +20,13 @@
         m_substring.reserve(m_arg.size());
         m_patternName.reserve(m_arg.size());
         m_realPatternPos = 0;
+        
         for( m_pos = 0; m_pos < m_arg.size(); ++m_pos )
-            visitChar( m_arg[m_pos] );
+          //if visitChar fails
+           if( !visitChar( m_arg[m_pos] ) ){ 
+               m_testSpec.m_invalidArgs.push_back(arg);
+               break;
+           }
         endMode();
         return *this;
     }
@@ -29,38 +34,32 @@
         addFilter();
         return m_testSpec;
     }
-    void TestSpecParser::visitChar( char c ) {
+    bool TestSpecParser::visitChar( char c ) {
         if( (m_mode != EscapedName) && (c == '\\') ) {
             escape();
-            m_substring += c;
-            m_patternName += c;
-            m_realPatternPos++;
-            return;
+            addCharToPattern(c);
+            return true;
         }else if((m_mode != EscapedName) && (c == ',') )  {
-            endMode();
-            addFilter();
-            return;
+            return separate();
         }
 
         switch( m_mode ) {
         case None:
             if( processNoneChar( c ) )
-                return;
+                return true;
             break;
         case Name:
             processNameChar( c );
             break;
         case EscapedName:
             endMode();
-            m_substring += c;
-            m_patternName += c;
-            m_realPatternPos++;
-            return;
+            addCharToPattern(c);
+            return true;
         default:
         case Tag:
         case QuotedName:
             if( processOtherChar( c ) )
-                return;
+                return true;
             break;
         }
 
@@ -69,6 +68,7 @@
             m_patternName += c;
             m_realPatternPos++;
         }
+        return true;
     }
     // Two of the processing methods return true to signal the caller to return
     // without adding the given character to the current pattern strings
@@ -161,6 +161,20 @@
       m_mode = lastMode;
     }
     
+    bool TestSpecParser::separate() {  
+      if( (m_mode==QuotedName) || (m_mode==Tag) ){
+         //invalid argument, signal failure to previous scope.
+         m_mode = None;
+         m_pos = m_arg.size();
+         m_substring.clear();
+         m_patternName.clear();
+         return false;
+      }
+      endMode();
+      addFilter();
+      return true; //success
+    }
+    
     TestSpec parseTestSpec( std::string const& arg ) {
         return TestSpecParser( ITagAliasRegistry::get() ).parse( arg ).testSpec();
     }
diff --git a/include/internal/catch_test_spec_parser.h b/include/internal/catch_test_spec_parser.h
index c80787c..179d353 100644
--- a/include/internal/catch_test_spec_parser.h
+++ b/include/internal/catch_test_spec_parser.h
@@ -41,7 +41,7 @@
         TestSpec testSpec();
 
     private:
-        void visitChar( char c );
+        bool visitChar( char c );
         void startNewMode( Mode mode );
         bool processNoneChar( char c );
         void processNameChar( char c );
@@ -51,6 +51,8 @@
         bool isControlChar( char c ) const;
         void saveLastMode();
         void revertBackToLastMode();
+        void addFilter();
+        bool separate();
         
         template<typename T>
         void addPattern() {
@@ -73,8 +75,13 @@
             m_exclusion = false;
             m_mode = None;
         }
-
-        void addFilter();
+        
+        inline void addCharToPattern(char c) {
+            m_substring += c;
+            m_patternName += c;
+            m_realPatternPos++;
+        }
+        
     };
     TestSpec parseTestSpec( std::string const& arg );
 
diff --git a/include/reporters/catch_reporter_bases.hpp b/include/reporters/catch_reporter_bases.hpp
index a9b0640..66a891f 100644
--- a/include/reporters/catch_reporter_bases.hpp
+++ b/include/reporters/catch_reporter_bases.hpp
@@ -51,6 +51,8 @@
 
         void noMatchingTestCases(std::string const&) override {}
 
+        void reportInvalidArguments(std::string const&) override {}
+        
         void testRunStarting(TestRunInfo const& _testRunInfo) override {
             currentTestRunInfo = _testRunInfo;
         }
@@ -277,4 +279,4 @@
 
 } // end namespace Catch
 
-#endif // TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED
+#endif // TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED
\ No newline at end of file
diff --git a/include/reporters/catch_reporter_console.cpp b/include/reporters/catch_reporter_console.cpp
index ad663ca..be00d0b 100644
--- a/include/reporters/catch_reporter_console.cpp
+++ b/include/reporters/catch_reporter_console.cpp
@@ -383,6 +383,10 @@
     stream << "No test cases matched '" << spec << '\'' << std::endl;
 }
 
+void ConsoleReporter::reportInvalidArguments(std::string const&arg){
+    stream << "Invalid Filter: " << arg << std::endl;
+}
+
 void ConsoleReporter::assertionStarting(AssertionInfo const&) {}
 
 bool ConsoleReporter::assertionEnded(AssertionStats const& _assertionStats) {
@@ -694,4 +698,4 @@
 
 #if defined(__clang__)
 #  pragma clang diagnostic pop
-#endif
+#endif
\ No newline at end of file
diff --git a/include/reporters/catch_reporter_console.h b/include/reporters/catch_reporter_console.h
index 5d21ffb..43024da 100644
--- a/include/reporters/catch_reporter_console.h
+++ b/include/reporters/catch_reporter_console.h
@@ -32,6 +32,8 @@
 
         void noMatchingTestCases(std::string const& spec) override;
 
+        void reportInvalidArguments(std::string const&arg) override;
+
         void assertionStarting(AssertionInfo const&) override;
 
         bool assertionEnded(AssertionStats const& _assertionStats) override;
@@ -84,4 +86,4 @@
 #pragma warning(pop)
 #endif
 
-#endif // TWOBLUECUBES_CATCH_REPORTER_CONSOLE_H_INCLUDED
+#endif // TWOBLUECUBES_CATCH_REPORTER_CONSOLE_H_INCLUDED
\ No newline at end of file
diff --git a/include/reporters/catch_reporter_listening.cpp b/include/reporters/catch_reporter_listening.cpp
index 6864e90..91e6b39 100644
--- a/include/reporters/catch_reporter_listening.cpp
+++ b/include/reporters/catch_reporter_listening.cpp
@@ -41,6 +41,13 @@
         }
         m_reporter->noMatchingTestCases( spec );
     }
+    
+    void ListeningReporter::reportInvalidArguments(std::string const&arg){
+        for ( auto const& listener : m_listeners ) {
+            listener->reportInvalidArguments( arg );
+        }
+        m_reporter->reportInvalidArguments( arg );
+    }    
 
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
     void ListeningReporter::benchmarkPreparing( std::string const& name ) {
@@ -154,4 +161,4 @@
         return true;
     }
 
-} // end namespace Catch
+} // end namespace Catch
\ No newline at end of file
diff --git a/include/reporters/catch_reporter_listening.h b/include/reporters/catch_reporter_listening.h
index 802db44..bfaa308 100644
--- a/include/reporters/catch_reporter_listening.h
+++ b/include/reporters/catch_reporter_listening.h
@@ -28,7 +28,9 @@
         ReporterPreferences getPreferences() const override;
 
         void noMatchingTestCases( std::string const& spec ) override;
-
+        
+        void reportInvalidArguments(std::string const&arg) override;
+        
         static std::set<Verbosity> getSupportedVerbosities();
 
 #if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)
@@ -58,4 +60,4 @@
 
 } // end namespace Catch
 
-#endif // TWOBLUECUBES_CATCH_MULTI_REPORTER_H_INCLUDED
+#endif // TWOBLUECUBES_CATCH_MULTI_REPORTER_H_INCLUDED
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index edb91c4..2ead675 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,12 +6,16 @@
   set(NOT_SUBPROJECT ON)
 endif()
 
-project(Catch2 LANGUAGES CXX VERSION 2.10.0)
-
-if (CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
+# Catch2's build breaks if done in-tree. You probably should not build
+# things in tree anyway, but we can allow projects that include Catch2
+# as a subproject to build in-tree as long as it is not in our tree.
+if (CMAKE_BINARY_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     message(FATAL_ERROR "Building in-source is not supported! Create a build dir and remove ${CMAKE_SOURCE_DIR}/CMakeCache.txt")
 endif()
 
+
+project(Catch2 LANGUAGES CXX VERSION 2.10.0)
+
 # Provide path for scripts
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")
 
